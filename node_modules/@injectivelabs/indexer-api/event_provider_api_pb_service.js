// package: event_provider_api
// file: event_provider_api.proto

var event_provider_api_pb = require("./event_provider_api_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var EventProviderAPI = (function () {
  function EventProviderAPI() {}
  EventProviderAPI.serviceName = "event_provider_api.EventProviderAPI";
  return EventProviderAPI;
}());

EventProviderAPI.GetLatestHeight = {
  methodName: "GetLatestHeight",
  service: EventProviderAPI,
  requestStream: false,
  responseStream: false,
  requestType: event_provider_api_pb.GetLatestHeightRequest,
  responseType: event_provider_api_pb.GetLatestHeightResponse
};

EventProviderAPI.GetBlockEventsRPC = {
  methodName: "GetBlockEventsRPC",
  service: EventProviderAPI,
  requestStream: false,
  responseStream: false,
  requestType: event_provider_api_pb.GetBlockEventsRPCRequest,
  responseType: event_provider_api_pb.GetBlockEventsRPCResponse
};

EventProviderAPI.GetCustomEventsRPC = {
  methodName: "GetCustomEventsRPC",
  service: EventProviderAPI,
  requestStream: false,
  responseStream: false,
  requestType: event_provider_api_pb.GetCustomEventsRPCRequest,
  responseType: event_provider_api_pb.GetCustomEventsRPCResponse
};

exports.EventProviderAPI = EventProviderAPI;

function EventProviderAPIClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

EventProviderAPIClient.prototype.getLatestHeight = function getLatestHeight(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(EventProviderAPI.GetLatestHeight, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

EventProviderAPIClient.prototype.getBlockEventsRPC = function getBlockEventsRPC(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(EventProviderAPI.GetBlockEventsRPC, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

EventProviderAPIClient.prototype.getCustomEventsRPC = function getCustomEventsRPC(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(EventProviderAPI.GetCustomEventsRPC, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.EventProviderAPIClient = EventProviderAPIClient;

