"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcPeggyTransformer = void 0;
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcPeggyTransformer {
    static moduleParamsResponseToModuleParams(response) {
        const params = response.getParams();
        const valsetReward = params.getValsetReward();
        return {
            peggyId: params.getPeggyId(),
            contractSourceHash: params.getContractSourceHash(),
            bridgeEthereumAddress: params.getBridgeEthereumAddress(),
            bridgeChainId: params.getBridgeChainId(),
            signedValsetsWindow: params.getSignedValsetsWindow(),
            signedBatchesWindow: params.getSignedBatchesWindow(),
            signedClaimsWindow: params.getSignedClaimsWindow(),
            targetBatchTimeout: params.getTargetBatchTimeout(),
            averageBlockTime: params.getAverageBlockTime(),
            averageEthereumBlockTime: params.getAverageEthereumBlockTime(),
            slashFractionValset: params.getSlashFractionValset(),
            slashFractionBatch: params.getSlashFractionBatch(),
            slashFractionClaim: params.getSlashFractionClaim(),
            slashFractionConflictingClaim: params.getSlashFractionConflictingClaim(),
            unbondSlashingValsetsWindow: params.getUnbondSlashingValsetsWindow(),
            slashFractionBadEthSignature: params.getSlashFractionBadEthSignature(),
            cosmosCoinDenom: params.getCosmosCoinDenom(),
            cosmosCoinErc20Contract: params.getCosmosCoinErc20Contract(),
            claimSlashingEnabled: params.getClaimSlashingEnabled(),
            bridgeContractStartHeight: params.getBridgeContractStartHeight(),
            valsetReward: {
                denom: valsetReward.getDenom(),
                amount: valsetReward.getAmount(),
            },
        };
    }
}
exports.ChainGrpcPeggyTransformer = ChainGrpcPeggyTransformer;
//# sourceMappingURL=ChainGrpcPeggyTransformer.js.map