// package: injective_explorer_rpc
// file: injective_explorer_rpc.proto

var injective_explorer_rpc_pb = require("./injective_explorer_rpc_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var InjectiveExplorerRPC = (function () {
  function InjectiveExplorerRPC() {}
  InjectiveExplorerRPC.serviceName = "injective_explorer_rpc.InjectiveExplorerRPC";
  return InjectiveExplorerRPC;
}());

InjectiveExplorerRPC.GetAccountTxs = {
  methodName: "GetAccountTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetAccountTxsRequest,
  responseType: injective_explorer_rpc_pb.GetAccountTxsResponse
};

InjectiveExplorerRPC.GetContractTxs = {
  methodName: "GetContractTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetContractTxsRequest,
  responseType: injective_explorer_rpc_pb.GetContractTxsResponse
};

InjectiveExplorerRPC.GetBlocks = {
  methodName: "GetBlocks",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetBlocksRequest,
  responseType: injective_explorer_rpc_pb.GetBlocksResponse
};

InjectiveExplorerRPC.GetBlock = {
  methodName: "GetBlock",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetBlockRequest,
  responseType: injective_explorer_rpc_pb.GetBlockResponse
};

InjectiveExplorerRPC.GetValidators = {
  methodName: "GetValidators",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetValidatorsRequest,
  responseType: injective_explorer_rpc_pb.GetValidatorsResponse
};

InjectiveExplorerRPC.GetValidator = {
  methodName: "GetValidator",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetValidatorRequest,
  responseType: injective_explorer_rpc_pb.GetValidatorResponse
};

InjectiveExplorerRPC.GetValidatorUptime = {
  methodName: "GetValidatorUptime",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetValidatorUptimeRequest,
  responseType: injective_explorer_rpc_pb.GetValidatorUptimeResponse
};

InjectiveExplorerRPC.GetTxs = {
  methodName: "GetTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetTxsRequest,
  responseType: injective_explorer_rpc_pb.GetTxsResponse
};

InjectiveExplorerRPC.GetTxByTxHash = {
  methodName: "GetTxByTxHash",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetTxByTxHashRequest,
  responseType: injective_explorer_rpc_pb.GetTxByTxHashResponse
};

InjectiveExplorerRPC.GetPeggyDepositTxs = {
  methodName: "GetPeggyDepositTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetPeggyDepositTxsRequest,
  responseType: injective_explorer_rpc_pb.GetPeggyDepositTxsResponse
};

InjectiveExplorerRPC.GetPeggyWithdrawalTxs = {
  methodName: "GetPeggyWithdrawalTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetPeggyWithdrawalTxsRequest,
  responseType: injective_explorer_rpc_pb.GetPeggyWithdrawalTxsResponse
};

InjectiveExplorerRPC.GetIBCTransferTxs = {
  methodName: "GetIBCTransferTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetIBCTransferTxsRequest,
  responseType: injective_explorer_rpc_pb.GetIBCTransferTxsResponse
};

InjectiveExplorerRPC.GetWasmCodes = {
  methodName: "GetWasmCodes",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetWasmCodesRequest,
  responseType: injective_explorer_rpc_pb.GetWasmCodesResponse
};

InjectiveExplorerRPC.GetWasmCodeByID = {
  methodName: "GetWasmCodeByID",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetWasmCodeByIDRequest,
  responseType: injective_explorer_rpc_pb.GetWasmCodeByIDResponse
};

InjectiveExplorerRPC.GetWasmContracts = {
  methodName: "GetWasmContracts",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetWasmContractsRequest,
  responseType: injective_explorer_rpc_pb.GetWasmContractsResponse
};

InjectiveExplorerRPC.GetWasmContractByAddress = {
  methodName: "GetWasmContractByAddress",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetWasmContractByAddressRequest,
  responseType: injective_explorer_rpc_pb.GetWasmContractByAddressResponse
};

InjectiveExplorerRPC.GetCw20Balance = {
  methodName: "GetCw20Balance",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.GetCw20BalanceRequest,
  responseType: injective_explorer_rpc_pb.GetCw20BalanceResponse
};

InjectiveExplorerRPC.Relayers = {
  methodName: "Relayers",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: false,
  requestType: injective_explorer_rpc_pb.RelayersRequest,
  responseType: injective_explorer_rpc_pb.RelayersResponse
};

InjectiveExplorerRPC.StreamTxs = {
  methodName: "StreamTxs",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: true,
  requestType: injective_explorer_rpc_pb.StreamTxsRequest,
  responseType: injective_explorer_rpc_pb.StreamTxsResponse
};

InjectiveExplorerRPC.StreamBlocks = {
  methodName: "StreamBlocks",
  service: InjectiveExplorerRPC,
  requestStream: false,
  responseStream: true,
  requestType: injective_explorer_rpc_pb.StreamBlocksRequest,
  responseType: injective_explorer_rpc_pb.StreamBlocksResponse
};

exports.InjectiveExplorerRPC = InjectiveExplorerRPC;

function InjectiveExplorerRPCClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

InjectiveExplorerRPCClient.prototype.getAccountTxs = function getAccountTxs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetAccountTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getContractTxs = function getContractTxs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetContractTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getBlocks = function getBlocks(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetBlocks, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getBlock = function getBlock(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetBlock, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getValidators = function getValidators(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetValidators, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getValidator = function getValidator(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetValidator, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getValidatorUptime = function getValidatorUptime(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetValidatorUptime, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getTxs = function getTxs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getTxByTxHash = function getTxByTxHash(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetTxByTxHash, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getPeggyDepositTxs = function getPeggyDepositTxs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetPeggyDepositTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getPeggyWithdrawalTxs = function getPeggyWithdrawalTxs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetPeggyWithdrawalTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getIBCTransferTxs = function getIBCTransferTxs(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetIBCTransferTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getWasmCodes = function getWasmCodes(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetWasmCodes, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getWasmCodeByID = function getWasmCodeByID(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetWasmCodeByID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getWasmContracts = function getWasmContracts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetWasmContracts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getWasmContractByAddress = function getWasmContractByAddress(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetWasmContractByAddress, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.getCw20Balance = function getCw20Balance(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.GetCw20Balance, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.relayers = function relayers(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(InjectiveExplorerRPC.Relayers, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.streamTxs = function streamTxs(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(InjectiveExplorerRPC.StreamTxs, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

InjectiveExplorerRPCClient.prototype.streamBlocks = function streamBlocks(requestMessage, metadata) {
  var listeners = {
    data: [],
    end: [],
    status: []
  };
  var client = grpc.invoke(InjectiveExplorerRPC.StreamBlocks, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onMessage: function (responseMessage) {
      listeners.data.forEach(function (handler) {
        handler(responseMessage);
      });
    },
    onEnd: function (status, statusMessage, trailers) {
      listeners.status.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners.end.forEach(function (handler) {
        handler({ code: status, details: statusMessage, metadata: trailers });
      });
      listeners = null;
    }
  });
  return {
    on: function (type, handler) {
      listeners[type].push(handler);
      return this;
    },
    cancel: function () {
      listeners = null;
      client.close();
    }
  };
};

exports.InjectiveExplorerRPCClient = InjectiveExplorerRPCClient;

