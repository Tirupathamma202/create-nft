"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcTransactionApi = void 0;
const injective_exchange_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_exchange_rpc_pb");
const injective_exchange_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_exchange_rpc_pb_service");
const coin_pb_1 = require("@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb");
const utils_1 = require("@injectivelabs/utils");
const BaseGrpcConsumer_1 = __importDefault(require("../../BaseGrpcConsumer"));
const transaction_1 = require("../../../utils/transaction");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcTransactionApi extends BaseGrpcConsumer_1.default {
    constructor() {
        super(...arguments);
        this.module = types_1.IndexerModule.Transaction;
    }
    prepareTxRequest({ address, chainId, message, memo, estimateGas = true, gasLimit = utils_1.DEFAULT_GAS_LIMIT, feeDenom = utils_1.DEFAULT_BRIDGE_FEE_DENOM, feePrice = utils_1.DEFAULT_BRIDGE_FEE_PRICE, timeoutHeight, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const txFeeAmount = new coin_pb_1.Coin();
            txFeeAmount.setDenom(feeDenom);
            txFeeAmount.setAmount(feePrice);
            const cosmosTxFee = new injective_exchange_rpc_pb_1.CosmosTxFee();
            cosmosTxFee.setPriceList([txFeeAmount]);
            if (!estimateGas) {
                cosmosTxFee.setGas(gasLimit);
            }
            const prepareTxRequest = new injective_exchange_rpc_pb_1.PrepareTxRequest();
            prepareTxRequest.setChainId(chainId);
            prepareTxRequest.setSignerAddress(address);
            prepareTxRequest.setFee(cosmosTxFee);
            const arrayOfMessages = Array.isArray(message) ? message : [message];
            for (const message of arrayOfMessages) {
                prepareTxRequest.addMsgs(Buffer.from(JSON.stringify(message), 'utf8'));
            }
            if (timeoutHeight !== undefined) {
                prepareTxRequest.setTimeoutHeight(timeoutHeight);
            }
            if (memo) {
                prepareTxRequest.setMemo(typeof memo === 'number' ? memo.toString() : memo);
            }
            try {
                const response = yield this.request(prepareTxRequest, injective_exchange_rpc_pb_service_1.InjectiveExchangeRPC.PrepareTx);
                return response;
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw new exceptions_1.TransactionException(e.toOriginalError(), {
                        code: e.code,
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
    prepareCosmosTxRequest({ memo, address, message, estimateGas = true, gasLimit = utils_1.DEFAULT_GAS_LIMIT, feeDenom = utils_1.DEFAULT_BRIDGE_FEE_DENOM, feePrice = utils_1.DEFAULT_BRIDGE_FEE_PRICE, timeoutHeight, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const txFeeAmount = new coin_pb_1.Coin();
            txFeeAmount.setDenom(feeDenom);
            txFeeAmount.setAmount(feePrice);
            const cosmosTxFee = new injective_exchange_rpc_pb_1.CosmosTxFee();
            cosmosTxFee.setPriceList([txFeeAmount]);
            if (!estimateGas) {
                cosmosTxFee.setGas(gasLimit);
            }
            const prepareTxRequest = new injective_exchange_rpc_pb_1.PrepareCosmosTxRequest();
            prepareTxRequest.setFee(cosmosTxFee);
            prepareTxRequest.setSenderAddress(address);
            const arrayOfMessages = Array.isArray(message) ? message : [message];
            for (const message of arrayOfMessages) {
                prepareTxRequest.addMsgs(Buffer.from(JSON.stringify(message), 'utf8'));
            }
            if (timeoutHeight !== undefined) {
                prepareTxRequest.setTimeoutHeight(timeoutHeight);
            }
            if (memo) {
                prepareTxRequest.setMemo(typeof memo === 'number' ? memo.toString() : memo);
            }
            try {
                const response = yield this.request(prepareTxRequest, injective_exchange_rpc_pb_service_1.InjectiveExchangeRPC.PrepareCosmosTx);
                return response;
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw new exceptions_1.TransactionException(e.toOriginalError(), {
                        code: e.code,
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
    prepareExchangeTxRequest({ address, chainId, message, memo, estimateGas = true, gasLimit = utils_1.DEFAULT_EXCHANGE_LIMIT, feeDenom = utils_1.DEFAULT_BRIDGE_FEE_DENOM, feePrice = utils_1.DEFAULT_BRIDGE_FEE_PRICE, timeoutHeight, delegatedFee, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const txFeeAmount = new coin_pb_1.Coin();
            txFeeAmount.setDenom(feeDenom);
            txFeeAmount.setAmount(feePrice);
            const cosmosTxFee = new injective_exchange_rpc_pb_1.CosmosTxFee();
            cosmosTxFee.setPriceList([txFeeAmount]);
            if (delegatedFee !== undefined) {
                cosmosTxFee.setDelegateFee(delegatedFee);
            }
            if (!estimateGas) {
                cosmosTxFee.setGas(gasLimit);
            }
            const prepareTxRequest = new injective_exchange_rpc_pb_1.PrepareTxRequest();
            prepareTxRequest.setChainId(chainId);
            prepareTxRequest.setSignerAddress(address);
            prepareTxRequest.setFee(cosmosTxFee);
            const arrayOfMessages = Array.isArray(message) ? message : [message];
            for (const message of arrayOfMessages) {
                prepareTxRequest.addMsgs(Buffer.from(JSON.stringify(message), 'utf8'));
            }
            if (timeoutHeight !== undefined) {
                prepareTxRequest.setTimeoutHeight(timeoutHeight);
            }
            if (memo) {
                prepareTxRequest.setMemo(typeof memo === 'number' ? memo.toString() : memo);
            }
            try {
                const response = yield this.request(prepareTxRequest, injective_exchange_rpc_pb_service_1.InjectiveExchangeRPC.PrepareTx);
                return response;
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw new exceptions_1.TransactionException(e.toOriginalError(), {
                        code: e.code,
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
    broadcastTxRequest({ signature, chainId, message, txResponse, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const parsedTypedData = JSON.parse(txResponse.getData());
            const publicKeyHex = (0, transaction_1.recoverTypedSignaturePubKey)(parsedTypedData, signature);
            const cosmosPubKey = new injective_exchange_rpc_pb_1.CosmosPubKey();
            cosmosPubKey.setType(txResponse.getPubKeyType());
            cosmosPubKey.setKey(publicKeyHex);
            parsedTypedData.message.msgs = null;
            const broadcastTxRequest = new injective_exchange_rpc_pb_1.BroadcastTxRequest();
            broadcastTxRequest.setMode('block');
            broadcastTxRequest.setChainId(chainId);
            broadcastTxRequest.setPubKey(cosmosPubKey);
            broadcastTxRequest.setSignature(signature);
            broadcastTxRequest.setTx(Buffer.from(JSON.stringify(parsedTypedData.message), 'utf8'));
            broadcastTxRequest.setFeePayer(txResponse.getFeePayer());
            broadcastTxRequest.setFeePayerSig(txResponse.getFeePayerSig());
            const arrayOfMessages = Array.isArray(message) ? message : [message];
            const messagesList = arrayOfMessages.map((message) => Buffer.from(JSON.stringify(message), 'utf8'));
            broadcastTxRequest.setMsgsList(messagesList);
            try {
                const response = yield this.request(broadcastTxRequest, injective_exchange_rpc_pb_service_1.InjectiveExchangeRPC.BroadcastTx);
                return response.toObject();
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw new exceptions_1.TransactionException(e.toOriginalError(), {
                        code: e.code,
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
    broadcastCosmosTxRequest({ address, signature, txRaw, pubKey, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const pubKeyInHex = Buffer.from(pubKey.value, 'base64').toString('hex');
            const signatureInHex = Buffer.from(signature, 'base64').toString('hex');
            const cosmosPubKey = new injective_exchange_rpc_pb_1.CosmosPubKey();
            cosmosPubKey.setType(pubKey.type);
            cosmosPubKey.setKey(`0x${pubKeyInHex}`);
            txRaw.clearSignaturesList();
            const broadcastTxRequest = new injective_exchange_rpc_pb_1.BroadcastCosmosTxRequest();
            broadcastTxRequest.setSenderAddress(address);
            broadcastTxRequest.setPubKey(cosmosPubKey);
            broadcastTxRequest.setSignature(`0x${signatureInHex}`);
            broadcastTxRequest.setTx(txRaw.serializeBinary());
            try {
                const response = yield this.request(broadcastTxRequest, injective_exchange_rpc_pb_service_1.InjectiveExchangeRPC.BroadcastCosmosTx);
                return response.toObject();
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw new exceptions_1.TransactionException(e.toOriginalError(), {
                        code: e.code,
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
    fetchFeePayer() {
        return __awaiter(this, void 0, void 0, function* () {
            const getFeePayer = new injective_exchange_rpc_pb_1.GetFeePayerRequest();
            try {
                const response = yield this.request(getFeePayer, injective_exchange_rpc_pb_service_1.InjectiveExchangeRPC.GetFeePayer);
                return response.toObject();
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw new exceptions_1.TransactionException(e.toOriginalError(), {
                        code: e.code,
                        type: e.type,
                    });
                }
                throw new exceptions_1.TransactionException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                });
            }
        });
    }
}
exports.IndexerGrpcTransactionApi = IndexerGrpcTransactionApi;
//# sourceMappingURL=IndexerGrpcTransactionApi.js.map