"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcSpotTransformer = void 0;
const utils_1 = require("@injectivelabs/utils");
const pagination_1 = require("../../../utils/pagination");
const zeroPriceLevel = () => ({
    price: '0',
    quantity: '0',
    timestamp: 0,
});
/**
 * @category Indexer Grpc Transformer
 */
class IndexerGrpcSpotTransformer {
    static grpcTokenMetaToTokenMeta(tokenMeta) {
        if (!tokenMeta) {
            return;
        }
        return {
            name: tokenMeta.getName(),
            address: tokenMeta.getAddress(),
            symbol: tokenMeta.getSymbol(),
            logo: tokenMeta.getLogo(),
            decimals: tokenMeta.getDecimals(),
            updatedAt: tokenMeta.getUpdatedAt(),
            coinGeckoId: '',
        };
    }
    static marketResponseToMarket(response) {
        const market = response.getMarket();
        return IndexerGrpcSpotTransformer.grpcMarketToMarket(market);
    }
    static marketsResponseToMarkets(response) {
        const markets = response.getMarketsList();
        return IndexerGrpcSpotTransformer.grpcMarketsToMarkets(markets);
    }
    static ordersResponseToOrders(response) {
        const orders = response.getOrdersList();
        const pagination = response.getPaging();
        return {
            orders: IndexerGrpcSpotTransformer.grpcOrdersToOrders(orders),
            pagination: (0, pagination_1.grpcPagingToPaging)(pagination),
        };
    }
    static orderHistoryResponseToOrderHistory(response) {
        const orderHistory = response.getOrdersList();
        const pagination = response.getPaging();
        return {
            orderHistory: IndexerGrpcSpotTransformer.grpcOrderHistoryListToOrderHistoryList(orderHistory),
            pagination: (0, pagination_1.grpcPagingToPaging)(pagination),
        };
    }
    static tradesResponseToTrades(response) {
        const trades = response.getTradesList();
        const pagination = response.getPaging();
        return {
            trades: IndexerGrpcSpotTransformer.grpcTradesToTrades(trades),
            pagination: (0, pagination_1.grpcPagingToPaging)(pagination),
        };
    }
    static subaccountTradesListResponseToTradesList(response) {
        const tradesList = response.getTradesList();
        return IndexerGrpcSpotTransformer.grpcTradesToTrades(tradesList);
    }
    static orderbookResponseToOrderbook(response) {
        const orderbook = response.getOrderbook();
        return IndexerGrpcSpotTransformer.grpcOrderbookToOrderbook({
            buys: orderbook === null || orderbook === void 0 ? void 0 : orderbook.getBuysList(),
            sells: orderbook === null || orderbook === void 0 ? void 0 : orderbook.getSellsList(),
        });
    }
    static orderbooksResponseToOrderbooks(response) {
        const orderbooks = response.getOrderbooksList();
        return orderbooks.map((o) => {
            const orderbook = o.getOrderbook();
            return {
                marketId: o.getMarketId(),
                orderbook: IndexerGrpcSpotTransformer.grpcOrderbookToOrderbook({
                    buys: orderbook.getBuysList(),
                    sells: orderbook.getSellsList(),
                }),
            };
        });
    }
    static orderbookV2ResponseToOrderbookV2(response) {
        const orderbook = response.getOrderbook();
        return IndexerGrpcSpotTransformer.grpcOrderbookV2ToOrderbookV2({
            sequence: orderbook.getSequence(),
            buys: orderbook === null || orderbook === void 0 ? void 0 : orderbook.getBuysList(),
            sells: orderbook === null || orderbook === void 0 ? void 0 : orderbook.getSellsList(),
        });
    }
    static orderbooksV2ResponseToOrderbooksV2(response) {
        const orderbooks = response.getOrderbooksList();
        return orderbooks.map((o) => {
            const orderbook = o.getOrderbook();
            return {
                marketId: o.getMarketId(),
                orderbook: IndexerGrpcSpotTransformer.grpcOrderbookV2ToOrderbookV2({
                    sequence: orderbook.getSequence(),
                    buys: orderbook.getBuysList(),
                    sells: orderbook.getSellsList(),
                }),
            };
        });
    }
    static grpcMarketToMarket(market) {
        return {
            marketId: market.getMarketId(),
            marketStatus: market.getMarketStatus(),
            ticker: market.getTicker(),
            baseDenom: market.getBaseDenom(),
            quoteDenom: market.getQuoteDenom(),
            quoteToken: IndexerGrpcSpotTransformer.grpcTokenMetaToTokenMeta(market.getQuoteTokenMeta()),
            baseToken: IndexerGrpcSpotTransformer.grpcTokenMetaToTokenMeta(market.getBaseTokenMeta()),
            makerFeeRate: market.getMakerFeeRate(),
            takerFeeRate: market.getTakerFeeRate(),
            serviceProviderFee: market.getServiceProviderFee(),
            minPriceTickSize: new utils_1.BigNumber(market.getMinPriceTickSize()).toNumber(),
            minQuantityTickSize: new utils_1.BigNumber(market.getMinQuantityTickSize()).toNumber(),
        };
    }
    static grpcMarketsToMarkets(markets) {
        return markets.map((market) => IndexerGrpcSpotTransformer.grpcMarketToMarket(market));
    }
    static grpcPriceLevelToPriceLevel(priceLevel) {
        return {
            price: priceLevel.getPrice(),
            quantity: priceLevel.getQuantity(),
            timestamp: priceLevel.getTimestamp(),
        };
    }
    static grpcPriceLevelsToPriceLevels(priceLevels) {
        return priceLevels.map((priceLevel) => IndexerGrpcSpotTransformer.grpcPriceLevelToPriceLevel(priceLevel));
    }
    static grpcOrderbookToOrderbook({ buys, sells, }) {
        return {
            buys: IndexerGrpcSpotTransformer.grpcPriceLevelsToPriceLevels(buys),
            sells: IndexerGrpcSpotTransformer.grpcPriceLevelsToPriceLevels(sells),
        };
    }
    static grpcOrderbookV2ToOrderbookV2({ buys, sells, sequence, }) {
        return {
            sequence,
            buys: IndexerGrpcSpotTransformer.grpcPriceLevelsToPriceLevels(buys),
            sells: IndexerGrpcSpotTransformer.grpcPriceLevelsToPriceLevels(sells),
        };
    }
    static grpcOrderToOrder(order) {
        return {
            orderHash: order.getOrderHash(),
            orderSide: order.getOrderSide(),
            marketId: order.getMarketId(),
            subaccountId: order.getSubaccountId(),
            price: order.getPrice(),
            state: order.getState(),
            quantity: order.getQuantity(),
            unfilledQuantity: order.getUnfilledQuantity(),
            triggerPrice: order.getTriggerPrice(),
            feeRecipient: order.getFeeRecipient(),
            createdAt: order.getCreatedAt(),
            updatedAt: order.getUpdatedAt(),
        };
    }
    static grpcOrdersToOrders(orders) {
        return orders.map((order) => IndexerGrpcSpotTransformer.grpcOrderToOrder(order));
    }
    static grpcOrderHistoryToOrderHistory(orderHistory) {
        return {
            orderHash: orderHistory.getOrderHash(),
            marketId: orderHistory.getMarketId(),
            active: orderHistory.getIsActive(),
            subaccountId: orderHistory.getSubaccountId(),
            executionType: orderHistory.getExecutionType(),
            orderType: orderHistory.getOrderType(),
            price: orderHistory.getPrice(),
            triggerPrice: orderHistory.getTriggerPrice(),
            quantity: orderHistory.getQuantity(),
            filledQuantity: orderHistory.getFilledQuantity(),
            state: orderHistory.getState(),
            createdAt: orderHistory.getCreatedAt(),
            updatedAt: orderHistory.getUpdatedAt(),
            direction: orderHistory.getDirection(),
        };
    }
    static grpcOrderHistoryListToOrderHistoryList(orderHistory) {
        return orderHistory.map((orderHistory) => IndexerGrpcSpotTransformer.grpcOrderHistoryToOrderHistory(orderHistory));
    }
    static grpcTradeToTrade(trade) {
        const price = trade.getPrice();
        const mappedPrice = price
            ? IndexerGrpcSpotTransformer.grpcPriceLevelToPriceLevel(price)
            : zeroPriceLevel();
        return Object.assign({ orderHash: trade.getOrderHash(), subaccountId: trade.getSubaccountId(), marketId: trade.getMarketId(), tradeId: trade.getTradeId(), executedAt: trade.getExecutedAt(), feeRecipient: trade.getFeeRecipient(), tradeExecutionType: trade.getTradeExecutionType(), executionSide: trade.getExecutionSide(), tradeDirection: trade.getTradeDirection(), fee: trade.getFee() }, mappedPrice);
    }
    static grpcTradesToTrades(trades) {
        return trades.map((trade) => IndexerGrpcSpotTransformer.grpcTradeToTrade(trade));
    }
}
exports.IndexerGrpcSpotTransformer = IndexerGrpcSpotTransformer;
//# sourceMappingURL=IndexerGrpcSpotTransformer.js.map