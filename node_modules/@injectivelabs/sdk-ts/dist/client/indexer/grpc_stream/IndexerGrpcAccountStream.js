"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcAccountStream = void 0;
const injective_accounts_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_accounts_rpc_pb_service");
const injective_accounts_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_accounts_rpc_pb");
const transformers_1 = require("../transformers");
const grpc_1 = require("../../../utils/grpc");
/**
 * @category Indexer Grpc Stream
 */
class IndexerGrpcAccountStream {
    constructor(endpoint) {
        this.client = new injective_accounts_rpc_pb_service_1.InjectiveAccountsRPCClient(endpoint, {
            transport: (0, grpc_1.getGrpcTransport)(),
        });
    }
    streamSubaccountBalance({ subaccountId, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_accounts_rpc_pb_1.StreamSubaccountBalanceRequest();
        request.setSubaccountId(subaccountId);
        const stream = this.client.streamSubaccountBalance(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerAccountStreamTransformer.balanceStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
}
exports.IndexerGrpcAccountStream = IndexerGrpcAccountStream;
//# sourceMappingURL=IndexerGrpcAccountStream.js.map