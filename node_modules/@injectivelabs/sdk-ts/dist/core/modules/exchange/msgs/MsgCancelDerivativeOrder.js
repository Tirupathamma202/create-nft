"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb");
const exchange_1 = require("../../../../types/exchange");
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
class MsgCancelDerivativeOrder extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgCancelDerivativeOrder(params);
    }
    toProto() {
        const { params } = this;
        const message = new tx_pb_1.MsgCancelDerivativeOrder();
        message.setSender(params.injectiveAddress);
        message.setMarketId(params.marketId);
        message.setOrderHash(params.orderHash);
        message.setSubaccountId(params.subaccountId);
        // TODO: Send order.orderMask instead when chain handles order mask properly.
        message.setOrderMask(exchange_1.OrderMask.Any);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgCancelDerivativeOrder' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        return {
            type: 'exchange/MsgCancelDerivativeOrder',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgCancelDerivativeOrder' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.exchange.v1beta1.MsgCancelDerivativeOrder',
            message: proto,
        };
    }
}
exports.default = MsgCancelDerivativeOrder;
//# sourceMappingURL=MsgCancelDerivativeOrder.js.map