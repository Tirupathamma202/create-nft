// package: injective.wasmx.v1
// file: injective/wasmx/v1/tx.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";

export class MsgExecuteContractCompat extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getContract(): string;
  setContract(value: string): void;

  getMsg(): string;
  setMsg(value: string): void;

  getFunds(): string;
  setFunds(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgExecuteContractCompat.AsObject;
  static toObject(includeInstance: boolean, msg: MsgExecuteContractCompat): MsgExecuteContractCompat.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgExecuteContractCompat, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgExecuteContractCompat;
  static deserializeBinaryFromReader(message: MsgExecuteContractCompat, reader: jspb.BinaryReader): MsgExecuteContractCompat;
}

export namespace MsgExecuteContractCompat {
  export type AsObject = {
    sender: string,
    contract: string,
    msg: string,
    funds: string,
  }
}

export class MsgExecuteContractCompatResponse extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgExecuteContractCompatResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgExecuteContractCompatResponse): MsgExecuteContractCompatResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgExecuteContractCompatResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgExecuteContractCompatResponse;
  static deserializeBinaryFromReader(message: MsgExecuteContractCompatResponse, reader: jspb.BinaryReader): MsgExecuteContractCompatResponse;
}

export namespace MsgExecuteContractCompatResponse {
  export type AsObject = {
    data: Uint8Array | string,
  }
}

