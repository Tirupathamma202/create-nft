"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcStakingTransformer = void 0;
const utils_1 = require("@injectivelabs/utils");
const staking_1 = require("../types/staking");
const utils_2 = require("../../../utils");
const pagination_1 = require("../../../utils/pagination");
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcStakingTransformer {
    static moduleParamsResponseToModuleParams(response) {
        const params = response.getParams();
        return {
            unbondingTime: params.getUnbondingTime().getSeconds(),
            maxValidators: params.getMaxValidators(),
            maxEntries: params.getMaxEntries(),
            historicalEntries: params.getHistoricalEntries(),
            bondDenom: params.getBondDenom(),
        };
    }
    static validatorResponseToValidator(response) {
        return ChainGrpcStakingTransformer.grpcValidatorToValidator(response.getValidator());
    }
    static validatorsResponseToValidators(response) {
        const validators = response
            .getValidatorsList()
            .map((validator) => ChainGrpcStakingTransformer.grpcValidatorToValidator(validator));
        return {
            validators,
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static delegationResponseToDelegation(response) {
        const grpcDelegation = response.getDelegationResponse();
        const delegation = grpcDelegation.getDelegation();
        const balance = grpcDelegation.getBalance();
        return {
            delegation: {
                delegatorAddress: delegation ? delegation.getDelegatorAddress() : '',
                validatorAddress: delegation ? delegation.getValidatorAddress() : '',
                shares: (0, utils_2.cosmosSdkDecToBigNumber)(delegation ? delegation.getShares() : 0).toFixed(),
            },
            balance: {
                denom: balance ? balance.getDenom() : '',
                amount: new utils_1.BigNumberInWei(balance ? balance.getAmount() : 0).toFixed(),
            },
        };
    }
    static delegationsResponseToDelegations(response) {
        const grpcDelegations = response.getDelegationResponsesList();
        const delegations = grpcDelegations
            .map((grpcDelegator) => {
            const delegation = grpcDelegator.getDelegation();
            const balance = grpcDelegator.getBalance();
            return {
                delegation: {
                    delegatorAddress: delegation
                        ? delegation.getDelegatorAddress()
                        : '',
                    validatorAddress: delegation
                        ? delegation.getValidatorAddress()
                        : '',
                    shares: (0, utils_2.cosmosSdkDecToBigNumber)(delegation ? delegation.getShares() : 0).toFixed(),
                },
                balance: {
                    denom: balance ? balance.getDenom() : '',
                    amount: new utils_1.BigNumberInWei(balance ? balance.getAmount() : 0).toFixed(),
                },
            };
        })
            .filter((delegation) => new utils_1.BigNumberInWei(delegation.balance.amount).toBase().gte(utils_2.DUST_AMOUNT));
        return {
            delegations,
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static unBondingDelegationsResponseToUnBondingDelegations(response) {
        const grpcUnbondingDelegations = response.getUnbondingResponsesList();
        const unbondingDelegations = grpcUnbondingDelegations
            .reduce((unbondingDelegations, grpcUnBondingDelegation) => {
            const entries = grpcUnBondingDelegation.getEntriesList();
            const mappedEntries = entries.map((entry) => ({
                delegatorAddress: grpcUnBondingDelegation
                    ? grpcUnBondingDelegation.getDelegatorAddress()
                    : '',
                validatorAddress: grpcUnBondingDelegation
                    ? grpcUnBondingDelegation.getValidatorAddress()
                    : '',
                creationHeight: entry.getCreationHeight(),
                completionTime: entry.getCompletionTime().getSeconds(),
                initialBalance: new utils_1.BigNumberInWei(entry.getInitialBalance()).toFixed(),
                balance: new utils_1.BigNumberInWei(entry.getBalance()).toFixed(),
            }));
            return [...unbondingDelegations, ...mappedEntries];
        }, [])
            .filter((delegation) => new utils_1.BigNumberInWei(delegation.balance).toBase().gte(utils_2.DUST_AMOUNT));
        return {
            unbondingDelegations,
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static reDelegationsResponseToReDelegations(response) {
        const grpcReDelegations = response.getRedelegationResponsesList();
        const redelegations = grpcReDelegations
            .reduce((uiReDelegator, grpcReDelegation) => {
            const grpcRedelegation = grpcReDelegation.getRedelegation();
            const entries = grpcReDelegation.getEntriesList();
            if (!grpcReDelegation) {
                return uiReDelegator;
            }
            const uiRedelegations = entries.reduce((acc, redelegation) => {
                const entry = redelegation.getRedelegationEntry();
                return [
                    ...acc,
                    {
                        delegation: {
                            completionTime: entry
                                ? entry.getCompletionTime().getSeconds()
                                : 0,
                            delegatorAddress: grpcRedelegation.getDelegatorAddress() || '',
                            sourceValidatorAddress: grpcRedelegation.getValidatorSrcAddress() || '',
                            destinationValidatorAddress: (grpcRedelegation === null || grpcRedelegation === void 0 ? void 0 : grpcRedelegation.getValidatorDstAddress()) || '',
                        },
                        balance: new utils_1.BigNumberInWei(redelegation.getBalance()).toFixed(),
                    },
                ];
            }, []);
            return [...uiReDelegator, ...uiRedelegations];
        }, [])
            .filter((delegation) => new utils_1.BigNumberInWei(delegation.balance).toBase().gte(utils_2.DUST_AMOUNT));
        return {
            redelegations,
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static grpcValidatorToValidator(validator) {
        return {
            operatorAddress: validator.getOperatorAddress(),
            jailed: validator.getJailed(),
            status: ChainGrpcStakingTransformer.grpcValidatorStatusToStatus(validator.getStatus()),
            tokens: (0, utils_2.cosmosSdkDecToBigNumber)(validator.getTokens()).toFixed(),
            delegatorShares: (0, utils_2.cosmosSdkDecToBigNumber)(validator.getDelegatorShares()).toFixed(),
            description: ChainGrpcStakingTransformer.grpcValidatorDescriptionToDescription(validator.getDescription()),
            unbondingHeight: validator.getUnbondingHeight(),
            unbondingTime: validator.getUnbondingTime(),
            commission: ChainGrpcStakingTransformer.grpcValidatorCommissionToCommission(validator.getCommission()),
            minSelfDelegation: validator.getMinSelfDelegation(),
        };
    }
    static poolResponseToPool(response) {
        const pool = response.getPool();
        if (!pool) {
            return {
                notBondedTokens: '0',
                bondedTokens: '0',
            };
        }
        return {
            notBondedTokens: (0, utils_2.cosmosSdkDecToBigNumber)(pool.getNotBondedTokens()).toFixed(),
            bondedTokens: (0, utils_2.cosmosSdkDecToBigNumber)(pool.getBondedTokens()).toFixed(),
        };
    }
    static grpcValidatorDescriptionToDescription(description) {
        return {
            moniker: description ? description.getMoniker() : '',
            identity: description ? description.getIdentity() : '',
            website: description ? description.getWebsite() : '',
            securityContact: description ? description.getSecurityContact() : '',
            details: description ? description.getDetails() : '',
        };
    }
    static grpcValidatorCommissionToCommission(commission) {
        const commissionRates = commission ? commission.getCommissionRates() : null;
        return {
            commissionRates: {
                rate: (0, utils_2.cosmosSdkDecToBigNumber)(commissionRates ? commissionRates.getRate() : '0').toFixed(),
                maxRate: (0, utils_2.cosmosSdkDecToBigNumber)(commissionRates ? commissionRates.getMaxRate() : '0').toFixed(),
                maxChangeRate: (0, utils_2.cosmosSdkDecToBigNumber)(commissionRates ? commissionRates.getMaxChangeRate() : '0').toFixed(),
            },
            updateTime: commission
                ? new Date(commission.getUpdateTime().getSeconds())
                : new Date(),
        };
    }
    static grpcValidatorStatusToStatus(status) {
        switch (status) {
            case 1:
                return staking_1.BondStatus.UnBonded;
            case 2:
                return staking_1.BondStatus.UnBonding;
            case 3:
                return staking_1.BondStatus.Bonded;
            default:
                return staking_1.BondStatus.UnBonded;
        }
    }
}
exports.ChainGrpcStakingTransformer = ChainGrpcStakingTransformer;
//# sourceMappingURL=ChainGrpcStakingTransformer.js.map