"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcAccountApi = void 0;
const injective_accounts_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_accounts_rpc_pb");
const injective_accounts_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_accounts_rpc_pb_service");
const BaseGrpcConsumer_1 = __importDefault(require("../../BaseGrpcConsumer"));
const transformers_1 = require("../transformers");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcAccountApi extends BaseGrpcConsumer_1.default {
    constructor() {
        super(...arguments);
        this.module = types_1.IndexerModule.Account;
    }
    /**
     * @deprecated - use IndexerGrpcAccountPortfoliooApi.fetchPortfolio instead
     */
    fetchPortfolio(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.PortfolioRequest();
            request.setAccountAddress(address);
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.Portfolio);
                return transformers_1.IndexerGrpcAccountTransformer.accountPortfolioResponseToAccountPortfolio(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchRewards({ address, epoch }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.RewardsRequest();
            request.setAccountAddress(address);
            if (epoch) {
                request.setEpoch(epoch);
            }
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.Rewards);
                return transformers_1.IndexerGrpcAccountTransformer.tradingRewardsResponseToTradingRewards(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountsList(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.SubaccountsListRequest();
            request.setAccountAddress(address);
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.SubaccountsList);
                return response.getSubaccountsList();
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountBalance(subaccountId, denom) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.SubaccountBalanceEndpointRequest();
            request.setSubaccountId(subaccountId);
            request.setDenom(denom);
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.SubaccountBalanceEndpoint);
                return transformers_1.IndexerGrpcAccountTransformer.balanceResponseToBalance(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountBalancesList(subaccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.SubaccountBalancesListRequest();
            request.setSubaccountId(subaccountId);
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.SubaccountBalancesList);
                return transformers_1.IndexerGrpcAccountTransformer.balancesResponseToBalances(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountHistory({ subaccountId, denom, transferTypes = [], pagination, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.SubaccountHistoryRequest();
            request.setSubaccountId(subaccountId);
            if (denom) {
                request.setDenom(denom);
            }
            if (transferTypes.length > 0) {
                request.setTransferTypesList(transferTypes);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
                if (pagination.endTime !== undefined) {
                    request.setEndTime(pagination.endTime);
                }
            }
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.SubaccountHistory);
                return transformers_1.IndexerGrpcAccountTransformer.transferHistoryResponseToTransferHistory(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountOrderSummary({ subaccountId, marketId, orderDirection, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_accounts_rpc_pb_1.SubaccountOrderSummaryRequest();
            request.setSubaccountId(subaccountId);
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (orderDirection) {
                request.setOrderDirection(orderDirection);
            }
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.SubaccountOrderSummary);
                return response.toObject();
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrderStates(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { spotOrderHashes = [], derivativeOrderHashes = [] } = params || {};
            const request = new injective_accounts_rpc_pb_1.OrderStatesRequest();
            request.setSpotOrderHashesList(spotOrderHashes);
            request.setDerivativeOrderHashesList(derivativeOrderHashes);
            try {
                const response = yield this.request(request, injective_accounts_rpc_pb_service_1.InjectiveAccountsRPC.OrderStates);
                return response.toObject(); /* TODO */
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.IndexerGrpcAccountApi = IndexerGrpcAccountApi;
//# sourceMappingURL=IndexerGrpcAccountApi.js.map