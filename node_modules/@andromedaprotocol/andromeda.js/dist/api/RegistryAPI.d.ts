import type AndromedaClient from "../AndromedaClient";
import type { Fee, PrimitiveValue } from "../types";
import ADOAPI from "./ADOAPI";
export default class RegistryAPI extends ADOAPI {
    address: string;
    constructor(client: AndromedaClient, address?: string);
    /**
     * Check to ensure the registry has a valid address
     */
    private preMessage;
    /**
     * Provides a message object for the registry's `SetValue` message
     * @param value
     * @param key
     * @returns
     */
    setMsg(value: PrimitiveValue, key?: string): {
        set_value: {
            value: PrimitiveValue;
            key: string | undefined;
        };
    };
    /**
     * Sets the value for a given key (default if empty) within the registry
     * @param value
     * @param fee
     * @param key
     * @param memo
     * @param funds
     * @returns
     */
    set(value: PrimitiveValue, fee: Fee, key?: string, memo?: string): Promise<import("@cosmjs/cosmwasm-stargate").ExecuteResult>;
    /**
     * Provides a message object for the registry's `GetValue` query
     * @param key
     * @returns
     */
    getQuery(key: string): {
        andr_query: {
            get: string;
        };
    };
    /**
     * Gets the value for a given key from the registry
     * @param key
     * @returns
     */
    get<T = any>(key: string): Promise<T>;
    /**
     * Simple wrapper for getting the address for a given key from the registry
     * @param key
     * @returns
     */
    getAddress(key: string): Promise<string>;
    /**
     * Simple wrpaper for setting the address for a given key within the registry
     * @param value
     * @param fee
     * @param key
     * @param memo
     * @param funds
     * @returns
     */
    setAddress(value: PrimitiveValue, fee: Fee, key?: string, memo?: string): Promise<import("@cosmjs/cosmwasm-stargate").ExecuteResult>;
}
