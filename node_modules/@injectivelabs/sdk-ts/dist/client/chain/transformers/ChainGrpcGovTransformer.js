"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcGovTransformer = void 0;
const utils_1 = require("../../../utils");
const pagination_1 = require("../../../utils/pagination");
const utils_2 = require("../../../utils");
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcGovTransformer {
    static moduleParamsResponseToModuleParams(response) {
        var _a, _b;
        const depositParams = response.getDepositParams();
        const votingParams = response.getVotingParams();
        const tallyParams = response.getTallyParams();
        return {
            depositParams: {
                minDepositList: depositParams === null || depositParams === void 0 ? void 0 : depositParams.getMinDepositList().map((m) => m.toObject()),
                maxDepositPeriod: ((_a = depositParams === null || depositParams === void 0 ? void 0 : depositParams.getMaxDepositPeriod()) === null || _a === void 0 ? void 0 : _a.getSeconds()) || 0,
            },
            votingParams: {
                votingPeriod: ((_b = votingParams.getVotingPeriod()) === null || _b === void 0 ? void 0 : _b.getSeconds()) || 0,
            },
            tallyParams: {
                quorum: (0, utils_2.cosmosSdkDecToBigNumber)((0, utils_1.uint8ArrayToString)(tallyParams.getQuorum())).toFixed(),
                threshold: (0, utils_2.cosmosSdkDecToBigNumber)((0, utils_1.uint8ArrayToString)(tallyParams.getThreshold())).toFixed(),
                vetoThreshold: (0, utils_2.cosmosSdkDecToBigNumber)((0, utils_1.uint8ArrayToString)(tallyParams.getVetoThreshold())).toFixed(),
            },
        };
    }
    static moduleParamsResponseToModuleParamsByType({ depositParams, votingParams, tallyParams, }) {
        var _a, _b;
        return {
            depositParams: {
                minDepositList: depositParams === null || depositParams === void 0 ? void 0 : depositParams.getMinDepositList().map((m) => m.toObject()),
                maxDepositPeriod: ((_a = depositParams === null || depositParams === void 0 ? void 0 : depositParams.getMaxDepositPeriod()) === null || _a === void 0 ? void 0 : _a.getSeconds()) || 0,
            },
            votingParams: {
                votingPeriod: ((_b = votingParams.getVotingPeriod()) === null || _b === void 0 ? void 0 : _b.getSeconds()) || 0,
            },
            tallyParams: {
                quorum: (0, utils_2.cosmosSdkDecToBigNumber)((0, utils_1.uint8ArrayToString)(tallyParams.getQuorum())).toFixed(),
                threshold: (0, utils_2.cosmosSdkDecToBigNumber)((0, utils_1.uint8ArrayToString)(tallyParams.getThreshold())).toFixed(),
                vetoThreshold: (0, utils_2.cosmosSdkDecToBigNumber)((0, utils_1.uint8ArrayToString)(tallyParams.getVetoThreshold())).toFixed(),
            },
        };
    }
    static proposalResponseToProposal(response) {
        const proposal = response.getProposal();
        return ChainGrpcGovTransformer.grpcProposalToProposal(proposal);
    }
    static proposalsResponseToProposals(response) {
        const proposals = response
            .getProposalsList()
            .map((p) => ChainGrpcGovTransformer.grpcProposalToProposal(p));
        const pagination = response.getPagination();
        return {
            proposals: proposals,
            pagination: (0, pagination_1.grpcPaginationToPagination)(pagination),
        };
    }
    static depositsResponseToDeposits(response) {
        const pagination = response.getPagination();
        const deposits = response.getDepositsList().map((deposit) => {
            return {
                depositor: deposit.getDepositor(),
                amounts: deposit.getAmountList().map((coin) => ({
                    denom: coin.getDenom(),
                    amount: (0, utils_2.cosmosSdkDecToBigNumber)(coin.getAmount()).toFixed(),
                })),
            };
        });
        return {
            deposits: deposits,
            pagination: (0, pagination_1.grpcPaginationToPagination)(pagination),
        };
    }
    static votesResponseToVotes(response) {
        const pagination = response.getPagination();
        const votes = response.getVotesList().map((v) => {
            return {
                proposalId: v.getProposalId(),
                voter: v.getVoter(),
                option: v.getOption(),
            };
        });
        return {
            votes: votes,
            pagination: (0, pagination_1.grpcPaginationToPagination)(pagination),
        };
    }
    static tallyResultResponseToTallyResult(response) {
        const result = response.getTally();
        return ChainGrpcGovTransformer.grpcTallyResultToTallyResult(result);
    }
    static grpcTallyResultToTallyResult(result) {
        return {
            yes: result ? result.getYes() : '0',
            abstain: result ? result.getAbstain() : '0',
            no: result ? result.getNo() : '0',
            noWithVeto: result ? result.getNoWithVeto() : '0',
        };
    }
    static grpcProposalToProposal(proposal) {
        const finalTallyResult = proposal.getFinalTallyResult();
        const content = proposal.getContent();
        return {
            proposalId: proposal.getProposalId(),
            content: {
                type: content.getTypeName(),
                value: content.getValue(),
            },
            type: content.getTypeName(),
            submitTime: proposal.getSubmitTime().getSeconds(),
            status: proposal.getStatus(),
            finalTallyResult: ChainGrpcGovTransformer.grpcTallyResultToTallyResult(finalTallyResult),
            depositEndTime: proposal.getDepositEndTime().getSeconds(),
            totalDeposits: proposal.getTotalDepositList().map((coin) => ({
                denom: coin.getDenom(),
                amount: (0, utils_2.cosmosSdkDecToBigNumber)(coin.getAmount()).toFixed(),
            })),
            votingStartTime: proposal.getVotingStartTime().getSeconds(),
            votingEndTime: proposal.getVotingEndTime().getSeconds(),
        };
    }
}
exports.ChainGrpcGovTransformer = ChainGrpcGovTransformer;
//# sourceMappingURL=ChainGrpcGovTransformer.js.map