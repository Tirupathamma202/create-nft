import { MsgBeginRedelegate as BaseMsgBeginRedelegate } from '@injectivelabs/chain-api/cosmos/staking/v1beta1/tx_pb';
import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgBeginRedelegate {
    interface Params {
        amount: {
            denom: string;
            amount: string;
        };
        srcValidatorAddress: string;
        dstValidatorAddress: string;
        injectiveAddress: string;
    }
    type Proto = BaseMsgBeginRedelegate;
    type Object = BaseMsgBeginRedelegate.AsObject;
}
/**
 * @category Messages
 */
export default class MsgBeginRedelegate extends MsgBase<MsgBeginRedelegate.Params, MsgBeginRedelegate.Proto, MsgBeginRedelegate.Object> {
    static fromJSON(params: MsgBeginRedelegate.Params): MsgBeginRedelegate;
    toProto(): MsgBeginRedelegate.Proto;
    toData(): {
        delegatorAddress: string;
        validatorSrcAddress: string;
        validatorDstAddress: string;
        amount?: Coin.AsObject | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            delegator_address: string;
            validator_src_address: string;
            validator_dst_address: string;
            amount?: Coin.AsObject | undefined;
        };
    };
    toWeb3(): {
        delegator_address: string;
        validator_src_address: string;
        validator_dst_address: string;
        amount?: Coin.AsObject | undefined;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgBeginRedelegate;
    };
}
//# sourceMappingURL=MsgBeginRedelegate.d.ts.map