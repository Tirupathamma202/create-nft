"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryAuctionLatestState = exports.QUERY_AUCTION_LATEST_AUCTION_STATE = exports.queryBids = exports.QUERY_AUCTION_BIDS = exports.queryAuctionState = exports.QUERY_AUCTION_AUCTION_STATE = exports.queryAuctionInfo = exports.QUERY_AUCTION_AUCTION_INFO = exports.queryAuctionIds = exports.QUERY_AUCTION_AUCTION_IDS = exports.AUCTION_STATE_FRAGMENT = void 0;
const graphql_request_1 = require("graphql-request");
const client_1 = require("../client");
exports.AUCTION_STATE_FRAGMENT = (0, graphql_request_1.gql) `
  fragment AuctionStateInfo on AuctionStateResponse {
    auction_id
    coin_denom
    end_time
    high_bidder_addr
    high_bidder_amount
    is_cancelled
    start_time
    whitelist
    min_bid
  }
`;
exports.QUERY_AUCTION_AUCTION_IDS = (0, graphql_request_1.gql) `
  query QUERY_AUCTION_AUCTION_IDS(
    $contractAddress: String!
    $tokenId: String!
    $tokenAddress: String!
  ) {
    auction(address: $contractAddress) {
      auctionIDs(tokenId: $tokenId, tokenAddress: $tokenAddress) {
        auction_ids
      }
    }
  }
`;
/**
 * Queries all token IDs from an auction contract for a given token ID/token contract address tuple
 * @param contractAddress
 * @param tokenId
 * @param tokenAddress
 * @returns
 */
async function queryAuctionIds(contractAddress, tokenId, tokenAddress) {
    const resp = await (0, client_1.query)(exports.QUERY_AUCTION_AUCTION_IDS, { contractAddress, tokenId, tokenAddress });
    return resp.auction.auctionIDs.auction_ids;
}
exports.queryAuctionIds = queryAuctionIds;
exports.QUERY_AUCTION_AUCTION_INFO = (0, graphql_request_1.gql) `
  query QUERY_AUCTION_AUCTION_INFO(
    $contractAddress: String!
    $tokenAddress: String!
  ) {
    auction(address: $contractAddress) {
      auctionInfosForAddress(tokenAddress: $tokenAddress) {
        auction_ids
        token_address
        token_id
      }
    }
  }
`;
/**
 * Queries auction information from an auction contract about a particular token contract by address
 * @param contractAddress
 * @param tokenAddress
 * @returns
 */
async function queryAuctionInfo(contractAddress, tokenAddress) {
    const resp = await (0, client_1.query)(exports.QUERY_AUCTION_AUCTION_INFO, { contractAddress, tokenAddress });
    return resp.auction;
}
exports.queryAuctionInfo = queryAuctionInfo;
exports.QUERY_AUCTION_AUCTION_STATE = (0, graphql_request_1.gql) `
  query QUERY_AUCTION_AUCTION_STATE(
    $contractAddress: String!
    $auctionId: Float!
  ) {
    auction(address: $contractAddress) {
      auctionState(auctionId: $auctionId) {
        ...AuctionStateInfo
      }
    }
  }
  ${exports.AUCTION_STATE_FRAGMENT}
`;
/**
 * Queries auction state from an auction contract given an auction ID
 * @param contractAddress
 * @param auctionId
 * @returns
 */
async function queryAuctionState(contractAddress, auctionId) {
    const resp = await (0, client_1.query)(exports.QUERY_AUCTION_AUCTION_STATE, { contractAddress, auctionId });
    return resp.auction.auctionState;
}
exports.queryAuctionState = queryAuctionState;
exports.QUERY_AUCTION_BIDS = (0, graphql_request_1.gql) `
  query QUERY_AUCTION_BIDS($contractAddress: String!, $auctionId: Float!) {
    auction(address: $contractAddress) {
      bids(auctionId: $auctionId) {
        bids {
          amount
          bidder
          timestamp
        }
      }
    }
  }
`;
/**
 * Queries all bids from an auction contract for a given auction ID
 * @param contractAddress
 * @param auctionId
 * @returns
 */
async function queryBids(contractAddress, auctionId) {
    const resp = await (0, client_1.query)(exports.QUERY_AUCTION_BIDS, { auctionId, contractAddress });
    return resp.auction.bids.bids;
}
exports.queryBids = queryBids;
exports.QUERY_AUCTION_LATEST_AUCTION_STATE = (0, graphql_request_1.gql) `
  query QUERY_AUCTION_LATEST_AUCTION_STATE(
    $contractAddress: String!
    $tokenAddress: String!
    $tokenId: String!
  ) {
    auction(address: $contractAddress) {
      latestAuctionState(tokenAddress: $tokenAddress, tokenId: $tokenId) {
        ...AuctionStateInfo
      }
    }
  }
  ${exports.AUCTION_STATE_FRAGMENT}
`;
/**
 * Queries an auction contract for the latest auction state for a given token address/id tuple
 * @param contractAddress
 * @param tokenAddress
 * @param tokenId
 * @returns
 */
async function queryAuctionLatestState(contractAddress, tokenAddress, tokenId) {
    const resp = await (0, client_1.query)(exports.QUERY_AUCTION_LATEST_AUCTION_STATE, {
        contractAddress,
        tokenAddress,
        tokenId,
    });
    return resp.auction.latestAuctionState;
}
exports.queryAuctionLatestState = queryAuctionLatestState;
