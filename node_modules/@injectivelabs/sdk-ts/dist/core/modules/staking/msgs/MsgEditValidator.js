"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/cosmos/staking/v1beta1/tx_pb");
const MsgBase_1 = require("../../MsgBase");
const staking_pb_1 = require("@injectivelabs/chain-api/cosmos/staking/v1beta1/staking_pb");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
/**
 * @category Messages
 */
class MsgEditValidator extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgEditValidator(params);
    }
    toProto() {
        const { params } = this;
        const message = new tx_pb_1.MsgEditValidator();
        if (params.commissionRate) {
            message.setCommissionRate(params.commissionRate);
        }
        if (params.minSelfDelegation) {
            message.setMinSelfDelegation(params.minSelfDelegation);
        }
        if (params.description) {
            const description = new staking_pb_1.Description();
            if (params.description.moniker) {
                description.setMoniker(params.description.moniker);
            }
            if (params.description.identity) {
                description.setIdentity(params.description.identity);
            }
            if (params.description.website) {
                description.setWebsite(params.description.website);
            }
            if (params.description.securityContact) {
                description.setSecurityContact(params.description.securityContact);
            }
            if (params.description.details) {
                description.setDetails(params.description.details);
            }
            message.setDescription(description);
        }
        message.setValidatorAddress(params.validatorAddress);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/cosmos.staking.v1beta1.MsgEditValidator' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        return {
            type: 'cosmos-sdk/MsgEditValidator',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/cosmos.staking.v1beta1.MsgEditValidator' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.staking.v1beta1.MsgEditValidator',
            message: proto,
        };
    }
}
exports.default = MsgEditValidator;
//# sourceMappingURL=MsgEditValidator.js.map