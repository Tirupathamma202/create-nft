// source: injective_auction_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.injective_auction_rpc.Auction', null, global);
goog.exportSymbol('proto.injective_auction_rpc.AuctionEndpointRequest', null, global);
goog.exportSymbol('proto.injective_auction_rpc.AuctionEndpointResponse', null, global);
goog.exportSymbol('proto.injective_auction_rpc.AuctionsRequest', null, global);
goog.exportSymbol('proto.injective_auction_rpc.AuctionsResponse', null, global);
goog.exportSymbol('proto.injective_auction_rpc.Bid', null, global);
goog.exportSymbol('proto.injective_auction_rpc.Coin', null, global);
goog.exportSymbol('proto.injective_auction_rpc.StreamBidsRequest', null, global);
goog.exportSymbol('proto.injective_auction_rpc.StreamBidsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.AuctionEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_auction_rpc.AuctionEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.AuctionEndpointRequest.displayName = 'proto.injective_auction_rpc.AuctionEndpointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.AuctionEndpointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_auction_rpc.AuctionEndpointResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_auction_rpc.AuctionEndpointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.AuctionEndpointResponse.displayName = 'proto.injective_auction_rpc.AuctionEndpointResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.Auction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_auction_rpc.Auction.repeatedFields_, null);
};
goog.inherits(proto.injective_auction_rpc.Auction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.Auction.displayName = 'proto.injective_auction_rpc.Auction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.Coin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_auction_rpc.Coin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.Coin.displayName = 'proto.injective_auction_rpc.Coin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.Bid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_auction_rpc.Bid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.Bid.displayName = 'proto.injective_auction_rpc.Bid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.AuctionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_auction_rpc.AuctionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.AuctionsRequest.displayName = 'proto.injective_auction_rpc.AuctionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.AuctionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_auction_rpc.AuctionsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_auction_rpc.AuctionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.AuctionsResponse.displayName = 'proto.injective_auction_rpc.AuctionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.StreamBidsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_auction_rpc.StreamBidsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.StreamBidsRequest.displayName = 'proto.injective_auction_rpc.StreamBidsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_auction_rpc.StreamBidsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_auction_rpc.StreamBidsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_auction_rpc.StreamBidsResponse.displayName = 'proto.injective_auction_rpc.StreamBidsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.AuctionEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.AuctionEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.AuctionEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    round: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.AuctionEndpointRequest}
 */
proto.injective_auction_rpc.AuctionEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.AuctionEndpointRequest;
  return proto.injective_auction_rpc.AuctionEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.AuctionEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.AuctionEndpointRequest}
 */
proto.injective_auction_rpc.AuctionEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.AuctionEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.AuctionEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.AuctionEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRound();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
};


/**
 * optional sint64 round = 1;
 * @return {number}
 */
proto.injective_auction_rpc.AuctionEndpointRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.AuctionEndpointRequest} returns this
 */
proto.injective_auction_rpc.AuctionEndpointRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_auction_rpc.AuctionEndpointResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.AuctionEndpointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.AuctionEndpointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionEndpointResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    auction: (f = msg.getAuction()) && proto.injective_auction_rpc.Auction.toObject(includeInstance, f),
    bidsList: jspb.Message.toObjectList(msg.getBidsList(),
    proto.injective_auction_rpc.Bid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.AuctionEndpointResponse}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.AuctionEndpointResponse;
  return proto.injective_auction_rpc.AuctionEndpointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.AuctionEndpointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.AuctionEndpointResponse}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_auction_rpc.Auction;
      reader.readMessage(value,proto.injective_auction_rpc.Auction.deserializeBinaryFromReader);
      msg.setAuction(value);
      break;
    case 2:
      var value = new proto.injective_auction_rpc.Bid;
      reader.readMessage(value,proto.injective_auction_rpc.Bid.deserializeBinaryFromReader);
      msg.addBids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.AuctionEndpointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.AuctionEndpointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionEndpointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_auction_rpc.Auction.serializeBinaryToWriter
    );
  }
  f = message.getBidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective_auction_rpc.Bid.serializeBinaryToWriter
    );
  }
};


/**
 * optional Auction auction = 1;
 * @return {?proto.injective_auction_rpc.Auction}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.getAuction = function() {
  return /** @type{?proto.injective_auction_rpc.Auction} */ (
    jspb.Message.getWrapperField(this, proto.injective_auction_rpc.Auction, 1));
};


/**
 * @param {?proto.injective_auction_rpc.Auction|undefined} value
 * @return {!proto.injective_auction_rpc.AuctionEndpointResponse} returns this
*/
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.setAuction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_auction_rpc.AuctionEndpointResponse} returns this
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.clearAuction = function() {
  return this.setAuction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.hasAuction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Bid bids = 2;
 * @return {!Array<!proto.injective_auction_rpc.Bid>}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.getBidsList = function() {
  return /** @type{!Array<!proto.injective_auction_rpc.Bid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_auction_rpc.Bid, 2));
};


/**
 * @param {!Array<!proto.injective_auction_rpc.Bid>} value
 * @return {!proto.injective_auction_rpc.AuctionEndpointResponse} returns this
*/
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.setBidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective_auction_rpc.Bid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_auction_rpc.Bid}
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.addBids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective_auction_rpc.Bid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_auction_rpc.AuctionEndpointResponse} returns this
 */
proto.injective_auction_rpc.AuctionEndpointResponse.prototype.clearBidsList = function() {
  return this.setBidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_auction_rpc.Auction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.Auction.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.Auction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.Auction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.Auction.toObject = function(includeInstance, msg) {
  var f, obj = {
    winner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    basketList: jspb.Message.toObjectList(msg.getBasketList(),
    proto.injective_auction_rpc.Coin.toObject, includeInstance),
    winningBidAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    round: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.Auction}
 */
proto.injective_auction_rpc.Auction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.Auction;
  return proto.injective_auction_rpc.Auction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.Auction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.Auction}
 */
proto.injective_auction_rpc.Auction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinner(value);
      break;
    case 2:
      var value = new proto.injective_auction_rpc.Coin;
      reader.readMessage(value,proto.injective_auction_rpc.Coin.deserializeBinaryFromReader);
      msg.addBasket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWinningBidAmount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setEndTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.Auction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.Auction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.Auction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.Auction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWinner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBasketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective_auction_rpc.Coin.serializeBinaryToWriter
    );
  }
  f = message.getWinningBidAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getEndTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      5,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
};


/**
 * optional string winner = 1;
 * @return {string}
 */
proto.injective_auction_rpc.Auction.prototype.getWinner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.Auction} returns this
 */
proto.injective_auction_rpc.Auction.prototype.setWinner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Coin basket = 2;
 * @return {!Array<!proto.injective_auction_rpc.Coin>}
 */
proto.injective_auction_rpc.Auction.prototype.getBasketList = function() {
  return /** @type{!Array<!proto.injective_auction_rpc.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_auction_rpc.Coin, 2));
};


/**
 * @param {!Array<!proto.injective_auction_rpc.Coin>} value
 * @return {!proto.injective_auction_rpc.Auction} returns this
*/
proto.injective_auction_rpc.Auction.prototype.setBasketList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective_auction_rpc.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_auction_rpc.Coin}
 */
proto.injective_auction_rpc.Auction.prototype.addBasket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective_auction_rpc.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_auction_rpc.Auction} returns this
 */
proto.injective_auction_rpc.Auction.prototype.clearBasketList = function() {
  return this.setBasketList([]);
};


/**
 * optional string winning_bid_amount = 3;
 * @return {string}
 */
proto.injective_auction_rpc.Auction.prototype.getWinningBidAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.Auction} returns this
 */
proto.injective_auction_rpc.Auction.prototype.setWinningBidAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 round = 4;
 * @return {number}
 */
proto.injective_auction_rpc.Auction.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.Auction} returns this
 */
proto.injective_auction_rpc.Auction.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint64 end_timestamp = 5;
 * @return {number}
 */
proto.injective_auction_rpc.Auction.prototype.getEndTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.Auction} returns this
 */
proto.injective_auction_rpc.Auction.prototype.setEndTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint64 updated_at = 6;
 * @return {number}
 */
proto.injective_auction_rpc.Auction.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.Auction} returns this
 */
proto.injective_auction_rpc.Auction.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.Coin.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.Coin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.Coin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.Coin.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.Coin}
 */
proto.injective_auction_rpc.Coin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.Coin;
  return proto.injective_auction_rpc.Coin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.Coin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.Coin}
 */
proto.injective_auction_rpc.Coin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.Coin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.Coin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.Coin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.Coin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective_auction_rpc.Coin.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.Coin} returns this
 */
proto.injective_auction_rpc.Coin.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.injective_auction_rpc.Coin.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.Coin} returns this
 */
proto.injective_auction_rpc.Coin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.Bid.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.Bid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.Bid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.Bid.toObject = function(includeInstance, msg) {
  var f, obj = {
    bidder: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.Bid}
 */
proto.injective_auction_rpc.Bid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.Bid;
  return proto.injective_auction_rpc.Bid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.Bid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.Bid}
 */
proto.injective_auction_rpc.Bid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidder(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.Bid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.Bid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.Bid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.Bid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBidder();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional string bidder = 1;
 * @return {string}
 */
proto.injective_auction_rpc.Bid.prototype.getBidder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.Bid} returns this
 */
proto.injective_auction_rpc.Bid.prototype.setBidder = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.injective_auction_rpc.Bid.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.Bid} returns this
 */
proto.injective_auction_rpc.Bid.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional sint64 timestamp = 3;
 * @return {number}
 */
proto.injective_auction_rpc.Bid.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.Bid} returns this
 */
proto.injective_auction_rpc.Bid.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.AuctionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.AuctionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.AuctionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.AuctionsRequest}
 */
proto.injective_auction_rpc.AuctionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.AuctionsRequest;
  return proto.injective_auction_rpc.AuctionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.AuctionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.AuctionsRequest}
 */
proto.injective_auction_rpc.AuctionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.AuctionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.AuctionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.AuctionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_auction_rpc.AuctionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.AuctionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.AuctionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.AuctionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    auctionsList: jspb.Message.toObjectList(msg.getAuctionsList(),
    proto.injective_auction_rpc.Auction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.AuctionsResponse}
 */
proto.injective_auction_rpc.AuctionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.AuctionsResponse;
  return proto.injective_auction_rpc.AuctionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.AuctionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.AuctionsResponse}
 */
proto.injective_auction_rpc.AuctionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_auction_rpc.Auction;
      reader.readMessage(value,proto.injective_auction_rpc.Auction.deserializeBinaryFromReader);
      msg.addAuctions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.AuctionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.AuctionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.AuctionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.AuctionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_auction_rpc.Auction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Auction auctions = 1;
 * @return {!Array<!proto.injective_auction_rpc.Auction>}
 */
proto.injective_auction_rpc.AuctionsResponse.prototype.getAuctionsList = function() {
  return /** @type{!Array<!proto.injective_auction_rpc.Auction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_auction_rpc.Auction, 1));
};


/**
 * @param {!Array<!proto.injective_auction_rpc.Auction>} value
 * @return {!proto.injective_auction_rpc.AuctionsResponse} returns this
*/
proto.injective_auction_rpc.AuctionsResponse.prototype.setAuctionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_auction_rpc.Auction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_auction_rpc.Auction}
 */
proto.injective_auction_rpc.AuctionsResponse.prototype.addAuctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_auction_rpc.Auction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_auction_rpc.AuctionsResponse} returns this
 */
proto.injective_auction_rpc.AuctionsResponse.prototype.clearAuctionsList = function() {
  return this.setAuctionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.StreamBidsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.StreamBidsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.StreamBidsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.StreamBidsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.StreamBidsRequest}
 */
proto.injective_auction_rpc.StreamBidsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.StreamBidsRequest;
  return proto.injective_auction_rpc.StreamBidsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.StreamBidsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.StreamBidsRequest}
 */
proto.injective_auction_rpc.StreamBidsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.StreamBidsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.StreamBidsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.StreamBidsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.StreamBidsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_auction_rpc.StreamBidsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_auction_rpc.StreamBidsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.StreamBidsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bidder: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bidAmount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_auction_rpc.StreamBidsResponse}
 */
proto.injective_auction_rpc.StreamBidsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_auction_rpc.StreamBidsResponse;
  return proto.injective_auction_rpc.StreamBidsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_auction_rpc.StreamBidsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_auction_rpc.StreamBidsResponse}
 */
proto.injective_auction_rpc.StreamBidsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidder(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBidAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_auction_rpc.StreamBidsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_auction_rpc.StreamBidsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_auction_rpc.StreamBidsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBidder();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBidAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional string bidder = 1;
 * @return {string}
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.getBidder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.StreamBidsResponse} returns this
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.setBidder = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bid_amount = 2;
 * @return {string}
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.getBidAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_auction_rpc.StreamBidsResponse} returns this
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.setBidAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 round = 3;
 * @return {number}
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.StreamBidsResponse} returns this
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint64 timestamp = 4;
 * @return {number}
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_auction_rpc.StreamBidsResponse} returns this
 */
proto.injective_auction_rpc.StreamBidsResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.injective_auction_rpc);
