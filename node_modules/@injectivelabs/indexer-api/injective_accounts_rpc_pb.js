// source: injective_accounts_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.injective_accounts_rpc.AccountPortfolio', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.Coin', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.CosmosCoin', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.OrderStateRecord', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.OrderStatesRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.OrderStatesResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.Paging', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.PortfolioRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.PortfolioResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.Reward', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.RewardsRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.RewardsResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.StreamSubaccountBalanceRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.StreamSubaccountBalanceResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountBalance', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountBalanceTransfer', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountBalancesListRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountBalancesListResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountDeposit', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountHistoryRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountHistoryResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountOrderSummaryRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountOrderSummaryResponse', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountPortfolio', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountsListRequest', null, global);
goog.exportSymbol('proto.injective_accounts_rpc.SubaccountsListResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.PortfolioRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.PortfolioRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.PortfolioRequest.displayName = 'proto.injective_accounts_rpc.PortfolioRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.PortfolioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.PortfolioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.PortfolioResponse.displayName = 'proto.injective_accounts_rpc.PortfolioResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.AccountPortfolio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.AccountPortfolio.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.AccountPortfolio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.AccountPortfolio.displayName = 'proto.injective_accounts_rpc.AccountPortfolio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountPortfolio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountPortfolio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountPortfolio.displayName = 'proto.injective_accounts_rpc.SubaccountPortfolio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.OrderStatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.OrderStatesRequest.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.OrderStatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.OrderStatesRequest.displayName = 'proto.injective_accounts_rpc.OrderStatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.OrderStatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.OrderStatesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.OrderStatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.OrderStatesResponse.displayName = 'proto.injective_accounts_rpc.OrderStatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.OrderStateRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.OrderStateRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.OrderStateRecord.displayName = 'proto.injective_accounts_rpc.OrderStateRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountsListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountsListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountsListRequest.displayName = 'proto.injective_accounts_rpc.SubaccountsListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountsListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.SubaccountsListResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountsListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountsListResponse.displayName = 'proto.injective_accounts_rpc.SubaccountsListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.SubaccountBalancesListRequest.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountBalancesListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountBalancesListRequest.displayName = 'proto.injective_accounts_rpc.SubaccountBalancesListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.SubaccountBalancesListResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountBalancesListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountBalancesListResponse.displayName = 'proto.injective_accounts_rpc.SubaccountBalancesListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountBalance.displayName = 'proto.injective_accounts_rpc.SubaccountBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountDeposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountDeposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountDeposit.displayName = 'proto.injective_accounts_rpc.SubaccountDeposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.displayName = 'proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.displayName = 'proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.StreamSubaccountBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.displayName = 'proto.injective_accounts_rpc.StreamSubaccountBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.StreamSubaccountBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.displayName = 'proto.injective_accounts_rpc.StreamSubaccountBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.SubaccountHistoryRequest.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountHistoryRequest.displayName = 'proto.injective_accounts_rpc.SubaccountHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.SubaccountHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountHistoryResponse.displayName = 'proto.injective_accounts_rpc.SubaccountHistoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountBalanceTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountBalanceTransfer.displayName = 'proto.injective_accounts_rpc.SubaccountBalanceTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.CosmosCoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.CosmosCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.CosmosCoin.displayName = 'proto.injective_accounts_rpc.CosmosCoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.Paging = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.Paging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.Paging.displayName = 'proto.injective_accounts_rpc.Paging';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountOrderSummaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.displayName = 'proto.injective_accounts_rpc.SubaccountOrderSummaryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.SubaccountOrderSummaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.displayName = 'proto.injective_accounts_rpc.SubaccountOrderSummaryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.RewardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.RewardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.RewardsRequest.displayName = 'proto.injective_accounts_rpc.RewardsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.RewardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.RewardsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.RewardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.RewardsResponse.displayName = 'proto.injective_accounts_rpc.RewardsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_accounts_rpc.Reward.repeatedFields_, null);
};
goog.inherits(proto.injective_accounts_rpc.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.Reward.displayName = 'proto.injective_accounts_rpc.Reward';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_accounts_rpc.Coin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_accounts_rpc.Coin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_accounts_rpc.Coin.displayName = 'proto.injective_accounts_rpc.Coin';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.PortfolioRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.PortfolioRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.PortfolioRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.PortfolioRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddress: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.PortfolioRequest}
 */
proto.injective_accounts_rpc.PortfolioRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.PortfolioRequest;
  return proto.injective_accounts_rpc.PortfolioRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.PortfolioRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.PortfolioRequest}
 */
proto.injective_accounts_rpc.PortfolioRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.PortfolioRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.PortfolioRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.PortfolioRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.PortfolioRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_address = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.PortfolioRequest.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.PortfolioRequest} returns this
 */
proto.injective_accounts_rpc.PortfolioRequest.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.PortfolioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.PortfolioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.PortfolioResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.PortfolioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    portfolio: (f = msg.getPortfolio()) && proto.injective_accounts_rpc.AccountPortfolio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.PortfolioResponse}
 */
proto.injective_accounts_rpc.PortfolioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.PortfolioResponse;
  return proto.injective_accounts_rpc.PortfolioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.PortfolioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.PortfolioResponse}
 */
proto.injective_accounts_rpc.PortfolioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.AccountPortfolio;
      reader.readMessage(value,proto.injective_accounts_rpc.AccountPortfolio.deserializeBinaryFromReader);
      msg.setPortfolio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.PortfolioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.PortfolioResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.PortfolioResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.PortfolioResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortfolio();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_accounts_rpc.AccountPortfolio.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountPortfolio portfolio = 1;
 * @return {?proto.injective_accounts_rpc.AccountPortfolio}
 */
proto.injective_accounts_rpc.PortfolioResponse.prototype.getPortfolio = function() {
  return /** @type{?proto.injective_accounts_rpc.AccountPortfolio} */ (
    jspb.Message.getWrapperField(this, proto.injective_accounts_rpc.AccountPortfolio, 1));
};


/**
 * @param {?proto.injective_accounts_rpc.AccountPortfolio|undefined} value
 * @return {!proto.injective_accounts_rpc.PortfolioResponse} returns this
*/
proto.injective_accounts_rpc.PortfolioResponse.prototype.setPortfolio = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_accounts_rpc.PortfolioResponse} returns this
 */
proto.injective_accounts_rpc.PortfolioResponse.prototype.clearPortfolio = function() {
  return this.setPortfolio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_accounts_rpc.PortfolioResponse.prototype.hasPortfolio = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.AccountPortfolio.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.AccountPortfolio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.AccountPortfolio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.AccountPortfolio.toObject = function(includeInstance, msg) {
  var f, obj = {
    portfolioValue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    availableBalance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lockedBalance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unrealizedPnl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    subaccountsList: jspb.Message.toObjectList(msg.getSubaccountsList(),
    proto.injective_accounts_rpc.SubaccountPortfolio.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.AccountPortfolio}
 */
proto.injective_accounts_rpc.AccountPortfolio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.AccountPortfolio;
  return proto.injective_accounts_rpc.AccountPortfolio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.AccountPortfolio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.AccountPortfolio}
 */
proto.injective_accounts_rpc.AccountPortfolio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortfolioValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableBalance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockedBalance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnrealizedPnl(value);
      break;
    case 5:
      var value = new proto.injective_accounts_rpc.SubaccountPortfolio;
      reader.readMessage(value,proto.injective_accounts_rpc.SubaccountPortfolio.deserializeBinaryFromReader);
      msg.addSubaccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.AccountPortfolio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.AccountPortfolio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.AccountPortfolio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortfolioValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailableBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLockedBalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnrealizedPnl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSubaccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.injective_accounts_rpc.SubaccountPortfolio.serializeBinaryToWriter
    );
  }
};


/**
 * optional string portfolio_value = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.getPortfolioValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.AccountPortfolio} returns this
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.setPortfolioValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string available_balance = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.getAvailableBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.AccountPortfolio} returns this
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string locked_balance = 3;
 * @return {string}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.getLockedBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.AccountPortfolio} returns this
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.setLockedBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string unrealized_pnl = 4;
 * @return {string}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.getUnrealizedPnl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.AccountPortfolio} returns this
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.setUnrealizedPnl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated SubaccountPortfolio subaccounts = 5;
 * @return {!Array<!proto.injective_accounts_rpc.SubaccountPortfolio>}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.getSubaccountsList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.SubaccountPortfolio>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.SubaccountPortfolio, 5));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.SubaccountPortfolio>} value
 * @return {!proto.injective_accounts_rpc.AccountPortfolio} returns this
*/
proto.injective_accounts_rpc.AccountPortfolio.prototype.setSubaccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.injective_accounts_rpc.SubaccountPortfolio=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio}
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.addSubaccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.injective_accounts_rpc.SubaccountPortfolio, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.AccountPortfolio} returns this
 */
proto.injective_accounts_rpc.AccountPortfolio.prototype.clearSubaccountsList = function() {
  return this.setSubaccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountPortfolio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountPortfolio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountPortfolio.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    availableBalance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lockedBalance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unrealizedPnl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountPortfolio;
  return proto.injective_accounts_rpc.SubaccountPortfolio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountPortfolio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableBalance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockedBalance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnrealizedPnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountPortfolio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountPortfolio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountPortfolio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailableBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLockedBalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnrealizedPnl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio} returns this
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string available_balance = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.getAvailableBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio} returns this
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string locked_balance = 3;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.getLockedBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio} returns this
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.setLockedBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string unrealized_pnl = 4;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.getUnrealizedPnl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountPortfolio} returns this
 */
proto.injective_accounts_rpc.SubaccountPortfolio.prototype.setUnrealizedPnl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.OrderStatesRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.OrderStatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.OrderStatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.OrderStatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    spotOrderHashesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    derivativeOrderHashesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest}
 */
proto.injective_accounts_rpc.OrderStatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.OrderStatesRequest;
  return proto.injective_accounts_rpc.OrderStatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.OrderStatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest}
 */
proto.injective_accounts_rpc.OrderStatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSpotOrderHashes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDerivativeOrderHashes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.OrderStatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.OrderStatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.OrderStatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpotOrderHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDerivativeOrderHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string spot_order_hashes = 1;
 * @return {!Array<string>}
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.getSpotOrderHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest} returns this
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.setSpotOrderHashesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest} returns this
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.addSpotOrderHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest} returns this
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.clearSpotOrderHashesList = function() {
  return this.setSpotOrderHashesList([]);
};


/**
 * repeated string derivative_order_hashes = 2;
 * @return {!Array<string>}
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.getDerivativeOrderHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest} returns this
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.setDerivativeOrderHashesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest} returns this
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.addDerivativeOrderHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.OrderStatesRequest} returns this
 */
proto.injective_accounts_rpc.OrderStatesRequest.prototype.clearDerivativeOrderHashesList = function() {
  return this.setDerivativeOrderHashesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.OrderStatesResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.OrderStatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.OrderStatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.OrderStatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spotOrderStatesList: jspb.Message.toObjectList(msg.getSpotOrderStatesList(),
    proto.injective_accounts_rpc.OrderStateRecord.toObject, includeInstance),
    derivativeOrderStatesList: jspb.Message.toObjectList(msg.getDerivativeOrderStatesList(),
    proto.injective_accounts_rpc.OrderStateRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.OrderStatesResponse}
 */
proto.injective_accounts_rpc.OrderStatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.OrderStatesResponse;
  return proto.injective_accounts_rpc.OrderStatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.OrderStatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.OrderStatesResponse}
 */
proto.injective_accounts_rpc.OrderStatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.OrderStateRecord;
      reader.readMessage(value,proto.injective_accounts_rpc.OrderStateRecord.deserializeBinaryFromReader);
      msg.addSpotOrderStates(value);
      break;
    case 2:
      var value = new proto.injective_accounts_rpc.OrderStateRecord;
      reader.readMessage(value,proto.injective_accounts_rpc.OrderStateRecord.deserializeBinaryFromReader);
      msg.addDerivativeOrderStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.OrderStatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.OrderStatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.OrderStatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpotOrderStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_accounts_rpc.OrderStateRecord.serializeBinaryToWriter
    );
  }
  f = message.getDerivativeOrderStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective_accounts_rpc.OrderStateRecord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OrderStateRecord spot_order_states = 1;
 * @return {!Array<!proto.injective_accounts_rpc.OrderStateRecord>}
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.getSpotOrderStatesList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.OrderStateRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.OrderStateRecord, 1));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.OrderStateRecord>} value
 * @return {!proto.injective_accounts_rpc.OrderStatesResponse} returns this
*/
proto.injective_accounts_rpc.OrderStatesResponse.prototype.setSpotOrderStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_accounts_rpc.OrderStateRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.OrderStateRecord}
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.addSpotOrderStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_accounts_rpc.OrderStateRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.OrderStatesResponse} returns this
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.clearSpotOrderStatesList = function() {
  return this.setSpotOrderStatesList([]);
};


/**
 * repeated OrderStateRecord derivative_order_states = 2;
 * @return {!Array<!proto.injective_accounts_rpc.OrderStateRecord>}
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.getDerivativeOrderStatesList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.OrderStateRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.OrderStateRecord, 2));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.OrderStateRecord>} value
 * @return {!proto.injective_accounts_rpc.OrderStatesResponse} returns this
*/
proto.injective_accounts_rpc.OrderStatesResponse.prototype.setDerivativeOrderStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective_accounts_rpc.OrderStateRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.OrderStateRecord}
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.addDerivativeOrderStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective_accounts_rpc.OrderStateRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.OrderStatesResponse} returns this
 */
proto.injective_accounts_rpc.OrderStatesResponse.prototype.clearDerivativeOrderStatesList = function() {
  return this.setDerivativeOrderStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.OrderStateRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.OrderStateRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.OrderStateRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderSide: jspb.Message.getFieldWithDefault(msg, 5, ""),
    state: jspb.Message.getFieldWithDefault(msg, 6, ""),
    quantityFilled: jspb.Message.getFieldWithDefault(msg, 7, ""),
    quantityRemaining: jspb.Message.getFieldWithDefault(msg, 8, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.OrderStateRecord}
 */
proto.injective_accounts_rpc.OrderStateRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.OrderStateRecord;
  return proto.injective_accounts_rpc.OrderStateRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.OrderStateRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.OrderStateRecord}
 */
proto.injective_accounts_rpc.OrderStateRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderSide(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantityFilled(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantityRemaining(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setCreatedAt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.OrderStateRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.OrderStateRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.OrderStateRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderSide();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQuantityFilled();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getQuantityRemaining();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeSint64(
      9,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeSint64(
      10,
      f
    );
  }
};


/**
 * optional string order_hash = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getOrderHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subaccount_id = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string market_id = 3;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string order_type = 4;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getOrderType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string order_side = 5;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getOrderSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setOrderSide = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string state = 6;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string quantity_filled = 7;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getQuantityFilled = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setQuantityFilled = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string quantity_remaining = 8;
 * @return {string}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getQuantityRemaining = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setQuantityRemaining = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional sint64 created_at = 9;
 * @return {number}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional sint64 updated_at = 10;
 * @return {number}
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.OrderStateRecord} returns this
 */
proto.injective_accounts_rpc.OrderStateRecord.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountsListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountsListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountsListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountsListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddress: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountsListRequest}
 */
proto.injective_accounts_rpc.SubaccountsListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountsListRequest;
  return proto.injective_accounts_rpc.SubaccountsListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountsListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountsListRequest}
 */
proto.injective_accounts_rpc.SubaccountsListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountsListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountsListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountsListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountsListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_address = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountsListRequest.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountsListRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountsListRequest.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.SubaccountsListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountsListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountsListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountsListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountsListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountsListResponse}
 */
proto.injective_accounts_rpc.SubaccountsListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountsListResponse;
  return proto.injective_accounts_rpc.SubaccountsListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountsListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountsListResponse}
 */
proto.injective_accounts_rpc.SubaccountsListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSubaccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountsListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountsListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountsListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountsListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string subaccounts = 1;
 * @return {!Array<string>}
 */
proto.injective_accounts_rpc.SubaccountsListResponse.prototype.getSubaccountsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_accounts_rpc.SubaccountsListResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountsListResponse.prototype.setSubaccountsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.SubaccountsListResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountsListResponse.prototype.addSubaccounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.SubaccountsListResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountsListResponse.prototype.clearSubaccountsList = function() {
  return this.setSubaccountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountBalancesListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denomsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListRequest}
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountBalancesListRequest;
  return proto.injective_accounts_rpc.SubaccountBalancesListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListRequest}
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDenoms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountBalancesListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string denoms = 2;
 * @return {!Array<string>}
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.getDenomsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.setDenomsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.addDenoms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountBalancesListRequest.prototype.clearDenomsList = function() {
  return this.setDenomsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountBalancesListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountBalancesListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesList: jspb.Message.toObjectList(msg.getBalancesList(),
    proto.injective_accounts_rpc.SubaccountBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListResponse}
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountBalancesListResponse;
  return proto.injective_accounts_rpc.SubaccountBalancesListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountBalancesListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListResponse}
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.SubaccountBalance;
      reader.readMessage(value,proto.injective_accounts_rpc.SubaccountBalance.deserializeBinaryFromReader);
      msg.addBalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountBalancesListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountBalancesListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_accounts_rpc.SubaccountBalance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SubaccountBalance balances = 1;
 * @return {!Array<!proto.injective_accounts_rpc.SubaccountBalance>}
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.prototype.getBalancesList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.SubaccountBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.SubaccountBalance, 1));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.SubaccountBalance>} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListResponse} returns this
*/
proto.injective_accounts_rpc.SubaccountBalancesListResponse.prototype.setBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_accounts_rpc.SubaccountBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.SubaccountBalance}
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.prototype.addBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_accounts_rpc.SubaccountBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.SubaccountBalancesListResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountBalancesListResponse.prototype.clearBalancesList = function() {
  return this.setBalancesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deposit: (f = msg.getDeposit()) && proto.injective_accounts_rpc.SubaccountDeposit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountBalance}
 */
proto.injective_accounts_rpc.SubaccountBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountBalance;
  return proto.injective_accounts_rpc.SubaccountBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountBalance}
 */
proto.injective_accounts_rpc.SubaccountBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 4:
      var value = new proto.injective_accounts_rpc.SubaccountDeposit;
      reader.readMessage(value,proto.injective_accounts_rpc.SubaccountDeposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.injective_accounts_rpc.SubaccountDeposit.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalance} returns this
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_address = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalance} returns this
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string denom = 3;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalance} returns this
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SubaccountDeposit deposit = 4;
 * @return {?proto.injective_accounts_rpc.SubaccountDeposit}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.getDeposit = function() {
  return /** @type{?proto.injective_accounts_rpc.SubaccountDeposit} */ (
    jspb.Message.getWrapperField(this, proto.injective_accounts_rpc.SubaccountDeposit, 4));
};


/**
 * @param {?proto.injective_accounts_rpc.SubaccountDeposit|undefined} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalance} returns this
*/
proto.injective_accounts_rpc.SubaccountBalance.prototype.setDeposit = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_accounts_rpc.SubaccountBalance} returns this
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_accounts_rpc.SubaccountBalance.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountDeposit.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountDeposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountDeposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountDeposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalBalance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    availableBalance: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountDeposit}
 */
proto.injective_accounts_rpc.SubaccountDeposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountDeposit;
  return proto.injective_accounts_rpc.SubaccountDeposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountDeposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountDeposit}
 */
proto.injective_accounts_rpc.SubaccountDeposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalBalance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountDeposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountDeposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountDeposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountDeposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalBalance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailableBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string total_balance = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountDeposit.prototype.getTotalBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountDeposit} returns this
 */
proto.injective_accounts_rpc.SubaccountDeposit.prototype.setTotalBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string available_balance = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountDeposit.prototype.getAvailableBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountDeposit} returns this
 */
proto.injective_accounts_rpc.SubaccountDeposit.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest;
  return proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string denom = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointRequest.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: (f = msg.getBalance()) && proto.injective_accounts_rpc.SubaccountBalance.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse;
  return proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.SubaccountBalance;
      reader.readMessage(value,proto.injective_accounts_rpc.SubaccountBalance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_accounts_rpc.SubaccountBalance.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubaccountBalance balance = 1;
 * @return {?proto.injective_accounts_rpc.SubaccountBalance}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.prototype.getBalance = function() {
  return /** @type{?proto.injective_accounts_rpc.SubaccountBalance} */ (
    jspb.Message.getWrapperField(this, proto.injective_accounts_rpc.SubaccountBalance, 1));
};


/**
 * @param {?proto.injective_accounts_rpc.SubaccountBalance|undefined} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse} returns this
*/
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_accounts_rpc.SubaccountBalanceEndpointResponse.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denomsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.StreamSubaccountBalanceRequest;
  return proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDenoms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} returns this
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string denoms = 2;
 * @return {!Array<string>}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.getDenomsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} returns this
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.setDenomsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} returns this
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.addDenoms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceRequest} returns this
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceRequest.prototype.clearDenomsList = function() {
  return this.setDenomsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: (f = msg.getBalance()) && proto.injective_accounts_rpc.SubaccountBalance.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.StreamSubaccountBalanceResponse;
  return proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.SubaccountBalance;
      reader.readMessage(value,proto.injective_accounts_rpc.SubaccountBalance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_accounts_rpc.SubaccountBalance.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional SubaccountBalance balance = 1;
 * @return {?proto.injective_accounts_rpc.SubaccountBalance}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.getBalance = function() {
  return /** @type{?proto.injective_accounts_rpc.SubaccountBalance} */ (
    jspb.Message.getWrapperField(this, proto.injective_accounts_rpc.SubaccountBalance, 1));
};


/**
 * @param {?proto.injective_accounts_rpc.SubaccountBalance|undefined} value
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse} returns this
*/
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse} returns this
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 timestamp = 2;
 * @return {number}
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.StreamSubaccountBalanceResponse} returns this
 */
proto.injective_accounts_rpc.StreamSubaccountBalanceResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferTypesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    skip: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountHistoryRequest;
  return proto.injective_accounts_rpc.SubaccountHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTransferTypes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSkip(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getSkip();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeSint64(
      6,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string denom = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string transfer_types = 3;
 * @return {!Array<string>}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.getTransferTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.setTransferTypesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.addTransferTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.clearTransferTypesList = function() {
  return this.setTransferTypesList([]);
};


/**
 * optional uint64 skip = 4;
 * @return {number}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.setSkip = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 limit = 5;
 * @return {number}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional sint64 end_time = 6;
 * @return {number}
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryRequest.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.injective_accounts_rpc.SubaccountBalanceTransfer.toObject, includeInstance),
    paging: (f = msg.getPaging()) && proto.injective_accounts_rpc.Paging.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryResponse}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountHistoryResponse;
  return proto.injective_accounts_rpc.SubaccountHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryResponse}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.SubaccountBalanceTransfer;
      reader.readMessage(value,proto.injective_accounts_rpc.SubaccountBalanceTransfer.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    case 2:
      var value = new proto.injective_accounts_rpc.Paging;
      reader.readMessage(value,proto.injective_accounts_rpc.Paging.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_accounts_rpc.SubaccountBalanceTransfer.serializeBinaryToWriter
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.injective_accounts_rpc.Paging.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SubaccountBalanceTransfer transfers = 1;
 * @return {!Array<!proto.injective_accounts_rpc.SubaccountBalanceTransfer>}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.SubaccountBalanceTransfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.SubaccountBalanceTransfer, 1));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.SubaccountBalanceTransfer>} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryResponse} returns this
*/
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.setTransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceTransfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_accounts_rpc.SubaccountBalanceTransfer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.clearTransfersList = function() {
  return this.setTransfersList([]);
};


/**
 * optional Paging paging = 2;
 * @return {?proto.injective_accounts_rpc.Paging}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.getPaging = function() {
  return /** @type{?proto.injective_accounts_rpc.Paging} */ (
    jspb.Message.getWrapperField(this, proto.injective_accounts_rpc.Paging, 2));
};


/**
 * @param {?proto.injective_accounts_rpc.Paging|undefined} value
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryResponse} returns this
*/
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.setPaging = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_accounts_rpc.SubaccountHistoryResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.clearPaging = function() {
  return this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_accounts_rpc.SubaccountHistoryResponse.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountBalanceTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    transferType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcSubaccountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    srcAccountAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dstSubaccountId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dstAccountAddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: (f = msg.getAmount()) && proto.injective_accounts_rpc.CosmosCoin.toObject(includeInstance, f),
    executedAt: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountBalanceTransfer;
  return proto.injective_accounts_rpc.SubaccountBalanceTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcSubaccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcAccountAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstSubaccountId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstAccountAddress(value);
      break;
    case 6:
      var value = new proto.injective_accounts_rpc.CosmosCoin;
      reader.readMessage(value,proto.injective_accounts_rpc.CosmosCoin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setExecutedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountBalanceTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransferType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSrcAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDstSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDstAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.injective_accounts_rpc.CosmosCoin.serializeBinaryToWriter
    );
  }
  f = message.getExecutedAt();
  if (f !== 0) {
    writer.writeSint64(
      7,
      f
    );
  }
};


/**
 * optional string transfer_type = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getTransferType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setTransferType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string src_subaccount_id = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getSrcSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setSrcSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string src_account_address = 3;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getSrcAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setSrcAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dst_subaccount_id = 4;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getDstSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setDstSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dst_account_address = 5;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getDstAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setDstAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional CosmosCoin amount = 6;
 * @return {?proto.injective_accounts_rpc.CosmosCoin}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getAmount = function() {
  return /** @type{?proto.injective_accounts_rpc.CosmosCoin} */ (
    jspb.Message.getWrapperField(this, proto.injective_accounts_rpc.CosmosCoin, 6));
};


/**
 * @param {?proto.injective_accounts_rpc.CosmosCoin|undefined} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
*/
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional sint64 executed_at = 7;
 * @return {number}
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.getExecutedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.SubaccountBalanceTransfer} returns this
 */
proto.injective_accounts_rpc.SubaccountBalanceTransfer.prototype.setExecutedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.CosmosCoin.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.CosmosCoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.CosmosCoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.CosmosCoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.CosmosCoin}
 */
proto.injective_accounts_rpc.CosmosCoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.CosmosCoin;
  return proto.injective_accounts_rpc.CosmosCoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.CosmosCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.CosmosCoin}
 */
proto.injective_accounts_rpc.CosmosCoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.CosmosCoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.CosmosCoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.CosmosCoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.CosmosCoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.CosmosCoin.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.CosmosCoin} returns this
 */
proto.injective_accounts_rpc.CosmosCoin.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.CosmosCoin.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.CosmosCoin} returns this
 */
proto.injective_accounts_rpc.CosmosCoin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.Paging.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.Paging.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.Paging} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.Paging.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    from: jspb.Message.getFieldWithDefault(msg, 2, 0),
    to: jspb.Message.getFieldWithDefault(msg, 3, 0),
    countBySubaccount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.Paging}
 */
proto.injective_accounts_rpc.Paging.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.Paging;
  return proto.injective_accounts_rpc.Paging.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.Paging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.Paging}
 */
proto.injective_accounts_rpc.Paging.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setCountBySubaccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.Paging.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.Paging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.Paging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.Paging.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getCountBySubaccount();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
};


/**
 * optional sint64 total = 1;
 * @return {number}
 */
proto.injective_accounts_rpc.Paging.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.Paging} returns this
 */
proto.injective_accounts_rpc.Paging.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 from = 2;
 * @return {number}
 */
proto.injective_accounts_rpc.Paging.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.Paging} returns this
 */
proto.injective_accounts_rpc.Paging.prototype.setFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 to = 3;
 * @return {number}
 */
proto.injective_accounts_rpc.Paging.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.Paging} returns this
 */
proto.injective_accounts_rpc.Paging.prototype.setTo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint64 count_by_subaccount = 4;
 * @return {number}
 */
proto.injective_accounts_rpc.Paging.prototype.getCountBySubaccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.Paging} returns this
 */
proto.injective_accounts_rpc.Paging.prototype.setCountBySubaccount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderDirection: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountOrderSummaryRequest;
  return proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderDirection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string order_direction = 3;
 * @return {string}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.getOrderDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryRequest} returns this
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryRequest.prototype.setOrderDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spotOrdersTotal: jspb.Message.getFieldWithDefault(msg, 1, 0),
    derivativeOrdersTotal: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.SubaccountOrderSummaryResponse;
  return proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSpotOrdersTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setDerivativeOrdersTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpotOrdersTotal();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
  f = message.getDerivativeOrdersTotal();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
};


/**
 * optional sint64 spot_orders_total = 1;
 * @return {number}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.prototype.getSpotOrdersTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.prototype.setSpotOrdersTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint64 derivative_orders_total = 2;
 * @return {number}
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.prototype.getDerivativeOrdersTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.SubaccountOrderSummaryResponse} returns this
 */
proto.injective_accounts_rpc.SubaccountOrderSummaryResponse.prototype.setDerivativeOrdersTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.RewardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.RewardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.RewardsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.RewardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountAddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.RewardsRequest}
 */
proto.injective_accounts_rpc.RewardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.RewardsRequest;
  return proto.injective_accounts_rpc.RewardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.RewardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.RewardsRequest}
 */
proto.injective_accounts_rpc.RewardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.RewardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.RewardsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.RewardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.RewardsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeSint64(
      1,
      f
    );
  }
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional sint64 epoch = 1;
 * @return {number}
 */
proto.injective_accounts_rpc.RewardsRequest.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.RewardsRequest} returns this
 */
proto.injective_accounts_rpc.RewardsRequest.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string account_address = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.RewardsRequest.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.RewardsRequest} returns this
 */
proto.injective_accounts_rpc.RewardsRequest.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.RewardsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.RewardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.RewardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.RewardsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.RewardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.injective_accounts_rpc.Reward.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.RewardsResponse}
 */
proto.injective_accounts_rpc.RewardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.RewardsResponse;
  return proto.injective_accounts_rpc.RewardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.RewardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.RewardsResponse}
 */
proto.injective_accounts_rpc.RewardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_accounts_rpc.Reward;
      reader.readMessage(value,proto.injective_accounts_rpc.Reward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.RewardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.RewardsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.RewardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.RewardsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective_accounts_rpc.Reward.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Reward rewards = 1;
 * @return {!Array<!proto.injective_accounts_rpc.Reward>}
 */
proto.injective_accounts_rpc.RewardsResponse.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.Reward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.Reward, 1));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.Reward>} value
 * @return {!proto.injective_accounts_rpc.RewardsResponse} returns this
*/
proto.injective_accounts_rpc.RewardsResponse.prototype.setRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective_accounts_rpc.Reward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.Reward}
 */
proto.injective_accounts_rpc.RewardsResponse.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective_accounts_rpc.Reward, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.RewardsResponse} returns this
 */
proto.injective_accounts_rpc.RewardsResponse.prototype.clearRewardsList = function() {
  return this.setRewardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_accounts_rpc.Reward.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.injective_accounts_rpc.Coin.toObject, includeInstance),
    distributedAt: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.Reward}
 */
proto.injective_accounts_rpc.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.Reward;
  return proto.injective_accounts_rpc.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.Reward}
 */
proto.injective_accounts_rpc.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    case 2:
      var value = new proto.injective_accounts_rpc.Coin;
      reader.readMessage(value,proto.injective_accounts_rpc.Coin.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setDistributedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective_accounts_rpc.Coin.serializeBinaryToWriter
    );
  }
  f = message.getDistributedAt();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
};


/**
 * optional string account_address = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.Reward.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.Reward} returns this
 */
proto.injective_accounts_rpc.Reward.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Coin rewards = 2;
 * @return {!Array<!proto.injective_accounts_rpc.Coin>}
 */
proto.injective_accounts_rpc.Reward.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.injective_accounts_rpc.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_accounts_rpc.Coin, 2));
};


/**
 * @param {!Array<!proto.injective_accounts_rpc.Coin>} value
 * @return {!proto.injective_accounts_rpc.Reward} returns this
*/
proto.injective_accounts_rpc.Reward.prototype.setRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective_accounts_rpc.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_accounts_rpc.Coin}
 */
proto.injective_accounts_rpc.Reward.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective_accounts_rpc.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_accounts_rpc.Reward} returns this
 */
proto.injective_accounts_rpc.Reward.prototype.clearRewardsList = function() {
  return this.setRewardsList([]);
};


/**
 * optional sint64 distributed_at = 3;
 * @return {number}
 */
proto.injective_accounts_rpc.Reward.prototype.getDistributedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_accounts_rpc.Reward} returns this
 */
proto.injective_accounts_rpc.Reward.prototype.setDistributedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_accounts_rpc.Coin.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_accounts_rpc.Coin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_accounts_rpc.Coin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.Coin.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_accounts_rpc.Coin}
 */
proto.injective_accounts_rpc.Coin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_accounts_rpc.Coin;
  return proto.injective_accounts_rpc.Coin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_accounts_rpc.Coin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_accounts_rpc.Coin}
 */
proto.injective_accounts_rpc.Coin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_accounts_rpc.Coin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_accounts_rpc.Coin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_accounts_rpc.Coin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_accounts_rpc.Coin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective_accounts_rpc.Coin.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.Coin} returns this
 */
proto.injective_accounts_rpc.Coin.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.injective_accounts_rpc.Coin.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_accounts_rpc.Coin} returns this
 */
proto.injective_accounts_rpc.Coin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.injective_accounts_rpc);
