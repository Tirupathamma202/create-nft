import { MsgStoreCode as BaseMsgStoreCode } from '@injectivelabs/chain-api/cosmwasm/wasm/v1/tx_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgStoreCode {
    interface Params {
        sender: string;
        wasmBytes: Uint8Array | string;
    }
    type Proto = BaseMsgStoreCode;
    type Object = BaseMsgStoreCode.AsObject;
}
/**
 * @category Messages
 */
export default class MsgStoreCode extends MsgBase<MsgStoreCode.Params, MsgStoreCode.Proto, MsgStoreCode.Object> {
    static fromJSON(params: MsgStoreCode.Params): MsgStoreCode;
    toProto(): BaseMsgStoreCode;
    toData(): {
        sender: string;
        wasmByteCode: string | Uint8Array;
        instantiatePermission?: import("@injectivelabs/chain-api/cosmwasm/wasm/v1/types_pb").AccessConfig.AsObject | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            wasm_byte_code: string | Uint8Array;
            instantiate_permission?: import("@injectivelabs/chain-api/cosmwasm/wasm/v1/types_pb").AccessConfig.AsObject | undefined;
        };
    };
    toWeb3(): {
        sender: string;
        wasm_byte_code: string | Uint8Array;
        instantiate_permission?: import("@injectivelabs/chain-api/cosmwasm/wasm/v1/types_pb").AccessConfig.AsObject | undefined;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgStoreCode;
    };
}
//# sourceMappingURL=MsgStoreCode.d.ts.map