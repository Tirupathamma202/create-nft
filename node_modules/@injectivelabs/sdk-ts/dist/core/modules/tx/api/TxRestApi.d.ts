import { TxRaw } from '@injectivelabs/chain-api/cosmos/tx/v1beta1/tx_pb';
import { HttpClient } from '@injectivelabs/utils';
import { TxClientBroadcastOptions, TxConcreteApi } from '../types/tx';
import { TxResponse } from '../types/tx';
/**
 * It is recommended to use TxRestClient instead of TxRestApi
 */
export declare class TxRestApi implements TxConcreteApi {
    httpClient: HttpClient;
    constructor(endpoint: string, options?: {
        timeout?: number;
    });
    fetchTx(txHash: string, params?: any): Promise<TxResponse>;
    fetchTxPoll(txHash: string, timeout?: number): Promise<TxResponse>;
    simulate(txRaw: TxRaw): Promise<{
        result: {
            data: string;
            log: string;
            eventsList: {
                type: string;
                attributes: {
                    key: string;
                    value: string;
                }[];
            }[];
        };
        gasInfo: {
            gasWanted: number;
            gasUsed: number;
        };
    }>;
    broadcast(tx: TxRaw, options?: TxClientBroadcastOptions): Promise<TxResponse>;
    /**
     * Broadcast the transaction using the "block" mode, waiting for its inclusion in the blockchain.
     * @param tx transaction to broadcast
     */
    broadcastBlock(tx: TxRaw): Promise<{
        txHash: string;
        rawLog: string;
        gasWanted: number;
        gasUsed: number;
        height: number;
        logs: import("../types/tx-rest-client").RestTxLog[];
        code: number;
        codespace: string;
        data: string;
        info: string;
        timestamp: string;
    }>;
    private broadcastTx;
    private getRaw;
    private postRaw;
}
//# sourceMappingURL=TxRestApi.d.ts.map