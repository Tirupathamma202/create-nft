"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcAuthTransformer = void 0;
const pagination_1 = require("../../../utils/pagination");
const utils_1 = require("../../../utils");
const auth_1 = require("../types/auth");
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcAuthTransformer {
    static moduleParamsResponseToModuleParams(response) {
        const params = response.getParams();
        return {
            maxMemoCharacters: params.getMaxMemoCharacters(),
            txSigLimit: params.getTxSigLimit(),
            txSizeCostPerByte: params.getTxSizeCostPerByte(),
            sigVerifyCostEd25519: params.getSigVerifyCostEd25519(),
            sigVerifyCostSecp256k1: params.getSigVerifyCostSecp256k1(),
        };
    }
    static grpcAccountToAccount(ethAccount) {
        const account = auth_1.EthAccount.deserializeBinary(ethAccount.getValue());
        const baseAccount = account.getBaseAccount();
        const pubKey = baseAccount.getPubKey();
        return {
            codeHash: (0, utils_1.uint8ArrayToString)(account.getCodeHash()),
            baseAccount: {
                address: baseAccount.getAddress(),
                pubKey: pubKey
                    ? {
                        key: (0, utils_1.uint8ArrayToString)(pubKey.getValue()),
                        typeUrl: pubKey.getTypeUrl(),
                    }
                    : undefined,
                accountNumber: baseAccount.getAccountNumber(),
                sequence: baseAccount.getSequence(),
            },
        };
    }
    static accountResponseToAccount(response) {
        return ChainGrpcAuthTransformer.grpcAccountToAccount(response.getAccount());
    }
    static accountsResponseToAccounts(response) {
        return {
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
            accounts: response
                .getAccountsList()
                .map(ChainGrpcAuthTransformer.grpcAccountToAccount),
        };
    }
}
exports.ChainGrpcAuthTransformer = ChainGrpcAuthTransformer;
//# sourceMappingURL=ChainGrpcAuthTransformer.js.map