import { OrderMaskMap } from '@injectivelabs/chain-api/injective/exchange/v1beta1/exchange_pb';
import { MsgCancelDerivativeOrder as BaseMsgCancelDerivativeOrder } from '@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgCancelDerivativeOrder {
    interface Params {
        marketId: string;
        subaccountId: string;
        injectiveAddress: string;
        orderHash: string;
        orderMask?: OrderMaskMap[keyof OrderMaskMap];
    }
    type Proto = BaseMsgCancelDerivativeOrder;
    type Object = BaseMsgCancelDerivativeOrder.AsObject;
}
export default class MsgCancelDerivativeOrder extends MsgBase<MsgCancelDerivativeOrder.Params, MsgCancelDerivativeOrder.Proto, MsgCancelDerivativeOrder.Object> {
    static fromJSON(params: MsgCancelDerivativeOrder.Params): MsgCancelDerivativeOrder;
    toProto(): BaseMsgCancelDerivativeOrder;
    toData(): {
        sender: string;
        marketId: string;
        subaccountId: string;
        orderHash: string;
        orderMask: number;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            market_id: string;
            subaccount_id: string;
            order_hash: string;
            order_mask: number;
        };
    };
    toWeb3(): {
        sender: string;
        market_id: string;
        subaccount_id: string;
        order_hash: string;
        order_mask: number;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgCancelDerivativeOrder;
    };
}
//# sourceMappingURL=MsgCancelDerivativeOrder.d.ts.map