import { MsgArg } from '../types';
import { TxBody, SignDoc, SignerInfo, AuthInfo, Fee, TxRaw } from '@injectivelabs/chain-api/cosmos/tx/v1beta1/tx_pb';
import { SignModeMap } from '@injectivelabs/chain-api/cosmos/tx/signing/v1beta1/signing_pb';
import { SignDoc as CosmosSignDoc } from 'cosmjs-types/cosmos/tx/v1beta1/tx';
import { ExtensionOptionsWeb3Tx } from '@injectivelabs/chain-api/injective/types/v1beta1/tx_ext_pb';
import { EthereumChainId } from '@injectivelabs/ts-types';
export declare const getPublicKey: ({ chainId, key, }: {
    chainId: string;
    key: string;
}) => import("google-protobuf/google/protobuf/any_pb").Any;
export declare const createBody: ({ message, memo, timeoutHeight, }: {
    message: MsgArg | MsgArg[];
    memo?: string | undefined;
    timeoutHeight?: number | undefined;
}) => TxBody;
export declare const createFee: ({ fee, payer, gasLimit, }: {
    fee: {
        amount: string;
        denom: string;
    };
    payer?: string | undefined;
    gasLimit: number;
}) => Fee;
export declare const createSigners: ({ chainId, mode, signers, }: {
    chainId: string;
    signers: {
        pubKey: string;
        sequence: number;
    }[];
    mode: SignModeMap[keyof SignModeMap];
}) => SignerInfo[];
export declare const createSignerInfo: ({ chainId, publicKey, sequence, mode, }: {
    chainId: string;
    publicKey: string;
    sequence: number;
    mode: SignModeMap[keyof SignModeMap];
}) => SignerInfo;
export declare const createAuthInfo: ({ signerInfo, fee, }: {
    signerInfo: SignerInfo[];
    fee: Fee;
}) => AuthInfo;
export declare const createSigDoc: ({ bodyBytes, authInfoBytes, chainId, accountNumber, }: {
    bodyBytes: Uint8Array;
    authInfoBytes: Uint8Array;
    chainId: string;
    accountNumber: number;
}) => SignDoc;
export declare const createCosmosSignDocFromTransaction: (args: {
    txRaw: TxRaw;
    chainId: string;
    accountNumber: number;
}) => CosmosSignDoc;
export declare const createTxRawEIP712: (txRaw: TxRaw, extension: ExtensionOptionsWeb3Tx) => TxRaw;
export declare const createWeb3Extension: ({ ethereumChainId, feePayer, feePayerSig, }: {
    ethereumChainId: EthereumChainId;
    feePayer?: string | undefined;
    feePayerSig?: Uint8Array | undefined;
}) => ExtensionOptionsWeb3Tx;
export declare const getTransactionPartsFromTxRaw: (txRaw: TxRaw) => {
    authInfo: AuthInfo;
    body: TxBody;
    signatures: Uint8Array[];
};
//# sourceMappingURL=tx.d.ts.map