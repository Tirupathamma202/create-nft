import { QuerySmartContractStateResponse, QueryRawContractStateResponse } from '@injectivelabs/chain-api/cosmwasm/wasm/v1/query_pb';
import BaseConsumer from '../../BaseGrpcConsumer';
import { PaginationOption } from '../../../types/pagination';
/**
 * @category Chain Grpc API
 */
export declare class ChainGrpcWasmApi extends BaseConsumer {
    protected module: string;
    fetchContractAccountsBalance({ contractAddress, pagination, }: {
        contractAddress: string;
        pagination?: PaginationOption;
    }): Promise<import("../types").ContractAccountsBalanceWithPagination>;
    fetchContractInfo(contractAddress: string): Promise<import("../types").ContractInfo | undefined>;
    fetchContractHistory(contractAddress: string): Promise<{
        entriesList: import("../types").ContractCodeHistoryEntry[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchSmartContractState(contractAddress: string, query?: string): Promise<QuerySmartContractStateResponse.AsObject>;
    fetchRawContractState(contractAddress: string, query?: string): Promise<QueryRawContractStateResponse.AsObject>;
    fetchContractCodes(pagination?: PaginationOption): Promise<{
        codeInfosList: import("../types").CodeInfoResponse[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchContractCode(codeId: number): Promise<{
        codeInfo: import("../types").CodeInfoResponse;
        data: string | Uint8Array;
    }>;
    fetchContractCodeContracts(codeId: number, pagination?: PaginationOption): Promise<{
        contractsList: string[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
}
//# sourceMappingURL=ChainGrpcWasmApi.d.ts.map