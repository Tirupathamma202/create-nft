"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb");
const numbers_1 = require("../../../../utils/numbers");
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const createMessage = (params) => {
    const message = new tx_pb_1.MsgInstantBinaryOptionsMarketLaunch();
    message.setSender(params.proposer);
    message.setTicker(params.market.ticker);
    message.setOracleSymbol(params.market.oracleSymbol);
    message.setOracleProvider(params.market.oracleProvider);
    message.setOracleType(params.market.oracleType);
    message.setOracleScaleFactor(params.market.oracleScaleFactor);
    message.setMakerFeeRate(params.market.makerFeeRate);
    message.setTakerFeeRate(params.market.takerFeeRate);
    message.setExpirationTimestamp(params.market.expirationTimestamp);
    message.setSettlementTimestamp(params.market.settlementTimestamp);
    message.setAdmin(params.market.admin);
    message.setQuoteDenom(params.market.quoteDenom);
    message.setMinPriceTickSize(params.market.minPriceTickSize);
    message.setMinQuantityTickSize(params.market.minQuantityTickSize);
    return message;
};
/**
 * @category Messages
 */
class MsgInstantBinaryOptionsMarketLaunch extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgInstantBinaryOptionsMarketLaunch(params);
    }
    toProto() {
        const { params: initialParams } = this;
        const message = new tx_pb_1.MsgInstantBinaryOptionsMarketLaunch();
        const params = Object.assign(Object.assign({}, initialParams), { market: Object.assign(Object.assign({}, initialParams.market), { minPriceTickSize: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.market.minPriceTickSize).toFixed(), makerFeeRate: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.market.makerFeeRate).toFixed(), takerFeeRate: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.market.takerFeeRate).toFixed(), minQuantityTickSize: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.market.minQuantityTickSize).toFixed() }) });
        message.setSender(params.proposer);
        message.setTicker(params.market.ticker);
        message.setOracleSymbol(params.market.oracleSymbol);
        message.setOracleProvider(params.market.oracleProvider);
        message.setOracleType(params.market.oracleType);
        message.setOracleScaleFactor(params.market.oracleScaleFactor);
        message.setMakerFeeRate(params.market.makerFeeRate);
        message.setTakerFeeRate(params.market.takerFeeRate);
        message.setExpirationTimestamp(params.market.expirationTimestamp);
        message.setSettlementTimestamp(params.market.settlementTimestamp);
        message.setAdmin(params.market.admin);
        message.setQuoteDenom(params.market.quoteDenom);
        message.setMinPriceTickSize(params.market.minPriceTickSize);
        message.setMinQuantityTickSize(params.market.minQuantityTickSize);
        return createMessage(params);
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch' }, proto.toObject());
    }
    toAmino() {
        const { params } = this;
        const proto = createMessage(params);
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        return {
            type: 'exchange/MsgInstantBinaryOptionsMarketLaunch',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.exchange.v1beta1.MsgInstantBinaryOptionsMarketLaunch',
            message: proto,
        };
    }
}
exports.default = MsgInstantBinaryOptionsMarketLaunch;
//# sourceMappingURL=MsgInstantBinaryOptionsMarketLaunch.js.map