"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcAuctionTransformer = void 0;
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcAuctionTransformer {
    static moduleParamsResponseToModuleParams(response) {
        const params = response.getParams();
        return {
            auctionPeriod: (params === null || params === void 0 ? void 0 : params.getAuctionPeriod()) || 0,
            minNextBidIncrementRate: (params === null || params === void 0 ? void 0 : params.getMinNextBidIncrementRate()) || '0',
        };
    }
    static currentBasketResponseToCurrentBasket(response) {
        return {
            amountList: response
                .getAmountList()
                .map((coin) => ({ amount: coin.getAmount(), denom: coin.getDenom() })),
            auctionRound: response.getAuctionround(),
            auctionClosingTime: response.getAuctionclosingtime(),
            highestBidder: response.getHighestbidder(),
            highestBidAmount: response.getHighestbidamount(),
        };
    }
    static auctionModuleStateResponseToAuctionModuleState(response) {
        const state = response.getState();
        const bid = state.getHighestBid();
        const params = state.getParams();
        return {
            params: {
                auctionPeriod: params.getAuctionPeriod(),
                minNextBidIncrementRate: params.getMinNextBidIncrementRate(),
            },
            auctionRound: state.getAuctionRound(),
            highestBid: bid
                ? {
                    bidder: bid.getBidder(),
                    amount: bid.getAmount(),
                }
                : {
                    amount: '',
                    bidder: '',
                },
            auctionEndingTimestamp: state.getAuctionEndingTimestamp(),
        };
    }
}
exports.ChainGrpcAuctionTransformer = ChainGrpcAuctionTransformer;
//# sourceMappingURL=ChainGrpcAuctionTransformer.js.map