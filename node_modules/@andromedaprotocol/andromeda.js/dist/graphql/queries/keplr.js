"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryKeplrAllConfigs = exports.QUERY_KEPLR_ALL_CONFIGS = exports.queryKeplrConfig = exports.QUERY_KEPLR_CONFIG = exports.KEPLR_CONFIG_DATA = void 0;
const graphql_request_1 = require("graphql-request");
const client_1 = require("../client");
exports.KEPLR_CONFIG_DATA = (0, graphql_request_1.gql) `
  fragment KeplrConfigData on KeplrConfig {
    chainId
    bech32Config {
      bech32PrefixAccAddr
      bech32PrefixAccPub
      bech32PrefixConsAddr
      bech32PrefixConsPub
      bech32PrefixValAddr
      bech32PrefixValPub
    }
    stakeCurrency {
      coinDecimals
      coinDenom
      coinGeckoId
      coinMinimalDenom
    }
    bip44 {
      coinType
    }
    chainId
    chainName
    coinType
    currencies {
      coinDecimals
      coinDenom
      coinGeckoId
      coinMinimalDenom
    }
    feeCurrencies {
      coinDecimals
      coinDenom
      coinGeckoId
      coinMinimalDenom
    }
    gasPriceStep {
      average
      high
      low
    }
    rest
    rpc
  }
`;
exports.QUERY_KEPLR_CONFIG = (0, graphql_request_1.gql) `
  query QUERY_KEPLR_CONFIG($identifier: String!) {
    keplrConfigs {
      config(identifier: $identifier) {
        ...KeplrConfigData
      }
    }
  }
  ${exports.KEPLR_CONFIG_DATA}
`;
/**
 * Queries a stored Keplr chain config by identifier
 * @param identifier The chain ID for the config to query
 * @returns
 */
async function queryKeplrConfig(identifier) {
    const resp = await (0, client_1.query)(exports.QUERY_KEPLR_CONFIG, {
        identifier,
    });
    return resp.keplrConfigs.config;
}
exports.queryKeplrConfig = queryKeplrConfig;
exports.QUERY_KEPLR_ALL_CONFIGS = (0, graphql_request_1.gql) `
  query QUERY_KEPLR_ALL_CONFIGS {
    keplrConfigs {
      allConfigs {
        ...KeplrConfigData
      }
    }
  }
  ${exports.KEPLR_CONFIG_DATA}
`;
/**
 * Queries a stored Keplr chain config by identifier
 * @param identifier The chain ID for the config to query
 * @returns
 */
async function QueryKeplrAllConfigs() {
    const resp = await (0, client_1.query)(exports.QUERY_KEPLR_CONFIG, {});
    return resp.keplrConfigs.allConfigs;
}
exports.QueryKeplrAllConfigs = QueryKeplrAllConfigs;
