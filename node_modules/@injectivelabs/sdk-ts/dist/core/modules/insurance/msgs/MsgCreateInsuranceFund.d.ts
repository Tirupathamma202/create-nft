import { MsgCreateInsuranceFund as BaseMsgCreateInsuranceFund } from '@injectivelabs/chain-api/injective/insurance/v1beta1/tx_pb';
import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { OracleTypeMap } from '@injectivelabs/chain-api/injective/oracle/v1beta1/oracle_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgCreateInsuranceFund {
    interface Params {
        fund: {
            ticker: string;
            quoteDenom: string;
            oracleBase: string;
            oracleQuote: string;
            oracleType: OracleTypeMap[keyof OracleTypeMap];
            expiry?: number;
        };
        deposit: {
            amount: string;
            denom: string;
        };
        injectiveAddress: string;
    }
    type Proto = BaseMsgCreateInsuranceFund;
    type Object = BaseMsgCreateInsuranceFund.AsObject;
}
/**
 * @category Messages
 */
export default class MsgCreateInsuranceFund extends MsgBase<MsgCreateInsuranceFund.Params, MsgCreateInsuranceFund.Proto, MsgCreateInsuranceFund.Object> {
    static fromJSON(params: MsgCreateInsuranceFund.Params): MsgCreateInsuranceFund;
    toProto(): BaseMsgCreateInsuranceFund;
    toData(): {
        sender: string;
        ticker: string;
        quoteDenom: string;
        oracleBase: string;
        oracleQuote: string;
        oracleType: 0 | 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 10 | 9 | 11;
        expiry: number;
        initialDeposit?: Coin.AsObject | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            ticker: string;
            quote_denom: string;
            oracle_base: string;
            oracle_quote: string;
            oracle_type: 0 | 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 10 | 9 | 11;
            expiry: number;
            initial_deposit?: Coin.AsObject | undefined;
        };
    };
    toWeb3(): {
        sender: string;
        ticker: string;
        quote_denom: string;
        oracle_base: string;
        oracle_quote: string;
        oracle_type: 0 | 2 | 1 | 3 | 4 | 5 | 6 | 7 | 8 | 10 | 9 | 11;
        expiry: number;
        initial_deposit?: Coin.AsObject | undefined;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgCreateInsuranceFund;
    };
}
//# sourceMappingURL=MsgCreateInsuranceFund.d.ts.map