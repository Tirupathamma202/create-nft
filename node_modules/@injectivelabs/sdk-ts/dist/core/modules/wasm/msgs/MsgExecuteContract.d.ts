import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgExecuteContract as BaseMsgExecuteContract } from '@injectivelabs/chain-api/cosmwasm/wasm/v1/tx_pb';
import { ExecArgs } from '../exec-args';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgExecuteContract {
    interface Params {
        funds?: {
            denom: string;
            amount: string;
        } | {
            denom: string;
            amount: string;
        }[];
        sender: string;
        contractAddress: string;
        execArgs?: ExecArgs;
        exec?: {
            msg: object;
            action: string;
        };
        /**
         * Same as exec but you don't pass
         * the action as a separate property
         * but as a whole object
         */
        msg?: object;
    }
    type Proto = BaseMsgExecuteContract;
    type Object = BaseMsgExecuteContract.AsObject;
}
/**
 * @category Messages
 */
export default class MsgExecuteContract extends MsgBase<MsgExecuteContract.Params, MsgExecuteContract.Proto, MsgExecuteContract.Object> {
    static fromJSON(params: MsgExecuteContract.Params): MsgExecuteContract;
    toProto(): BaseMsgExecuteContract;
    toData(): {
        sender: string;
        contract: string;
        msg: string | Uint8Array;
        fundsList: Coin.AsObject[];
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            contract: string;
            msg: string | Uint8Array;
            funds_list: {
                denom: string;
                amount: string;
            }[];
        };
    };
    toWeb3(): {
        sender: string;
        contract: string;
        msg: string | Uint8Array;
        funds_list: {
            denom: string;
            amount: string;
        }[];
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgExecuteContract;
    };
    private getMsgObject;
}
//# sourceMappingURL=MsgExecuteContract.d.ts.map