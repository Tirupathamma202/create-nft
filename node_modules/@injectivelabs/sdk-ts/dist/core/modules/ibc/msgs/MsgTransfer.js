"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coin_pb_1 = require("@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb");
const tx_pb_1 = require("@injectivelabs/chain-api/ibc/applications/transfer/v1/tx_pb");
const client_pb_1 = require("@injectivelabs/chain-api/ibc/core/client/v1/client_pb");
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
/**
 * @category Messages
 */
class MsgTransfer extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgTransfer(params);
    }
    toProto() {
        const { params } = this;
        const token = new coin_pb_1.Coin();
        token.setDenom(params.amount.denom);
        token.setAmount(params.amount.amount);
        const message = new tx_pb_1.MsgTransfer();
        message.setReceiver(params.receiver);
        message.setSender(params.sender);
        message.setSourceChannel(params.channelId);
        message.setSourcePort(params.port);
        message.setToken(token);
        if (params.height) {
            const timeoutHeight = new client_pb_1.Height();
            timeoutHeight.setRevisionHeight(params.height.revisionHeight);
            timeoutHeight.setRevisionNumber(params.height.revisionNumber);
            message.setTimeoutHeight(timeoutHeight);
        }
        if (params.timeout) {
            message.setTimeoutTimestamp(params.timeout);
        }
        message.setMemo(params.memo || '');
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/ibc.applications.transfer.v1.MsgTransfer' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        return {
            type: 'cosmos-sdk/MsgTransfer',
            value: Object.assign(Object.assign({}, message), { memo: message.memo || '' }),
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/ibc.applications.transfer.v1.MsgTransfer' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/ibc.applications.transfer.v1.MsgTransfer',
            message: proto,
        };
    }
}
exports.default = MsgTransfer;
//# sourceMappingURL=MsgTransfer.js.map