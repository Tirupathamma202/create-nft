import { OrderMaskMap } from '@injectivelabs/chain-api/injective/exchange/v1beta1/exchange_pb';
import { MsgBatchCancelSpotOrders as BaseMsgBatchCancelSpotOrders, OrderData } from '@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgBatchCancelSpotOrders {
    interface Params {
        injectiveAddress: string;
        orders: {
            marketId: string;
            subaccountId: string;
            orderHash: string;
            orderMask?: OrderMaskMap[keyof OrderMaskMap];
        }[];
    }
    type Proto = BaseMsgBatchCancelSpotOrders;
    type Object = BaseMsgBatchCancelSpotOrders.AsObject;
}
/**
 * @category Messages
 */
export default class MsgBatchCancelSpotOrders extends MsgBase<MsgBatchCancelSpotOrders.Params, MsgBatchCancelSpotOrders.Proto, MsgBatchCancelSpotOrders.Object> {
    static fromJSON(params: MsgBatchCancelSpotOrders.Params): MsgBatchCancelSpotOrders;
    toProto(): BaseMsgBatchCancelSpotOrders;
    toData(): {
        sender: string;
        dataList: OrderData.AsObject[];
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            data_list: {
                market_id: string;
                subaccount_id: string;
                order_hash: string;
                order_mask: number;
            }[];
        };
    };
    toWeb3(): {
        sender: string;
        data_list: {
            market_id: string;
            subaccount_id: string;
            order_hash: string;
            order_mask: number;
        }[];
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgBatchCancelSpotOrders;
    };
}
//# sourceMappingURL=MsgBatchCancelSpotOrders.d.ts.map