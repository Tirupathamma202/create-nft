// source: injective_portfolio_rpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.injective_portfolio_rpc.AccountPortfolioRequest', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.AccountPortfolioResponse', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.Coin', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.DerivativePosition', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.Portfolio', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.PositionsWithUPNL', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.StreamAccountPortfolioRequest', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.StreamAccountPortfolioResponse', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.SubaccountBalanceV2', null, global);
goog.exportSymbol('proto.injective_portfolio_rpc.SubaccountDeposit', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.AccountPortfolioRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.AccountPortfolioRequest.displayName = 'proto.injective_portfolio_rpc.AccountPortfolioRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.AccountPortfolioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.AccountPortfolioResponse.displayName = 'proto.injective_portfolio_rpc.AccountPortfolioResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.Portfolio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective_portfolio_rpc.Portfolio.repeatedFields_, null);
};
goog.inherits(proto.injective_portfolio_rpc.Portfolio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.Portfolio.displayName = 'proto.injective_portfolio_rpc.Portfolio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.Coin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.Coin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.Coin.displayName = 'proto.injective_portfolio_rpc.Coin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.SubaccountBalanceV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.SubaccountBalanceV2.displayName = 'proto.injective_portfolio_rpc.SubaccountBalanceV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.SubaccountDeposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.SubaccountDeposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.SubaccountDeposit.displayName = 'proto.injective_portfolio_rpc.SubaccountDeposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.PositionsWithUPNL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.PositionsWithUPNL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.PositionsWithUPNL.displayName = 'proto.injective_portfolio_rpc.PositionsWithUPNL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.DerivativePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.DerivativePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.DerivativePosition.displayName = 'proto.injective_portfolio_rpc.DerivativePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.StreamAccountPortfolioRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.displayName = 'proto.injective_portfolio_rpc.StreamAccountPortfolioRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective_portfolio_rpc.StreamAccountPortfolioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.displayName = 'proto.injective_portfolio_rpc.StreamAccountPortfolioResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.AccountPortfolioRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.AccountPortfolioRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddress: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioRequest}
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.AccountPortfolioRequest;
  return proto.injective_portfolio_rpc.AccountPortfolioRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.AccountPortfolioRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioRequest}
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.AccountPortfolioRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.AccountPortfolioRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_address = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioRequest} returns this
 */
proto.injective_portfolio_rpc.AccountPortfolioRequest.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.AccountPortfolioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.AccountPortfolioResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    portfolio: (f = msg.getPortfolio()) && proto.injective_portfolio_rpc.Portfolio.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioResponse}
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.AccountPortfolioResponse;
  return proto.injective_portfolio_rpc.AccountPortfolioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.AccountPortfolioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioResponse}
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_portfolio_rpc.Portfolio;
      reader.readMessage(value,proto.injective_portfolio_rpc.Portfolio.deserializeBinaryFromReader);
      msg.setPortfolio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.AccountPortfolioResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.AccountPortfolioResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortfolio();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_portfolio_rpc.Portfolio.serializeBinaryToWriter
    );
  }
};


/**
 * optional Portfolio portfolio = 1;
 * @return {?proto.injective_portfolio_rpc.Portfolio}
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.prototype.getPortfolio = function() {
  return /** @type{?proto.injective_portfolio_rpc.Portfolio} */ (
    jspb.Message.getWrapperField(this, proto.injective_portfolio_rpc.Portfolio, 1));
};


/**
 * @param {?proto.injective_portfolio_rpc.Portfolio|undefined} value
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioResponse} returns this
*/
proto.injective_portfolio_rpc.AccountPortfolioResponse.prototype.setPortfolio = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_portfolio_rpc.AccountPortfolioResponse} returns this
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.prototype.clearPortfolio = function() {
  return this.setPortfolio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_portfolio_rpc.AccountPortfolioResponse.prototype.hasPortfolio = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective_portfolio_rpc.Portfolio.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.Portfolio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.Portfolio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.Portfolio.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bankBalancesList: jspb.Message.toObjectList(msg.getBankBalancesList(),
    proto.injective_portfolio_rpc.Coin.toObject, includeInstance),
    subaccountsList: jspb.Message.toObjectList(msg.getSubaccountsList(),
    proto.injective_portfolio_rpc.SubaccountBalanceV2.toObject, includeInstance),
    positionsWithUpnlList: jspb.Message.toObjectList(msg.getPositionsWithUpnlList(),
    proto.injective_portfolio_rpc.PositionsWithUPNL.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.Portfolio}
 */
proto.injective_portfolio_rpc.Portfolio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.Portfolio;
  return proto.injective_portfolio_rpc.Portfolio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.Portfolio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.Portfolio}
 */
proto.injective_portfolio_rpc.Portfolio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    case 2:
      var value = new proto.injective_portfolio_rpc.Coin;
      reader.readMessage(value,proto.injective_portfolio_rpc.Coin.deserializeBinaryFromReader);
      msg.addBankBalances(value);
      break;
    case 3:
      var value = new proto.injective_portfolio_rpc.SubaccountBalanceV2;
      reader.readMessage(value,proto.injective_portfolio_rpc.SubaccountBalanceV2.deserializeBinaryFromReader);
      msg.addSubaccounts(value);
      break;
    case 4:
      var value = new proto.injective_portfolio_rpc.PositionsWithUPNL;
      reader.readMessage(value,proto.injective_portfolio_rpc.PositionsWithUPNL.deserializeBinaryFromReader);
      msg.addPositionsWithUpnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.Portfolio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.Portfolio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.Portfolio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBankBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective_portfolio_rpc.Coin.serializeBinaryToWriter
    );
  }
  f = message.getSubaccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.injective_portfolio_rpc.SubaccountBalanceV2.serializeBinaryToWriter
    );
  }
  f = message.getPositionsWithUpnlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.injective_portfolio_rpc.PositionsWithUPNL.serializeBinaryToWriter
    );
  }
};


/**
 * optional string account_address = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
 */
proto.injective_portfolio_rpc.Portfolio.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Coin bank_balances = 2;
 * @return {!Array<!proto.injective_portfolio_rpc.Coin>}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.getBankBalancesList = function() {
  return /** @type{!Array<!proto.injective_portfolio_rpc.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_portfolio_rpc.Coin, 2));
};


/**
 * @param {!Array<!proto.injective_portfolio_rpc.Coin>} value
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
*/
proto.injective_portfolio_rpc.Portfolio.prototype.setBankBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective_portfolio_rpc.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_portfolio_rpc.Coin}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.addBankBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective_portfolio_rpc.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
 */
proto.injective_portfolio_rpc.Portfolio.prototype.clearBankBalancesList = function() {
  return this.setBankBalancesList([]);
};


/**
 * repeated SubaccountBalanceV2 subaccounts = 3;
 * @return {!Array<!proto.injective_portfolio_rpc.SubaccountBalanceV2>}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.getSubaccountsList = function() {
  return /** @type{!Array<!proto.injective_portfolio_rpc.SubaccountBalanceV2>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_portfolio_rpc.SubaccountBalanceV2, 3));
};


/**
 * @param {!Array<!proto.injective_portfolio_rpc.SubaccountBalanceV2>} value
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
*/
proto.injective_portfolio_rpc.Portfolio.prototype.setSubaccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.injective_portfolio_rpc.SubaccountBalanceV2=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.addSubaccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.injective_portfolio_rpc.SubaccountBalanceV2, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
 */
proto.injective_portfolio_rpc.Portfolio.prototype.clearSubaccountsList = function() {
  return this.setSubaccountsList([]);
};


/**
 * repeated PositionsWithUPNL positions_with_upnl = 4;
 * @return {!Array<!proto.injective_portfolio_rpc.PositionsWithUPNL>}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.getPositionsWithUpnlList = function() {
  return /** @type{!Array<!proto.injective_portfolio_rpc.PositionsWithUPNL>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective_portfolio_rpc.PositionsWithUPNL, 4));
};


/**
 * @param {!Array<!proto.injective_portfolio_rpc.PositionsWithUPNL>} value
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
*/
proto.injective_portfolio_rpc.Portfolio.prototype.setPositionsWithUpnlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.injective_portfolio_rpc.PositionsWithUPNL=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective_portfolio_rpc.PositionsWithUPNL}
 */
proto.injective_portfolio_rpc.Portfolio.prototype.addPositionsWithUpnl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.injective_portfolio_rpc.PositionsWithUPNL, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective_portfolio_rpc.Portfolio} returns this
 */
proto.injective_portfolio_rpc.Portfolio.prototype.clearPositionsWithUpnlList = function() {
  return this.setPositionsWithUpnlList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.Coin.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.Coin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.Coin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.Coin.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.Coin}
 */
proto.injective_portfolio_rpc.Coin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.Coin;
  return proto.injective_portfolio_rpc.Coin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.Coin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.Coin}
 */
proto.injective_portfolio_rpc.Coin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.Coin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.Coin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.Coin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.Coin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.Coin.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.Coin} returns this
 */
proto.injective_portfolio_rpc.Coin.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.Coin.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.Coin} returns this
 */
proto.injective_portfolio_rpc.Coin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.SubaccountBalanceV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.SubaccountBalanceV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deposit: (f = msg.getDeposit()) && proto.injective_portfolio_rpc.SubaccountDeposit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.SubaccountBalanceV2;
  return proto.injective_portfolio_rpc.SubaccountBalanceV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.SubaccountBalanceV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 3:
      var value = new proto.injective_portfolio_rpc.SubaccountDeposit;
      reader.readMessage(value,proto.injective_portfolio_rpc.SubaccountDeposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.SubaccountBalanceV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.SubaccountBalanceV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.injective_portfolio_rpc.SubaccountDeposit.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2} returns this
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string denom = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2} returns this
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SubaccountDeposit deposit = 3;
 * @return {?proto.injective_portfolio_rpc.SubaccountDeposit}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.getDeposit = function() {
  return /** @type{?proto.injective_portfolio_rpc.SubaccountDeposit} */ (
    jspb.Message.getWrapperField(this, proto.injective_portfolio_rpc.SubaccountDeposit, 3));
};


/**
 * @param {?proto.injective_portfolio_rpc.SubaccountDeposit|undefined} value
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2} returns this
*/
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.setDeposit = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_portfolio_rpc.SubaccountBalanceV2} returns this
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_portfolio_rpc.SubaccountBalanceV2.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.SubaccountDeposit.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.SubaccountDeposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.SubaccountDeposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.SubaccountDeposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalBalance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    availableBalance: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.SubaccountDeposit}
 */
proto.injective_portfolio_rpc.SubaccountDeposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.SubaccountDeposit;
  return proto.injective_portfolio_rpc.SubaccountDeposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.SubaccountDeposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.SubaccountDeposit}
 */
proto.injective_portfolio_rpc.SubaccountDeposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalBalance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.SubaccountDeposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.SubaccountDeposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.SubaccountDeposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.SubaccountDeposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalBalance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAvailableBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string total_balance = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.SubaccountDeposit.prototype.getTotalBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.SubaccountDeposit} returns this
 */
proto.injective_portfolio_rpc.SubaccountDeposit.prototype.setTotalBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string available_balance = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.SubaccountDeposit.prototype.getAvailableBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.SubaccountDeposit} returns this
 */
proto.injective_portfolio_rpc.SubaccountDeposit.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.PositionsWithUPNL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.PositionsWithUPNL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.injective_portfolio_rpc.DerivativePosition.toObject(includeInstance, f),
    unrealizedPnl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.PositionsWithUPNL}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.PositionsWithUPNL;
  return proto.injective_portfolio_rpc.PositionsWithUPNL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.PositionsWithUPNL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.PositionsWithUPNL}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective_portfolio_rpc.DerivativePosition;
      reader.readMessage(value,proto.injective_portfolio_rpc.DerivativePosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnrealizedPnl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.PositionsWithUPNL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.PositionsWithUPNL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective_portfolio_rpc.DerivativePosition.serializeBinaryToWriter
    );
  }
  f = message.getUnrealizedPnl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional DerivativePosition position = 1;
 * @return {?proto.injective_portfolio_rpc.DerivativePosition}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.getPosition = function() {
  return /** @type{?proto.injective_portfolio_rpc.DerivativePosition} */ (
    jspb.Message.getWrapperField(this, proto.injective_portfolio_rpc.DerivativePosition, 1));
};


/**
 * @param {?proto.injective_portfolio_rpc.DerivativePosition|undefined} value
 * @return {!proto.injective_portfolio_rpc.PositionsWithUPNL} returns this
*/
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective_portfolio_rpc.PositionsWithUPNL} returns this
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string unrealized_pnl = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.getUnrealizedPnl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.PositionsWithUPNL} returns this
 */
proto.injective_portfolio_rpc.PositionsWithUPNL.prototype.setUnrealizedPnl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.DerivativePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.DerivativePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.DerivativePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 4, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, ""),
    entryPrice: jspb.Message.getFieldWithDefault(msg, 6, ""),
    margin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    liquidationPrice: jspb.Message.getFieldWithDefault(msg, 8, ""),
    markPrice: jspb.Message.getFieldWithDefault(msg, 9, ""),
    aggregateReduceOnlyQuantity: jspb.Message.getFieldWithDefault(msg, 11, ""),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 12, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.DerivativePosition}
 */
proto.injective_portfolio_rpc.DerivativePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.DerivativePosition;
  return proto.injective_portfolio_rpc.DerivativePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.DerivativePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.DerivativePosition}
 */
proto.injective_portfolio_rpc.DerivativePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidationPrice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarkPrice(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregateReduceOnlyQuantity(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setUpdatedAt(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.DerivativePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.DerivativePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.DerivativePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEntryPrice();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLiquidationPrice();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMarkPrice();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAggregateReduceOnlyQuantity();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeSint64(
      12,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeSint64(
      13,
      f
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market_id = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string subaccount_id = 3;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string direction = 4;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string quantity = 5;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string entry_price = 6;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getEntryPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setEntryPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string margin = 7;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string liquidation_price = 8;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getLiquidationPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setLiquidationPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mark_price = 9;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getMarkPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setMarkPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string aggregate_reduce_only_quantity = 11;
 * @return {string}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getAggregateReduceOnlyQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setAggregateReduceOnlyQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional sint64 updated_at = 12;
 * @return {number}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional sint64 created_at = 13;
 * @return {number}
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective_portfolio_rpc.DerivativePosition} returns this
 */
proto.injective_portfolio_rpc.DerivativePosition.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.StreamAccountPortfolioRequest;
  return proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string account_address = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subaccount_id = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioRequest} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subaccountId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective_portfolio_rpc.StreamAccountPortfolioResponse;
  return proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string denom = 2;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subaccount_id = 4;
 * @return {string}
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective_portfolio_rpc.StreamAccountPortfolioResponse} returns this
 */
proto.injective_portfolio_rpc.StreamAccountPortfolioResponse.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.injective_portfolio_rpc);
