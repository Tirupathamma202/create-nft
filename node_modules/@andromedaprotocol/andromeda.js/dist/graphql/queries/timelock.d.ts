import { AndrSearchOptions, ContractAddressQuery, Expiry, PaginatedRequiredQuery, Recipient } from "./types";
import { Coin } from "@cosmjs/proto-signing";
export interface TimelockResponse<T> {
    timelock: T;
}
export interface EscrowExpiryCondition {
    expiration: Expiry;
}
export interface EscrowMinFundsCondition {
    minimumFunds: Coin[];
}
export type EscrowCondition = EscrowExpiryCondition | EscrowMinFundsCondition;
export interface Escrow {
    coins: Coin[];
    condition: EscrowCondition;
    recipient: Recipient;
}
export interface QueryTimelockLockedFunds extends ContractAddressQuery {
    owner: string;
    recipient: string;
}
export type QueryTimelockLockedFundsResponse = TimelockResponse<{
    getLockedFunds: Escrow;
}>;
export declare const QUERY_TIMELOCK_LOCKED_FUNDS: string;
/**
 * Queries a timelock contract for locked funds given an owner/recipient tuple
 * @param contractAddress
 * @param owner
 * @param recipient
 * @returns
 */
export declare function queryTimelockLockedFunds(contractAddress: string, owner: string, recipient: string): Promise<Escrow>;
export interface QueryTimelockRecipientLockedFunds extends ContractAddressQuery, PaginatedRequiredQuery {
    recipient: string;
}
export type QueryTimelockRecipientLockedFundsResponse = TimelockResponse<{
    getLockedFundsForRecipient: Escrow[];
}>;
export declare const QUERY_TIMELOCK_RECIPIENT_LOCKED_FUNDS: string;
/**
 * Queries a timelock contract for all locked funds for a given recipient
 * @param contractAddress
 * @param recipient
 * @param options
 * @returns
 */
export declare function queryRecipientLockedFunds(contractAddress: string, recipient: string, options: AndrSearchOptions): Promise<Escrow[]>;
