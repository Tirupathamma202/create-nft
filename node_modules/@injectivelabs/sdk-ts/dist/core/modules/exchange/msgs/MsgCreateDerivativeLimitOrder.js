"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb");
const exchange_pb_1 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/exchange_pb");
const MsgBase_1 = require("../../MsgBase");
const numbers_1 = require("../../../../utils/numbers");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const createLimitOrder = (params) => {
    const orderInfo = new exchange_pb_1.OrderInfo();
    orderInfo.setSubaccountId(params.subaccountId);
    orderInfo.setFeeRecipient(params.feeRecipient);
    orderInfo.setPrice(params.price);
    orderInfo.setQuantity(params.quantity);
    const derivativeOrder = new exchange_pb_1.DerivativeOrder();
    derivativeOrder.setMarketId(params.marketId);
    derivativeOrder.setOrderType(params.orderType);
    derivativeOrder.setOrderInfo(orderInfo);
    derivativeOrder.setMargin(params.margin);
    derivativeOrder.setTriggerPrice(params.triggerPrice || '0');
    const message = new tx_pb_1.MsgCreateDerivativeLimitOrder();
    message.setSender(params.injectiveAddress);
    message.setOrder(derivativeOrder);
    return message;
};
/**
 * @category Messages
 */
class MsgCreateDerivativeLimitOrder extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgCreateDerivativeLimitOrder(params);
    }
    toProto() {
        const { params: initialParams } = this;
        const params = Object.assign(Object.assign({}, initialParams), { price: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.price).toFixed(), margin: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.margin).toFixed(), triggerPrice: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.triggerPrice || 0).toFixed(), quantity: (0, numbers_1.amountToCosmosSdkDecAmount)(initialParams.quantity).toFixed() });
        return createLimitOrder(params);
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder' }, proto.toObject());
    }
    toAmino() {
        const { params } = this;
        const proto = createLimitOrder(params);
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        return {
            type: 'exchange/MsgCreateDerivativeLimitOrder',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.exchange.v1beta1.MsgCreateDerivativeLimitOrder',
            message: proto,
        };
    }
}
exports.default = MsgCreateDerivativeLimitOrder;
//# sourceMappingURL=MsgCreateDerivativeLimitOrder.js.map