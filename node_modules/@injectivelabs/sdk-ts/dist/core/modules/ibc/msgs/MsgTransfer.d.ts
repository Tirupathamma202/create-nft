import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgTransfer as BaseMsgTransfer } from '@injectivelabs/chain-api/ibc/applications/transfer/v1/tx_pb';
import { Height } from '@injectivelabs/chain-api/ibc/core/client/v1/client_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgTransfer {
    interface Params {
        amount: {
            denom: string;
            amount: string;
        };
        memo?: string;
        sender: string;
        port: string;
        receiver: string;
        channelId: string;
        timeout?: number;
        height?: {
            revisionHeight: number;
            revisionNumber: number;
        };
    }
    type Proto = BaseMsgTransfer;
    type Object = BaseMsgTransfer.AsObject;
}
/**
 * @category Messages
 */
export default class MsgTransfer extends MsgBase<MsgTransfer.Params, MsgTransfer.Proto, MsgTransfer.Object> {
    static fromJSON(params: MsgTransfer.Params): MsgTransfer;
    toProto(): BaseMsgTransfer;
    toData(): {
        sourcePort: string;
        sourceChannel: string;
        token?: Coin.AsObject | undefined;
        sender: string;
        receiver: string;
        timeoutHeight?: Height.AsObject | undefined;
        timeoutTimestamp: number;
        memo: string;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            source_port: string;
            source_channel: string;
            token?: {
                denom: string;
                amount: string;
            } | undefined;
            sender: string;
            receiver: string;
            timeout_height?: {
                revision_number: number;
                revision_height: number;
            } | undefined;
            timeout_timestamp: number;
            memo: string;
        };
    };
    toWeb3(): {
        source_port: string;
        source_channel: string;
        token?: {
            denom: string;
            amount: string;
        } | undefined;
        sender: string;
        receiver: string;
        timeout_height?: {
            revision_number: number;
            revision_height: number;
        } | undefined;
        timeout_timestamp: number;
        memo: string;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgTransfer;
    };
}
//# sourceMappingURL=MsgTransfer.d.ts.map