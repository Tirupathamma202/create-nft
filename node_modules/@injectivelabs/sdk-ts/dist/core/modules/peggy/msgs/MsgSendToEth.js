"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const msgs_pb_1 = require("@injectivelabs/chain-api/injective/peggy/v1/msgs_pb");
const coin_pb_1 = require("@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb");
const MsgBase_1 = require("../../MsgBase");
const utils_1 = require("@injectivelabs/utils");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
/**
 * @category Messages
 */
class MsgSendToEth extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgSendToEth(params);
    }
    toProto() {
        const { params } = this;
        const coinAmount = new coin_pb_1.Coin();
        coinAmount.setDenom(params.amount.denom);
        coinAmount.setAmount(params.amount.amount);
        const bridgeFee = new coin_pb_1.Coin();
        bridgeFee.setDenom(params.bridgeFee ? params.bridgeFee.denom : utils_1.DEFAULT_BRIDGE_FEE_DENOM);
        bridgeFee.setAmount(params.bridgeFee ? params.bridgeFee.amount : utils_1.DEFAULT_BRIDGE_FEE_AMOUNT);
        const message = new msgs_pb_1.MsgSendToEth();
        message.setAmount(coinAmount);
        message.setSender(params.injectiveAddress);
        message.setEthDest(params.address);
        message.setBridgeFee(bridgeFee);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/injective.peggy.v1.MsgSendToEth' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        return {
            type: 'peggy/MsgSendToEth',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/injective.peggy.v1.MsgSendToEth' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.peggy.v1.MsgSendToEth',
            message: proto,
        };
    }
}
exports.default = MsgSendToEth;
//# sourceMappingURL=MsgSendToEth.js.map