// package: event_provider_api
// file: event_provider_api.proto

import * as jspb from "google-protobuf";

export class GetLatestHeightRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLatestHeightRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetLatestHeightRequest): GetLatestHeightRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLatestHeightRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLatestHeightRequest;
  static deserializeBinaryFromReader(message: GetLatestHeightRequest, reader: jspb.BinaryReader): GetLatestHeightRequest;
}

export namespace GetLatestHeightRequest {
  export type AsObject = {
  }
}

export class GetLatestHeightResponse extends jspb.Message {
  getS(): string;
  setS(value: string): void;

  getErrmsg(): string;
  setErrmsg(value: string): void;

  hasData(): boolean;
  clearData(): void;
  getData(): LatestBlockHeight | undefined;
  setData(value?: LatestBlockHeight): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetLatestHeightResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetLatestHeightResponse): GetLatestHeightResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetLatestHeightResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetLatestHeightResponse;
  static deserializeBinaryFromReader(message: GetLatestHeightResponse, reader: jspb.BinaryReader): GetLatestHeightResponse;
}

export namespace GetLatestHeightResponse {
  export type AsObject = {
    s: string,
    errmsg: string,
    data?: LatestBlockHeight.AsObject,
  }
}

export class LatestBlockHeight extends jspb.Message {
  getHeight(): number;
  setHeight(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LatestBlockHeight.AsObject;
  static toObject(includeInstance: boolean, msg: LatestBlockHeight): LatestBlockHeight.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LatestBlockHeight, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LatestBlockHeight;
  static deserializeBinaryFromReader(message: LatestBlockHeight, reader: jspb.BinaryReader): LatestBlockHeight;
}

export namespace LatestBlockHeight {
  export type AsObject = {
    height: number,
  }
}

export class GetBlockEventsRPCRequest extends jspb.Message {
  getBackend(): string;
  setBackend(value: string): void;

  getHeight(): number;
  setHeight(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBlockEventsRPCRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetBlockEventsRPCRequest): GetBlockEventsRPCRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetBlockEventsRPCRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBlockEventsRPCRequest;
  static deserializeBinaryFromReader(message: GetBlockEventsRPCRequest, reader: jspb.BinaryReader): GetBlockEventsRPCRequest;
}

export namespace GetBlockEventsRPCRequest {
  export type AsObject = {
    backend: string,
    height: number,
  }
}

export class GetBlockEventsRPCResponse extends jspb.Message {
  getS(): string;
  setS(value: string): void;

  getErrmsg(): string;
  setErrmsg(value: string): void;

  hasData(): boolean;
  clearData(): void;
  getData(): BlockEventsRPC | undefined;
  setData(value?: BlockEventsRPC): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBlockEventsRPCResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetBlockEventsRPCResponse): GetBlockEventsRPCResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetBlockEventsRPCResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBlockEventsRPCResponse;
  static deserializeBinaryFromReader(message: GetBlockEventsRPCResponse, reader: jspb.BinaryReader): GetBlockEventsRPCResponse;
}

export namespace GetBlockEventsRPCResponse {
  export type AsObject = {
    s: string,
    errmsg: string,
    data?: BlockEventsRPC.AsObject,
  }
}

export class BlockEventsRPC extends jspb.Message {
  clearTypesList(): void;
  getTypesList(): Array<string>;
  setTypesList(value: Array<string>): void;
  addTypes(value: string, index?: number): string;

  clearEventsList(): void;
  getEventsList(): Array<Uint8Array | string>;
  getEventsList_asU8(): Array<Uint8Array>;
  getEventsList_asB64(): Array<string>;
  setEventsList(value: Array<Uint8Array | string>): void;
  addEvents(value: Uint8Array | string, index?: number): Uint8Array | string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BlockEventsRPC.AsObject;
  static toObject(includeInstance: boolean, msg: BlockEventsRPC): BlockEventsRPC.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BlockEventsRPC, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BlockEventsRPC;
  static deserializeBinaryFromReader(message: BlockEventsRPC, reader: jspb.BinaryReader): BlockEventsRPC;
}

export namespace BlockEventsRPC {
  export type AsObject = {
    typesList: Array<string>,
    eventsList: Array<Uint8Array | string>,
  }
}

export class GetCustomEventsRPCRequest extends jspb.Message {
  getBackend(): string;
  setBackend(value: string): void;

  getHeight(): number;
  setHeight(value: number): void;

  getEvents(): string;
  setEvents(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCustomEventsRPCRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetCustomEventsRPCRequest): GetCustomEventsRPCRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetCustomEventsRPCRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCustomEventsRPCRequest;
  static deserializeBinaryFromReader(message: GetCustomEventsRPCRequest, reader: jspb.BinaryReader): GetCustomEventsRPCRequest;
}

export namespace GetCustomEventsRPCRequest {
  export type AsObject = {
    backend: string,
    height: number,
    events: string,
  }
}

export class GetCustomEventsRPCResponse extends jspb.Message {
  getS(): string;
  setS(value: string): void;

  getErrmsg(): string;
  setErrmsg(value: string): void;

  hasData(): boolean;
  clearData(): void;
  getData(): BlockEventsRPC | undefined;
  setData(value?: BlockEventsRPC): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetCustomEventsRPCResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetCustomEventsRPCResponse): GetCustomEventsRPCResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetCustomEventsRPCResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetCustomEventsRPCResponse;
  static deserializeBinaryFromReader(message: GetCustomEventsRPCResponse, reader: jspb.BinaryReader): GetCustomEventsRPCResponse;
}

export namespace GetCustomEventsRPCResponse {
  export type AsObject = {
    s: string,
    errmsg: string,
    data?: BlockEventsRPC.AsObject,
  }
}

