import { Token, TokenInfo, TokenMeta, TokenFactory, TokenMetaUtils } from '@injectivelabs/token-metadata';
import { DenomTrace } from '@injectivelabs/chain-api/ibc/applications/transfer/v1/transfer_pb';
import { Network, UrlEndpoints } from '@injectivelabs/networks';
import { ChainGrpcIbcApi } from '../../../client/chain/grpc/ChainGrpcIbcApi';
/**
 * This client can be used to fetch token
 * denoms including API calls as well
 *
 * Special Case:
 * If IBC denom is not within the hardcoded
 * IBC hashes we should query the denom traces API
 * to find the token meta for the denom
 *
 * @category Utility Classes
 */
export declare class DenomClient {
    protected cachedDenomTraces: Record<string, DenomTrace.AsObject>;
    protected tokenFactory: TokenFactory;
    protected tokenMetaUtils: TokenMetaUtils;
    protected ibcApi: ChainGrpcIbcApi;
    constructor(network?: Network, options?: {
        endpoints?: UrlEndpoints;
    });
    getDenomTokenInfo(denom: string): Promise<TokenInfo | undefined>;
    getDenomToken(denom: string): Promise<Token | undefined>;
    getTokenMetaDataBySymbol(symbol: string): TokenMeta | undefined;
    getTokenMetaDataByAddress(address: string): TokenMeta | undefined;
    getTokenMetaDataByName(name: string): TokenMeta | undefined;
    getCoinGeckoId(denom: string): string;
    /**
     * Find token based on the hash and the base denom
     * from the denom trace of the particular hash
     */
    private getIbcDenomToken;
    private fetchAndCacheDenomTraces;
}
//# sourceMappingURL=DenomClient.d.ts.map