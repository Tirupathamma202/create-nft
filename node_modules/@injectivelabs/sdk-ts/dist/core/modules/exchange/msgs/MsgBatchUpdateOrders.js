"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const exchange_pb_1 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/exchange_pb");
const tx_pb_1 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb");
const numbers_1 = require("../../../../utils/numbers");
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
/**
 * @category Messages
 */
class MsgBatchUpdateOrders extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgBatchUpdateOrders(params);
    }
    toProto() {
        const { params } = this;
        const message = new tx_pb_1.MsgBatchUpdateOrders();
        message.setSender(params.injectiveAddress);
        if (params.spotMarketIdsToCancelAll &&
            params.spotMarketIdsToCancelAll.length > 0) {
            message.setSpotMarketIdsToCancelAllList(params.spotMarketIdsToCancelAll);
            message.setSubaccountId(params.subaccountId);
        }
        if (params.derivativeMarketIdsToCancelAll &&
            params.derivativeMarketIdsToCancelAll.length > 0) {
            message.setDerivativeMarketIdsToCancelAllList(params.derivativeMarketIdsToCancelAll);
            message.setSubaccountId(params.subaccountId);
        }
        if (params.binaryOptionsMarketIdsToCancelAll &&
            params.binaryOptionsMarketIdsToCancelAll.length > 0) {
            message.setBinaryOptionsMarketIdsToCancelAllList(params.binaryOptionsMarketIdsToCancelAll);
            message.setSubaccountId(params.subaccountId);
        }
        if (params.spotOrdersToCancel && params.spotOrdersToCancel.length > 0) {
            const orderDataList = params.spotOrdersToCancel.map(({ marketId, subaccountId, orderHash }) => {
                const orderData = new tx_pb_1.OrderData();
                orderData.setMarketId(marketId);
                orderData.setSubaccountId(subaccountId);
                orderData.setOrderHash(orderHash);
                return orderData;
            });
            message.setSpotOrdersToCancelList(orderDataList);
        }
        if (params.derivativeOrdersToCancel &&
            params.derivativeOrdersToCancel.length > 0) {
            const orderDataList = params.derivativeOrdersToCancel.map(({ marketId, subaccountId, orderHash }) => {
                const orderData = new tx_pb_1.OrderData();
                orderData.setMarketId(marketId);
                orderData.setSubaccountId(subaccountId);
                orderData.setOrderHash(orderHash);
                return orderData;
            });
            message.setDerivativeOrdersToCancelList(orderDataList);
        }
        if (params.binaryOptionsOrdersToCancel &&
            params.binaryOptionsOrdersToCancel.length > 0) {
            const orderDataList = params.binaryOptionsOrdersToCancel.map(({ marketId, subaccountId, orderHash }) => {
                const orderData = new tx_pb_1.OrderData();
                orderData.setMarketId(marketId);
                orderData.setSubaccountId(subaccountId);
                orderData.setOrderHash(orderHash);
                return orderData;
            });
            message.setDerivativeOrdersToCancelList(orderDataList);
        }
        if (params.spotOrdersToCreate && params.spotOrdersToCreate.length > 0) {
            const orderDataList = params.spotOrdersToCreate.map((args) => {
                const orderInfo = new exchange_pb_1.OrderInfo();
                const paramsFromArgs = Object.assign(Object.assign({}, args), { price: (0, numbers_1.amountToCosmosSdkDecAmount)(args.price).toFixed(), triggerPrice: (0, numbers_1.amountToCosmosSdkDecAmount)(args.triggerPrice || 0).toFixed(), quantity: (0, numbers_1.amountToCosmosSdkDecAmount)(args.quantity).toFixed() });
                orderInfo.setSubaccountId(params.subaccountId);
                orderInfo.setFeeRecipient(paramsFromArgs.feeRecipient);
                orderInfo.setPrice(paramsFromArgs.price);
                orderInfo.setQuantity(paramsFromArgs.quantity);
                const order = new exchange_pb_1.SpotOrder();
                order.setMarketId(paramsFromArgs.marketId);
                order.setOrderType(paramsFromArgs.orderType);
                order.setOrderInfo(orderInfo);
                if (paramsFromArgs.triggerPrice) {
                    order.setTriggerPrice(paramsFromArgs.triggerPrice);
                }
                return order;
            });
            message.setSpotOrdersToCreateList(orderDataList);
        }
        if (params.derivativeOrdersToCreate &&
            params.derivativeOrdersToCreate.length > 0) {
            const orderDataList = params.derivativeOrdersToCreate.map((args) => {
                const paramsFromArgs = Object.assign(Object.assign({}, args), { price: (0, numbers_1.amountToCosmosSdkDecAmount)(args.price).toFixed(), margin: (0, numbers_1.amountToCosmosSdkDecAmount)(args.margin).toFixed(), triggerPrice: (0, numbers_1.amountToCosmosSdkDecAmount)(args.triggerPrice || 0).toFixed(), quantity: (0, numbers_1.amountToCosmosSdkDecAmount)(args.quantity).toFixed() });
                const orderInfo = new exchange_pb_1.OrderInfo();
                orderInfo.setSubaccountId(params.subaccountId);
                orderInfo.setFeeRecipient(paramsFromArgs.feeRecipient);
                orderInfo.setPrice(paramsFromArgs.price);
                orderInfo.setQuantity(paramsFromArgs.quantity);
                const order = new exchange_pb_1.DerivativeOrder();
                order.setMarketId(paramsFromArgs.marketId);
                order.setOrderType(paramsFromArgs.orderType);
                order.setOrderInfo(orderInfo);
                order.setMargin(paramsFromArgs.margin);
                if (paramsFromArgs.triggerPrice) {
                    order.setTriggerPrice(paramsFromArgs.triggerPrice);
                }
                return order;
            });
            message.setDerivativeOrdersToCreateList(orderDataList);
        }
        if (params.binaryOptionsOrdersToCreate &&
            params.binaryOptionsOrdersToCreate.length > 0) {
            const orderDataList = params.binaryOptionsOrdersToCreate.map((args) => {
                const paramsFromArgs = Object.assign(Object.assign({}, args), { price: (0, numbers_1.amountToCosmosSdkDecAmount)(args.price).toFixed(), margin: (0, numbers_1.amountToCosmosSdkDecAmount)(args.margin).toFixed(), triggerPrice: (0, numbers_1.amountToCosmosSdkDecAmount)(args.triggerPrice || 0).toFixed(), quantity: (0, numbers_1.amountToCosmosSdkDecAmount)(args.quantity).toFixed() });
                const orderInfo = new exchange_pb_1.OrderInfo();
                orderInfo.setSubaccountId(params.subaccountId);
                orderInfo.setFeeRecipient(paramsFromArgs.feeRecipient);
                orderInfo.setPrice(paramsFromArgs.price);
                orderInfo.setQuantity(paramsFromArgs.quantity);
                const order = new exchange_pb_1.DerivativeOrder();
                order.setMarketId(paramsFromArgs.marketId);
                order.setOrderType(paramsFromArgs.orderType);
                order.setOrderInfo(orderInfo);
                order.setMargin(paramsFromArgs.margin);
                if (paramsFromArgs.triggerPrice) {
                    order.setTriggerPrice(paramsFromArgs.triggerPrice);
                }
                return order;
            });
            message.setDerivativeOrdersToCreateList(orderDataList);
        }
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgBatchUpdateOrders' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject()));
        /*
        const web3Message = proto.toObject() as any
    
        delete web3Message.spotMarketIdsToCancelAllList
        delete web3Message.derivativeMarketIdsToCancelAllList
        delete web3Message.spotOrdersToCancelList
        delete web3Message.derivativeOrdersToCancelList
        delete web3Message.spotOrdersToCreateList
        delete web3Message.derivativeOrdersToCreateList
        // delete web3Message.subaccountId
    
        /*
        if (web3Message.derivativeMarketIdsToCancelAllList !== undefined) {
          web3Message.derivative_market_ids_to_cancel_all =
            web3Message.derivativeMarketIdsToCancelAllList
    
          delete web3Message.derivativeMarketIdsToCancelAllList
        }
    
        if (web3Message.spotMarketIdsToCancelAllList !== undefined) {
          web3Message.spot_market_ids_to_cancel_all =
            web3Message.spotMarketIdsToCancelAllList
    
          delete web3Message.spotMarketIdsToCancelAllList
        }
    
        if (web3Message.spotOrdersToCancelList !== undefined) {
          web3Message.spot_orders_to_cancel = web3Message.spotOrdersToCancelList
    
          delete web3Message.spotOrdersToCancelList
        }
    
        if (web3Message.derivativeOrdersToCancelList !== undefined) {
          web3Message.derivative_orders_to_cancel =
            web3Message.derivativeOrdersToCancelList
    
          delete web3Message.derivativeOrdersToCancelList
        }
    
        if (web3Message.spotOrdersToCreateList !== undefined) {
          web3Message.spot_orders_to_create = web3Message.spotOrdersToCreateList
    
          delete web3Message.spotOrdersToCreateList
        }
    
        if (web3Message.derivativeOrdersToCreateList !== undefined) {
          web3Message.derivative_orders_to_create =
            web3Message.derivativeOrdersToCreateList
    
          delete web3Message.derivativeOrdersToCreateList
        }
    
        if (!web3Message.subaccountId) {
          delete web3Message.subaccountId
        }*/
        return {
            type: 'exchange/MsgBatchUpdateOrders',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/injective.exchange.v1beta1.MsgBatchUpdateOrders' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/injective.exchange.v1beta1.MsgBatchUpdateOrders',
            message: proto,
        };
    }
}
exports.default = MsgBatchUpdateOrders;
//# sourceMappingURL=MsgBatchUpdateOrders.js.map