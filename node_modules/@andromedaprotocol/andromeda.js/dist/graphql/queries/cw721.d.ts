import type { AndrSearchOptions, ContractAddressQuery, Expiry, PaginatedQuery } from "./types";
import { Coin } from "@cosmjs/proto-signing";
export interface CW721Response<T> {
    cw721: T;
}
export interface NFTApproval {
    expires: Expiry;
    spender: string;
}
export interface NFTOwnerInfo {
    approvals: NFTApproval[];
    owner: string;
}
export interface NFTAttribute {
    trait_type: string;
    value: string;
    display_type?: string;
}
export interface NFTExtension {
    name: string;
    publisher: string;
    description?: string;
    attributes: NFTAttribute[];
    image: string;
    image_data?: string;
    external_url?: string;
    animation_url?: string;
    youtube_url?: string;
}
export interface NFTInfo {
    extension: NFTExtension;
    tokenUri: string;
}
export interface NFTContractInfo {
    name: string;
    symbol: string;
}
export interface Agreement {
    amount: {
        raw: Coin;
    };
    purchaser: string;
}
export interface TransferAgreement {
    tokenId: string;
    agreement: Agreement;
}
export declare const TOKEN_EXTENSION_FRAGMENT: string;
export interface QueryCW721AllNFTInfo extends ContractAddressQuery {
    includeExpired: boolean;
    tokenId: string;
}
export type QueryCW721AllNFTInfoResponse = CW721Response<{
    allNftInfo: {
        access: NFTOwnerInfo;
        info: NFTInfo;
    };
}>;
export declare const QUERY_CW721_ALL_NFT_INFO: string;
/**
 * Queries a CW721 contract for all info for a given token ID
 * @param contractAddress
 * @param tokenId
 * @param includeExpired
 * @returns
 */
export declare function queryAllNFTInfo(contractAddress: string, tokenId: string, includeExpired?: boolean): Promise<QueryCW721AllNFTInfoResponse["cw721"]["allNftInfo"]>;
export interface QueryCW721AllOperators extends ContractAddressQuery, PaginatedQuery {
    includeExpired: boolean;
    owner: string;
}
export type QueryCW721AllOperatorsResponse = CW721Response<{
    allOperators: NFTApproval[];
}>;
export declare const QUERY_CW721_ALL_OPERATORS: string;
/**
 * Queries a CW721 contract for all approved operators for a given token owner
 * @param contractAddress
 * @param owner
 * @param includeExpired
 * @param options
 * @returns
 */
export declare function queryAllOperators(contractAddress: string, owner: string, includeExpired?: boolean, options?: AndrSearchOptions): Promise<QueryCW721AllOperatorsResponse["cw721"]["allOperators"]>;
export interface QueryCW721AllTokens extends ContractAddressQuery, PaginatedQuery {
}
export type QueryCW721AllTokensResponse = CW721Response<{
    allTokens: string[];
}>;
export declare const QUERY_CW721_ALL_TOKENS: string;
/**
 * Queries a CW721 contract for all tokens
 * @param contractAddress
 * @param options
 * @returns
 */
export declare function queryAllTokens(contractAddress: string, options?: AndrSearchOptions): Promise<string[]>;
export interface QueryCW721Approval extends ContractAddressQuery {
    includeExpired: boolean;
    spender: string;
    tokenId: string;
}
export type QueryCW721ApprovalResponse = CW721Response<{
    approval: NFTApproval;
}>;
export declare const QUERY_CW721_APPROVAL: string;
/**
 * Queries a CW721 contract for whether a given address is an assigned operator for a given token
 * @param contractAddress
 * @param spender
 * @param tokenId
 * @param includeExpired
 * @returns
 */
export declare function queryApproval(contractAddress: string, spender: string, tokenId: string, includeExpired?: boolean): Promise<NFTApproval>;
export interface QueryCW721Approvals extends ContractAddressQuery {
    includeExpired: boolean;
    tokenId: string;
}
export type QueryCW721ApprovalsResponse = CW721Response<{
    approvals: NFTApproval[];
}>;
export declare const QUERY_CW721_APPROVALS: string;
/**
 * Queries a CW721 contract for all approvals for a given token ID
 * @param contractAddress
 * @param tokenId
 * @param includeExpired
 * @returns
 */
export declare function queryApprovals(contractAddress: string, tokenId: string, includeExpired?: boolean): Promise<QueryCW721ApprovalsResponse["cw721"]["approvals"]>;
export interface QueryCW721ContractInfo extends ContractAddressQuery {
}
export type QueryCW721ContractInfoResponse = CW721Response<{
    contractInfo: NFTContractInfo;
    minter: string;
    numTokens: number;
}>;
export declare const QUERY_CW721_CONTRACT_INFO: string;
/**
 * Queries a CW721 contract for its contract info
 * @param contractAddress
 * @returns
 */
export declare function queryContractInfo(contractAddress: string): Promise<QueryCW721ContractInfoResponse["cw721"]["contractInfo"]>;
export interface QueryCW721IsArchived extends ContractAddressQuery {
    tokenId: string;
}
export type QueryCW721IsArchivedResponse = CW721Response<{
    isArchived: boolean;
}>;
export declare const QUERY_CW721_IS_ARCHIVED: string;
/**
 * Queries a CW721 contract whether a given token ID is archived
 * @param contractAddress
 * @param tokenId
 * @returns
 */
export declare function queryIsArchived(contractAddress: string, tokenId: string): Promise<boolean>;
export interface QueryCW721NFTInfo extends ContractAddressQuery {
    tokenId: string;
}
export type QueryCW721NftInfoResponse = CW721Response<{
    nftInfo: NFTInfo;
}>;
export declare const QUERY_CW721_NFT_INFO: string;
/**
 * Queries a CW721 contract for a given token IDs NFT info
 * @param contractAddress
 * @param tokenId
 * @returns
 */
export declare function queryNFTInfo(contractAddress: string, tokenId: string): Promise<QueryCW721NftInfoResponse["cw721"]["nftInfo"]>;
export interface QueryCW721OwnerOf extends ContractAddressQuery {
    tokenId: string;
}
export type QueryCW721OwnerOfResponse = CW721Response<{
    ownerOf: {
        owner: string;
    };
}>;
export declare const QUERY_CW721_OWNER_OF: string;
/**
 * Queries a CW721 contract for the owner of a given token ID
 * @param contractAddress
 * @param tokenId
 * @returns
 */
export declare function queryOwnerOf(contractAddress: string, tokenId: string): Promise<string>;
export interface QueryCW721Tokens extends ContractAddressQuery, PaginatedQuery {
    owner: string;
}
export type QueryCW721TokensResponse = CW721Response<{
    tokens: string[];
}>;
export declare const QUERY_CW721_TOKENS: string;
/**
 * Queries a CW721 contract for all tokens owned by a given address
 * @param contractAddress
 * @param owner
 * @param options
 * @returns
 */
export declare function queryTokens(contractAddress: string, owner: string, options?: AndrSearchOptions): Promise<QueryCW721TokensResponse["cw721"]["tokens"]>;
export interface QueryCW721TransferAgreement extends ContractAddressQuery {
    tokenId: string;
}
export type QueryCW721TransferAgreementResponse = CW721Response<{
    transferAgreement: TransferAgreement;
}>;
export declare const QUERY_CW721_TRANSFER_AGREEMENT: string;
/**
 * Queries a CW721 contract for the transfer agreement for a given token ID
 * @param contractAddress
 * @param tokenId
 * @returns
 */
export declare function queryTransferAgreement(contractAddress: string, tokenId: string): Promise<TransferAgreement>;
