"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcOracleStream = void 0;
const injective_oracle_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_oracle_rpc_pb");
const injective_oracle_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_oracle_rpc_pb_service");
const IndexerOracleStreamTransformer_1 = require("../transformers/IndexerOracleStreamTransformer");
const grpc_1 = require("../../../utils/grpc");
/**
 * @category Indexer Grpc Stream
 */
class IndexerGrpcOracleStream {
    constructor(endpoint) {
        this.client = new injective_oracle_rpc_pb_service_1.InjectiveOracleRPCClient(endpoint, {
            transport: (0, grpc_1.getGrpcTransport)(),
        });
    }
    streamOraclePrices({ oracleType, baseSymbol, quoteSymbol, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_oracle_rpc_pb_1.StreamPricesRequest();
        if (baseSymbol) {
            request.setBaseSymbol(baseSymbol);
        }
        if (quoteSymbol) {
            request.setQuoteSymbol(quoteSymbol);
        }
        request.setOracleType(oracleType);
        const stream = this.client.streamPrices(request);
        stream.on('data', (response) => {
            callback(IndexerOracleStreamTransformer_1.IndexerOracleStreamTransformer.pricesStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamOraclePricesByMarkets({ marketIds, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_oracle_rpc_pb_1.StreamPricesByMarketsRequest();
        if (marketIds) {
            request.setMarketIdsList(marketIds);
        }
        const stream = this.client.streamPricesByMarkets(request);
        stream.on('data', (response) => {
            callback(IndexerOracleStreamTransformer_1.IndexerOracleStreamTransformer.pricesByMarketsCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
}
exports.IndexerGrpcOracleStream = IndexerGrpcOracleStream;
//# sourceMappingURL=IndexerGrpcOracleStream.js.map