import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgSend as BaseMsgSend } from '@injectivelabs/chain-api/cosmos/bank/v1beta1/tx_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgSend {
    interface Params {
        amount: {
            denom: string;
            amount: string;
        };
        srcInjectiveAddress: string;
        dstInjectiveAddress: string;
    }
    type Proto = BaseMsgSend;
    type Object = BaseMsgSend.AsObject;
}
/**
 * @category Messages
 */
export default class MsgSend extends MsgBase<MsgSend.Params, MsgSend.Proto, MsgSend.Object> {
    static fromJSON(params: MsgSend.Params): MsgSend;
    toProto(): BaseMsgSend;
    toData(): {
        fromAddress: string;
        toAddress: string;
        amountList: Coin.AsObject[];
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            amount: {
                denom: string;
                amount: string;
            }[];
            from_address: string;
            to_address: string;
            amount_list: Coin.AsObject[];
        };
    };
    toWeb3(): {
        amount: {
            denom: string;
            amount: string;
        }[];
        from_address: string;
        to_address: string;
        amount_list: Coin.AsObject[];
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgSend;
    };
}
//# sourceMappingURL=MsgSend.d.ts.map