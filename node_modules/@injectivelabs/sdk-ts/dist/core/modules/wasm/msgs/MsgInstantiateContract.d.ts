import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgInstantiateContract as BaseMsgInstantiateContract } from '@injectivelabs/chain-api/cosmwasm/wasm/v1/tx_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgInstantiateContract {
    interface Params {
        sender: string;
        admin: string;
        codeId: number;
        label: string;
        msg: Object;
        amount?: {
            denom: string;
            amount: string;
        };
    }
    type Proto = BaseMsgInstantiateContract;
    type Object = BaseMsgInstantiateContract.AsObject;
}
/**
 * @category Messages
 */
export default class MsgInstantiateContract extends MsgBase<MsgInstantiateContract.Params, MsgInstantiateContract.Proto, MsgInstantiateContract.Object> {
    static fromJSON(params: MsgInstantiateContract.Params): MsgInstantiateContract;
    toProto(): BaseMsgInstantiateContract;
    toData(): {
        sender: string;
        admin: string;
        codeId: number;
        label: string;
        msg: string | Uint8Array;
        fundsList: Coin.AsObject[];
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            admin: string;
            code_id: number;
            label: string;
            msg: string | Uint8Array;
            funds_list: Coin.AsObject[];
        };
    };
    toWeb3(): {
        sender: string;
        admin: string;
        code_id: number;
        label: string;
        msg: string | Uint8Array;
        funds_list: Coin.AsObject[];
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgInstantiateContract;
    };
}
//# sourceMappingURL=MsgInstantiateContract.d.ts.map