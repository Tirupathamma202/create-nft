import { MsgSendToEth as BaseMsgSendToEth } from '@injectivelabs/chain-api/injective/peggy/v1/msgs_pb';
import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgSendToEth {
    interface Params {
        amount: {
            denom: string;
            amount: string;
        };
        bridgeFee?: {
            denom: string;
            amount: string;
        };
        address: string;
        injectiveAddress: string;
    }
    type Proto = BaseMsgSendToEth;
    type Object = BaseMsgSendToEth.AsObject;
}
/**
 * @category Messages
 */
export default class MsgSendToEth extends MsgBase<MsgSendToEth.Params, MsgSendToEth.Proto, MsgSendToEth.Object> {
    static fromJSON(params: MsgSendToEth.Params): MsgSendToEth;
    toProto(): BaseMsgSendToEth;
    toData(): {
        sender: string;
        ethDest: string;
        amount?: Coin.AsObject | undefined;
        bridgeFee?: Coin.AsObject | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            eth_dest: string;
            amount?: Coin.AsObject | undefined;
            bridge_fee?: Coin.AsObject | undefined;
        };
    };
    toWeb3(): {
        sender: string;
        eth_dest: string;
        amount?: Coin.AsObject | undefined;
        bridge_fee?: Coin.AsObject | undefined;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgSendToEth;
    };
}
//# sourceMappingURL=MsgSendToEth.d.ts.map