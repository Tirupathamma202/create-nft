// package: injective_portfolio_rpc
// file: injective_portfolio_rpc.proto

import * as jspb from "google-protobuf";

export class AccountPortfolioRequest extends jspb.Message {
  getAccountAddress(): string;
  setAccountAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccountPortfolioRequest.AsObject;
  static toObject(includeInstance: boolean, msg: AccountPortfolioRequest): AccountPortfolioRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccountPortfolioRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccountPortfolioRequest;
  static deserializeBinaryFromReader(message: AccountPortfolioRequest, reader: jspb.BinaryReader): AccountPortfolioRequest;
}

export namespace AccountPortfolioRequest {
  export type AsObject = {
    accountAddress: string,
  }
}

export class AccountPortfolioResponse extends jspb.Message {
  hasPortfolio(): boolean;
  clearPortfolio(): void;
  getPortfolio(): Portfolio | undefined;
  setPortfolio(value?: Portfolio): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccountPortfolioResponse.AsObject;
  static toObject(includeInstance: boolean, msg: AccountPortfolioResponse): AccountPortfolioResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccountPortfolioResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccountPortfolioResponse;
  static deserializeBinaryFromReader(message: AccountPortfolioResponse, reader: jspb.BinaryReader): AccountPortfolioResponse;
}

export namespace AccountPortfolioResponse {
  export type AsObject = {
    portfolio?: Portfolio.AsObject,
  }
}

export class Portfolio extends jspb.Message {
  getAccountAddress(): string;
  setAccountAddress(value: string): void;

  clearBankBalancesList(): void;
  getBankBalancesList(): Array<Coin>;
  setBankBalancesList(value: Array<Coin>): void;
  addBankBalances(value?: Coin, index?: number): Coin;

  clearSubaccountsList(): void;
  getSubaccountsList(): Array<SubaccountBalanceV2>;
  setSubaccountsList(value: Array<SubaccountBalanceV2>): void;
  addSubaccounts(value?: SubaccountBalanceV2, index?: number): SubaccountBalanceV2;

  clearPositionsWithUpnlList(): void;
  getPositionsWithUpnlList(): Array<PositionsWithUPNL>;
  setPositionsWithUpnlList(value: Array<PositionsWithUPNL>): void;
  addPositionsWithUpnl(value?: PositionsWithUPNL, index?: number): PositionsWithUPNL;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Portfolio.AsObject;
  static toObject(includeInstance: boolean, msg: Portfolio): Portfolio.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Portfolio, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Portfolio;
  static deserializeBinaryFromReader(message: Portfolio, reader: jspb.BinaryReader): Portfolio;
}

export namespace Portfolio {
  export type AsObject = {
    accountAddress: string,
    bankBalancesList: Array<Coin.AsObject>,
    subaccountsList: Array<SubaccountBalanceV2.AsObject>,
    positionsWithUpnlList: Array<PositionsWithUPNL.AsObject>,
  }
}

export class Coin extends jspb.Message {
  getDenom(): string;
  setDenom(value: string): void;

  getAmount(): string;
  setAmount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Coin.AsObject;
  static toObject(includeInstance: boolean, msg: Coin): Coin.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Coin, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Coin;
  static deserializeBinaryFromReader(message: Coin, reader: jspb.BinaryReader): Coin;
}

export namespace Coin {
  export type AsObject = {
    denom: string,
    amount: string,
  }
}

export class SubaccountBalanceV2 extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  hasDeposit(): boolean;
  clearDeposit(): void;
  getDeposit(): SubaccountDeposit | undefined;
  setDeposit(value?: SubaccountDeposit): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubaccountBalanceV2.AsObject;
  static toObject(includeInstance: boolean, msg: SubaccountBalanceV2): SubaccountBalanceV2.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubaccountBalanceV2, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubaccountBalanceV2;
  static deserializeBinaryFromReader(message: SubaccountBalanceV2, reader: jspb.BinaryReader): SubaccountBalanceV2;
}

export namespace SubaccountBalanceV2 {
  export type AsObject = {
    subaccountId: string,
    denom: string,
    deposit?: SubaccountDeposit.AsObject,
  }
}

export class SubaccountDeposit extends jspb.Message {
  getTotalBalance(): string;
  setTotalBalance(value: string): void;

  getAvailableBalance(): string;
  setAvailableBalance(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubaccountDeposit.AsObject;
  static toObject(includeInstance: boolean, msg: SubaccountDeposit): SubaccountDeposit.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubaccountDeposit, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubaccountDeposit;
  static deserializeBinaryFromReader(message: SubaccountDeposit, reader: jspb.BinaryReader): SubaccountDeposit;
}

export namespace SubaccountDeposit {
  export type AsObject = {
    totalBalance: string,
    availableBalance: string,
  }
}

export class PositionsWithUPNL extends jspb.Message {
  hasPosition(): boolean;
  clearPosition(): void;
  getPosition(): DerivativePosition | undefined;
  setPosition(value?: DerivativePosition): void;

  getUnrealizedPnl(): string;
  setUnrealizedPnl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PositionsWithUPNL.AsObject;
  static toObject(includeInstance: boolean, msg: PositionsWithUPNL): PositionsWithUPNL.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PositionsWithUPNL, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PositionsWithUPNL;
  static deserializeBinaryFromReader(message: PositionsWithUPNL, reader: jspb.BinaryReader): PositionsWithUPNL;
}

export namespace PositionsWithUPNL {
  export type AsObject = {
    position?: DerivativePosition.AsObject,
    unrealizedPnl: string,
  }
}

export class DerivativePosition extends jspb.Message {
  getTicker(): string;
  setTicker(value: string): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getDirection(): string;
  setDirection(value: string): void;

  getQuantity(): string;
  setQuantity(value: string): void;

  getEntryPrice(): string;
  setEntryPrice(value: string): void;

  getMargin(): string;
  setMargin(value: string): void;

  getLiquidationPrice(): string;
  setLiquidationPrice(value: string): void;

  getMarkPrice(): string;
  setMarkPrice(value: string): void;

  getAggregateReduceOnlyQuantity(): string;
  setAggregateReduceOnlyQuantity(value: string): void;

  getUpdatedAt(): number;
  setUpdatedAt(value: number): void;

  getCreatedAt(): number;
  setCreatedAt(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DerivativePosition.AsObject;
  static toObject(includeInstance: boolean, msg: DerivativePosition): DerivativePosition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DerivativePosition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DerivativePosition;
  static deserializeBinaryFromReader(message: DerivativePosition, reader: jspb.BinaryReader): DerivativePosition;
}

export namespace DerivativePosition {
  export type AsObject = {
    ticker: string,
    marketId: string,
    subaccountId: string,
    direction: string,
    quantity: string,
    entryPrice: string,
    margin: string,
    liquidationPrice: string,
    markPrice: string,
    aggregateReduceOnlyQuantity: string,
    updatedAt: number,
    createdAt: number,
  }
}

export class StreamAccountPortfolioRequest extends jspb.Message {
  getAccountAddress(): string;
  setAccountAddress(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getType(): string;
  setType(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StreamAccountPortfolioRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StreamAccountPortfolioRequest): StreamAccountPortfolioRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StreamAccountPortfolioRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StreamAccountPortfolioRequest;
  static deserializeBinaryFromReader(message: StreamAccountPortfolioRequest, reader: jspb.BinaryReader): StreamAccountPortfolioRequest;
}

export namespace StreamAccountPortfolioRequest {
  export type AsObject = {
    accountAddress: string,
    subaccountId: string,
    type: string,
  }
}

export class StreamAccountPortfolioResponse extends jspb.Message {
  getType(): string;
  setType(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  getAmount(): string;
  setAmount(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StreamAccountPortfolioResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StreamAccountPortfolioResponse): StreamAccountPortfolioResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StreamAccountPortfolioResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StreamAccountPortfolioResponse;
  static deserializeBinaryFromReader(message: StreamAccountPortfolioResponse, reader: jspb.BinaryReader): StreamAccountPortfolioResponse;
}

export namespace StreamAccountPortfolioResponse {
  export type AsObject = {
    type: string,
    denom: string,
    amount: string,
    subaccountId: string,
  }
}

