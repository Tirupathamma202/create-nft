import { GrpcSpotMarketInfo, GrpcSpotLimitOrder, SpotOrderHistory, GrpcSpotOrderHistory, GrpcSpotTrade, SpotMarket, SpotLimitOrder, SpotTrade } from '../types/spot';
import { GrpcPriceLevel, Orderbook, PriceLevel, GrpcTokenMeta, IndexerTokenMeta, OrderbookWithSequence } from '../types/exchange';
import { MarketsResponse as SpotMarketsResponse, MarketResponse as SpotMarketResponse, OrderbookResponse as SpotOrderbookResponse, OrderbookV2Response as SpotOrderbookV2Response, OrdersResponse as SpotOrdersResponse, OrdersHistoryResponse as SpotOrdersHistoryResponse, TradesResponse as SpotTradesResponse, OrderbooksResponse as SpotOrderbooksResponse, OrderbooksV2Response as SpotOrderbooksV2Response, SubaccountTradesListResponse as SpotSubaccountTradesListResponse } from '@injectivelabs/indexer-api/injective_spot_exchange_rpc_pb';
/**
 * @category Indexer Grpc Transformer
 */
export declare class IndexerGrpcSpotTransformer {
    static grpcTokenMetaToTokenMeta(tokenMeta: GrpcTokenMeta | undefined): IndexerTokenMeta | undefined;
    static marketResponseToMarket(response: SpotMarketResponse): SpotMarket;
    static marketsResponseToMarkets(response: SpotMarketsResponse): SpotMarket[];
    static ordersResponseToOrders(response: SpotOrdersResponse): {
        orders: SpotLimitOrder[];
        pagination: import("../../..").ExchangePagination;
    };
    static orderHistoryResponseToOrderHistory(response: SpotOrdersHistoryResponse): {
        orderHistory: SpotOrderHistory[];
        pagination: import("../../..").ExchangePagination;
    };
    static tradesResponseToTrades(response: SpotTradesResponse): {
        trades: SpotTrade[];
        pagination: import("../../..").ExchangePagination;
    };
    static subaccountTradesListResponseToTradesList(response: SpotSubaccountTradesListResponse): SpotTrade[];
    static orderbookResponseToOrderbook(response: SpotOrderbookResponse): Orderbook;
    static orderbooksResponseToOrderbooks(response: SpotOrderbooksResponse): {
        marketId: string;
        orderbook: Orderbook;
    }[];
    static orderbookV2ResponseToOrderbookV2(response: SpotOrderbookV2Response): OrderbookWithSequence;
    static orderbooksV2ResponseToOrderbooksV2(response: SpotOrderbooksV2Response): {
        marketId: string;
        orderbook: OrderbookWithSequence;
    }[];
    static grpcMarketToMarket(market: GrpcSpotMarketInfo): SpotMarket;
    static grpcMarketsToMarkets(markets: GrpcSpotMarketInfo[]): SpotMarket[];
    static grpcPriceLevelToPriceLevel(priceLevel: GrpcPriceLevel): PriceLevel;
    static grpcPriceLevelsToPriceLevels(priceLevels: GrpcPriceLevel[]): PriceLevel[];
    static grpcOrderbookToOrderbook({ buys, sells, }: {
        buys: GrpcPriceLevel[];
        sells: GrpcPriceLevel[];
    }): Orderbook;
    static grpcOrderbookV2ToOrderbookV2({ buys, sells, sequence, }: {
        buys: GrpcPriceLevel[];
        sells: GrpcPriceLevel[];
        sequence: number;
    }): OrderbookWithSequence;
    static grpcOrderToOrder(order: GrpcSpotLimitOrder): SpotLimitOrder;
    static grpcOrdersToOrders(orders: GrpcSpotLimitOrder[]): SpotLimitOrder[];
    static grpcOrderHistoryToOrderHistory(orderHistory: GrpcSpotOrderHistory): SpotOrderHistory;
    static grpcOrderHistoryListToOrderHistoryList(orderHistory: GrpcSpotOrderHistory[]): SpotOrderHistory[];
    static grpcTradeToTrade(trade: GrpcSpotTrade): SpotTrade;
    static grpcTradesToTrades(trades: GrpcSpotTrade[]): SpotTrade[];
}
//# sourceMappingURL=IndexerGrpcSpotTransformer.d.ts.map