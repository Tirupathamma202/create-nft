"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcSpotStream = void 0;
const injective_spot_exchange_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_spot_exchange_rpc_pb");
const injective_spot_exchange_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_spot_exchange_rpc_pb_service");
const transformers_1 = require("../transformers");
const grpc_1 = require("../../../utils/grpc");
/**
 * @category Indexer Grpc Stream
 */
class IndexerGrpcSpotStream {
    constructor(endpoint) {
        this.client = new injective_spot_exchange_rpc_pb_service_1.InjectiveSpotExchangeRPCClient(endpoint, {
            transport: (0, grpc_1.getGrpcTransport)(),
        });
    }
    streamSpotOrderbook({ marketIds, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamOrderbookRequest();
        request.setMarketIdsList(marketIds);
        const stream = this.client.streamOrderbook(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerSpotStreamTransformer.orderbookStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamSpotOrders({ marketId, subaccountId, orderSide, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamOrdersRequest();
        if (marketId) {
            request.setMarketId(marketId);
        }
        if (subaccountId) {
            request.setSubaccountId(subaccountId);
        }
        if (orderSide) {
            request.setOrderSide(orderSide);
        }
        const stream = this.client.streamOrders(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerSpotStreamTransformer.ordersStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamSpotOrderHistory({ marketId, subaccountId, orderTypes, executionTypes, direction, state, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamOrdersHistoryRequest();
        if (subaccountId) {
            request.setSubaccountId(subaccountId);
        }
        if (marketId) {
            request.setMarketId(marketId);
        }
        if (orderTypes) {
            request.setOrderTypesList(orderTypes);
        }
        if (direction) {
            request.setDirection(direction);
        }
        if (state) {
            request.setState(state);
        }
        if (executionTypes) {
            request.setExecutionTypesList(executionTypes);
        }
        const stream = this.client.streamOrdersHistory(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerSpotStreamTransformer.orderHistoryStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamSpotTrades({ marketIds, marketId, subaccountIds, subaccountId, pagination, direction, executionSide, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamTradesRequest();
        if (marketIds) {
            request.setMarketIdsList(marketIds);
        }
        if (marketId) {
            request.setMarketId(marketId);
        }
        if (subaccountIds) {
            request.setSubaccountIdsList(subaccountIds);
        }
        if (subaccountId) {
            request.setSubaccountId(subaccountId);
        }
        if (executionSide) {
            request.setExecutionSide(executionSide);
        }
        if (direction) {
            request.setDirection(direction);
        }
        if (pagination) {
            if (pagination.skip !== undefined) {
                request.setSkip(pagination.skip);
            }
            if (pagination.limit !== undefined) {
                request.setLimit(pagination.limit);
            }
        }
        const stream = this.client.streamTrades(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerSpotStreamTransformer.tradesStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamSpotMarket({ marketIds, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamMarketsRequest();
        if (marketIds) {
            request.setMarketIdsList(marketIds);
        }
        const stream = this.client.streamMarkets(request);
        stream.on('data', (response) => {
            callback(response);
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamSpotOrderbookV2({ marketIds, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamOrderbookV2Request();
        request.setMarketIdsList(marketIds);
        const stream = this.client.streamOrderbookV2(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerSpotStreamTransformer.orderbookV2StreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
    streamSpotOrderbookUpdate({ marketIds, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_spot_exchange_rpc_pb_1.StreamOrderbookUpdateRequest();
        request.setMarketIdsList(marketIds);
        const stream = this.client.streamOrderbookUpdate(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerSpotStreamTransformer.orderbookUpdateStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
}
exports.IndexerGrpcSpotStream = IndexerGrpcSpotStream;
//# sourceMappingURL=IndexerGrpcSpotStream.js.map