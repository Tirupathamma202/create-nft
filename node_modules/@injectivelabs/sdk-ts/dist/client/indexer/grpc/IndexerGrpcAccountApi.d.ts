import { OrderStatesResponse, SubaccountOrderSummaryResponse } from '@injectivelabs/indexer-api/injective_accounts_rpc_pb';
import BaseConsumer from '../../BaseGrpcConsumer';
import { PaginationOption } from '../../../types/pagination';
/**
 * @category Indexer Grpc API
 */
export declare class IndexerGrpcAccountApi extends BaseConsumer {
    protected module: string;
    /**
     * @deprecated - use IndexerGrpcAccountPortfoliooApi.fetchPortfolio instead
     */
    fetchPortfolio(address: string): Promise<import("../types").AccountPortfolio>;
    fetchRewards({ address, epoch }: {
        address: string;
        epoch: number;
    }): Promise<import("../types").TradingReward[]>;
    fetchSubaccountsList(address: string): Promise<string[]>;
    fetchSubaccountBalance(subaccountId: string, denom: string): Promise<import("../types").SubaccountBalance>;
    fetchSubaccountBalancesList(subaccountId: string): Promise<import("../types").SubaccountBalance[]>;
    fetchSubaccountHistory({ subaccountId, denom, transferTypes, pagination, }: {
        subaccountId: string;
        denom?: string;
        transferTypes?: string[];
        pagination?: PaginationOption;
    }): Promise<{
        transfers: import("../types").SubaccountTransfer[];
        pagination: import("../../../types/pagination").ExchangePagination;
    }>;
    fetchSubaccountOrderSummary({ subaccountId, marketId, orderDirection, }: {
        subaccountId: string;
        marketId?: string;
        orderDirection?: string;
    }): Promise<SubaccountOrderSummaryResponse.AsObject>;
    fetchOrderStates(params?: {
        spotOrderHashes?: string[];
        derivativeOrderHashes?: string[];
    }): Promise<OrderStatesResponse.AsObject>;
}
//# sourceMappingURL=IndexerGrpcAccountApi.d.ts.map