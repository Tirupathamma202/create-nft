import { CosmWasmClient, ExecuteResult, InstantiateOptions, InstantiateResult, MigrateResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, EncodeObject, OfflineDirectSigner as CosmosOfflineDirectSigner } from "@cosmjs/proto-signing";
import { DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { Log } from "@cosmjs/stargate/build/logs";
import { TxGrpcClient, TxRaw as InjTxRaw } from "@injectivelabs/sdk-ts";
import { OfflineDirectSigner } from "@injectivelabs/sdk-ts/dist/core/accounts/signers/types/proto-signer";
import type { Msg } from "../types";
import BaseChainClient from "./BaseChainClient";
import ChainClient from "./ChainClient";
export default class InjectiveClient extends BaseChainClient implements ChainClient {
    signingClient?: TxGrpcClient;
    queryClient?: CosmWasmClient;
    private directSigner?;
    private chainRestTendermintApi?;
    private chainRestAuthApi?;
    private gasPrice?;
    private chainId?;
    protected preMessage(signed?: boolean): void;
    connect(endpoint: string, signer?: CosmosOfflineDirectSigner | OfflineDirectSigner): Promise<void>;
    disconnect(): Promise<void>;
    private getTimeoutHeight;
    private getBaseAccount;
    private getPubKey;
    private signInj;
    sign(messages: EncodeObject[], fee?: StdFee, memo?: string): Promise<{
        bodyBytes: Uint8Array;
        authInfoBytes: Uint8Array;
        signatures: Uint8Array[];
    }>;
    broadcast(tx: InjTxRaw, timeoutMs?: number, pollIntervalMs?: number): Promise<DeliverTxResponse>;
    signAndBroadcast(messages: EncodeObject[], fee?: StdFee | "auto", memo?: string): Promise<DeliverTxResponse & {
        logs: readonly Log[];
    }>;
    simulateMulti(messages: EncodeObject[], fee?: StdFee, memo?: string): Promise<number>;
    simulate(message: EncodeObject, fee?: StdFee, memo?: string): Promise<number>;
    execute(contractAddress: string, msg: Msg, fee?: StdFee, memo?: string | undefined, funds?: Coin[]): Promise<ExecuteResult>;
    simulateExecute(address: string, msg: Msg, funds: Coin[], fee?: StdFee, memo?: string | undefined): Promise<number>;
    upload(code: Uint8Array, fee?: StdFee, memo?: string): ReturnType<ChainClient["upload"]>;
    simulateUpload(code: Uint8Array, fee?: StdFee, memo?: string | undefined): Promise<number | undefined>;
    instantiate(codeId: number, msg: Msg, label: string, fee?: StdFee, options?: InstantiateOptions): Promise<InstantiateResult>;
    simulateInstantiate(codeId: number, msg: Msg, label: string, fee?: StdFee, options?: InstantiateOptions): Promise<number | undefined>;
    migrate(contractAddress: string, codeId: number, msg: Msg, fee?: StdFee, memo?: string): Promise<MigrateResult>;
    simulateMigrate(contractAddress: string, codeId: number, msg: Msg, fee?: StdFee, memo?: string | undefined): Promise<number | undefined>;
    sendTokens(receivingAddress: string, amount: readonly Coin[], fee?: StdFee, memo?: string): Promise<DeliverTxResponse>;
}
