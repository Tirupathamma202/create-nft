"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcAccountPortfolioStream = void 0;
const injective_portfolio_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_portfolio_rpc_pb_service");
const injective_portfolio_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_portfolio_rpc_pb");
const transformers_1 = require("../transformers");
const grpc_1 = require("../../../utils/grpc");
/**
 * @category Indexer Grpc Stream
 */
class IndexerGrpcAccountPortfolioStream {
    constructor(endpoint) {
        this.client = new injective_portfolio_rpc_pb_service_1.InjectivePortfolioRPCClient(endpoint, {
            transport: (0, grpc_1.getGrpcTransport)(),
        });
    }
    streamAccountPortfolio({ subaccountId, accountAddress, type, callback, onEndCallback, onStatusCallback, }) {
        const request = new injective_portfolio_rpc_pb_1.StreamAccountPortfolioRequest();
        request.setAccountAddress(accountAddress);
        if (subaccountId) {
            request.setSubaccountId(subaccountId);
        }
        if (type) {
            request.setType(type);
        }
        const stream = this.client.streamAccountPortfolio(request);
        stream.on('data', (response) => {
            callback(transformers_1.IndexerAccountPortfolioStreamTransformer.accountPortfolioStreamCallback(response));
        });
        if (onEndCallback) {
            stream.on('end', onEndCallback);
        }
        if (onStatusCallback) {
            stream.on('status', onStatusCallback);
        }
        return stream;
    }
}
exports.IndexerGrpcAccountPortfolioStream = IndexerGrpcAccountPortfolioStream;
//# sourceMappingURL=IndexerGrpcAccountPortfolioStream.js.map