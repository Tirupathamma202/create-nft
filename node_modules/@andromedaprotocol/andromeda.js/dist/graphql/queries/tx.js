"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryAssets = exports.QUERY_ASSETS = exports.queryTxByHash = exports.QUERY_TX_BY_HASH = exports.queryTxByHeight = exports.QUERY_TX_BY_HEIGHT = exports.queryTxByContract = exports.QUERY_TX_BY_CONTRACT = exports.queryTxByAccount = exports.QUERY_TX_BY_ACCOUNT = exports.getAttribute = exports.getAdoType = exports.cleanTx = exports.andrEventKeys = void 0;
const proto_signing_1 = require("@cosmjs/proto-signing");
const logs_1 = require("@cosmjs/stargate/build/logs");
const graphql_request_1 = require("graphql-request");
const client_1 = require("../client");
exports.andrEventKeys = ["andr_app"];
function cleanTx(tx) {
    const rawLog = (0, logs_1.parseRawLog)(tx.rawLog);
    return {
        ...tx,
        rawLog,
        tx: (0, proto_signing_1.decodeTxRaw)(tx.tx),
        adoType: getAdoType(rawLog),
    };
}
exports.cleanTx = cleanTx;
function getAdoType(logs) {
    const attrs = getAttribute("wasm.type", logs);
    return attrs[0] ? attrs[0].value : undefined;
}
exports.getAdoType = getAdoType;
function getAttribute(field, logs) {
    const [type, key] = field.split(".");
    const attrs = [];
    if (!type || !key)
        return attrs;
    for (let i = 0; i < logs.length; i++) {
        const log = logs[i];
        if (!log)
            continue;
        const event = log.events.find((ev) => ev.type === type);
        if (!event)
            continue;
        const attr = event.attributes.find((attr) => attr.key === key);
        if (attr)
            attrs.push(attr);
    }
    return attrs;
}
exports.getAttribute = getAttribute;
const FRAGMENT_TX = (0, graphql_request_1.gql) `
  fragment Tx on TxInfo {
    code
    gasUsed
    gasWanted
    hash
    height
    rawLog
    tx
  }
`;
exports.QUERY_TX_BY_ACCOUNT = (0, graphql_request_1.gql) `
  query QUERY_TX_BY_ACCOUNT(
    $minHeight: Int
    $maxHeight: Int
    $address: String!
    $chainId: String!
  ) {
    tx(chainId: $chainId) {
      byAccount(
        minHeight: $minHeight
        maxHeight: $maxHeight
        sentFromOrTo: $address
      ) {
        ...Tx
      }
    }
  }
  ${FRAGMENT_TX}
`;
/**
 * Queries all transactions for a given account
 * @param chainId
 * @param address
 * @param minHeight
 * @param maxHeight
 * @returns
 */
async function queryTxByAccount(chainId, address, minHeight, maxHeight) {
    const resp = await (0, client_1.query)(exports.QUERY_TX_BY_ACCOUNT, { minHeight, maxHeight, address, chainId });
    return resp.tx.byAccount;
}
exports.queryTxByAccount = queryTxByAccount;
exports.QUERY_TX_BY_CONTRACT = (0, graphql_request_1.gql) `
      query QUERY_TX_BY_ACCOUNT($minHeight: Int, $maxHeight: Int, $contractAddress: String!, $chainId: String!) {
          ${FRAGMENT_TX}
          tx(chainId: $chainId) {
              byContract(minHeight: $minHeight, maxHeight: $maxHeight, address: $contractAddress) {
                  ...Tx
              }
          }
      }
  `;
/**
 * Queries all transactions for a given contract address
 * @param chainId
 * @param contractAddress
 * @param minHeight
 * @param maxHeight
 * @returns
 */
async function queryTxByContract(chainId, contractAddress, minHeight, maxHeight) {
    const resp = await (0, client_1.query)(exports.QUERY_TX_BY_CONTRACT, { minHeight, maxHeight, contractAddress, chainId });
    return resp.tx.byContract;
}
exports.queryTxByContract = queryTxByContract;
exports.QUERY_TX_BY_HEIGHT = (0, graphql_request_1.gql) `
      query QUERY_TX_BY_ACCOUNT($height: Float!, $chainId: String!) {
          ${FRAGMENT_TX}
          tx(chainId: $chainId) {
              byHeight(height: $height) {
                  ...Tx
              }
          }
      }
  `;
/**
 * Queries all transactions for a given height
 * @param height
 * @returns
 */
async function queryTxByHeight(height) {
    const resp = await (0, client_1.query)(exports.QUERY_TX_BY_HEIGHT, { height });
    return resp.tx.byHeight;
}
exports.queryTxByHeight = queryTxByHeight;
exports.QUERY_TX_BY_HASH = (0, graphql_request_1.gql) `
        query QUERY_TX_BY_ACCOUNT($hash: String!, $chainId: String!) {
            ${FRAGMENT_TX}
            tx(chainId: $chainId) {
                byHash(hash: $hash) {
                    ...Tx
                }
            }
        }
    `;
/**
 * Queries a transaction by tx hash
 * @param chainId
 * @param hash
 * @returns
 */
async function queryTxByHash(chainId, hash) {
    const resp = await (0, client_1.query)(exports.QUERY_TX_BY_HASH, { hash, chainId });
    return resp.tx.byHash;
}
exports.queryTxByHash = queryTxByHash;
exports.QUERY_ASSETS = (0, graphql_request_1.gql) `
  query QUERY_ASSETS($walletAddress: String!, $limit: Int!, $offset: Int!) {
    assets(walletAddress: $walletAddress, limit: $limit, offset: $offset) {
      address
      adoType
      appContract
      chainId
      instantiateHash
      instantiateHeight
      lastUpdatedHash
      lastUpdatedHeight
      owner
    }
  }
`;
/**
 * Queries all assets owned by a wallet address
 * @param walletAddress
 * @param limit
 * @param offset
 * @returns
 */
async function queryAssets(walletAddress, limit, offset) {
    const resp = await (0, client_1.query)(exports.QUERY_ASSETS, {
        walletAddress,
        limit,
        offset,
    });
    return resp.assets;
}
exports.queryAssets = queryAssets;
