import { DecodedTxRaw } from "@cosmjs/proto-signing";
import { IndexedTx } from "@cosmjs/stargate";
import { Log } from "@cosmjs/stargate/build/logs";
import { ContractAddressQuery, TxQuery, ChainIdQuery } from "./types";
export declare const andrEventKeys: string[];
export interface TxResponse<T> {
    tx: T;
}
export interface TxAttribute {
    key: string;
    value: string;
}
export interface TxEvent {
    type: string;
    attributes: TxAttribute[];
}
export interface TxLog {
    events?: TxEvent[];
}
export interface TxInfo {
    code: number;
    gasUsed: number;
    gasWanted: number;
    hash: string;
    height: number;
    rawLog: string;
    tx: Uint8Array;
}
export interface CleanedTx extends Omit<TxInfo, "rawLog" | "tx"> {
    rawLog: readonly Log[];
    tx: DecodedTxRaw;
    adoType?: string;
}
export declare function cleanTx(tx: TxInfo | IndexedTx): CleanedTx;
export declare function getAdoType(logs: readonly Log[]): string | undefined;
export declare function getAttribute(field: string, logs: readonly Log[]): TxAttribute[];
export interface QueryTxByAccount extends TxQuery {
    address: string;
}
export type QueryTxByAccountResponse = TxResponse<{
    byAccount: TxInfo[];
}>;
export declare const QUERY_TX_BY_ACCOUNT: string;
/**
 * Queries all transactions for a given account
 * @param chainId
 * @param address
 * @param minHeight
 * @param maxHeight
 * @returns
 */
export declare function queryTxByAccount(chainId: string, address: string, minHeight?: number, maxHeight?: number): Promise<TxInfo[]>;
export interface QueryTxByContract extends TxQuery, ContractAddressQuery {
}
export type QueryTxByContractResponse = TxResponse<{
    byContract: TxInfo[];
}>;
export declare const QUERY_TX_BY_CONTRACT: string;
/**
 * Queries all transactions for a given contract address
 * @param chainId
 * @param contractAddress
 * @param minHeight
 * @param maxHeight
 * @returns
 */
export declare function queryTxByContract(chainId: string, contractAddress: string, minHeight?: number, maxHeight?: number): Promise<TxInfo[]>;
export interface QueryTxByHeight {
    height: number;
}
export type QueryTxByHeightResponse = TxResponse<{
    byHeight: TxInfo[];
}>;
export declare const QUERY_TX_BY_HEIGHT: string;
/**
 * Queries all transactions for a given height
 * @param height
 * @returns
 */
export declare function queryTxByHeight(height: number): Promise<TxInfo[]>;
export interface QueryTxByHash extends ChainIdQuery {
    hash: string;
}
export type QueryTxByHashResponse = TxResponse<{
    byHash: TxInfo;
}>;
export declare const QUERY_TX_BY_HASH: string;
/**
 * Queries a transaction by tx hash
 * @param chainId
 * @param hash
 * @returns
 */
export declare function queryTxByHash(chainId: string, hash: string): Promise<TxInfo>;
export interface QueryAssets {
    walletAddress: string;
    limit: number;
    offset: number;
}
export interface QueryAssetsResponse {
    assets: {
        address: string;
        adoType: string;
        appContract?: string;
        chainId: string;
        instantiateHash: string;
        instantiateHeight: number;
        lastUpdatedHash: string;
        lastUpdatedHeight: number;
        owner: string;
    }[];
}
export declare const QUERY_ASSETS: string;
/**
 * Queries all assets owned by a wallet address
 * @param walletAddress
 * @param limit
 * @param offset
 * @returns
 */
export declare function queryAssets(walletAddress: string, limit: number, offset: number): Promise<QueryAssetsResponse["assets"]>;
