"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.grpcPagingToPaging = exports.grpcPaginationToPagination = exports.pageResponseToPagination = exports.paginationUint8ArrayToString = exports.generatePagination = exports.paginationRequestFromPagination = void 0;
const pagination_pb_1 = require("@injectivelabs/chain-api/cosmos/base/query/v1beta1/pagination_pb");
const paginationRequestFromPagination = (pagination) => {
    const paginationForRequest = new pagination_pb_1.PageRequest();
    if (!pagination) {
        return;
    }
    if (pagination.key) {
        paginationForRequest.setKey(pagination.key);
    }
    if (pagination.limit !== undefined) {
        paginationForRequest.setLimit(pagination.limit);
    }
    if (pagination.offset !== undefined) {
        paginationForRequest.setOffset(pagination.offset);
    }
    if (pagination.reverse !== undefined) {
        paginationForRequest.setReverse(pagination.reverse);
    }
    if (pagination.countTotal !== undefined) {
        paginationForRequest.setCountTotal(pagination.countTotal);
    }
    return paginationForRequest;
};
exports.paginationRequestFromPagination = paginationRequestFromPagination;
const generatePagination = (pagination) => {
    if (!pagination) {
        return;
    }
    if (!pagination.next) {
        return;
    }
    return {
        pagination: {
            key: pagination.next,
        },
    };
};
exports.generatePagination = generatePagination;
const paginationUint8ArrayToString = (key) => {
    if (key.constructor !== Uint8Array) {
        return key;
    }
    return new TextDecoder().decode(key);
};
exports.paginationUint8ArrayToString = paginationUint8ArrayToString;
const pageResponseToPagination = ({ newPagination, oldPagination, }) => {
    if (!newPagination) {
        return {
            prev: null,
            current: null,
            next: null,
        };
    }
    const next = (0, exports.paginationUint8ArrayToString)(newPagination.next);
    if (!oldPagination) {
        return {
            prev: null,
            current: null,
            next,
        };
    }
    return {
        prev: oldPagination.current,
        current: oldPagination.next,
        next,
    };
};
exports.pageResponseToPagination = pageResponseToPagination;
const grpcPaginationToPagination = (pagination) => {
    return {
        total: pagination
            ? parseInt((0, exports.paginationUint8ArrayToString)(pagination.getTotal()), 10)
            : 0,
        next: pagination
            ? (0, exports.paginationUint8ArrayToString)(pagination.getNextKey_asB64())
            : '',
    };
};
exports.grpcPaginationToPagination = grpcPaginationToPagination;
const grpcPagingToPaging = (pagination) => {
    if (!pagination) {
        return {
            to: 0,
            from: 0,
            total: 0,
        };
    }
    return Object.assign(Object.assign({}, pagination.toObject()), { to: pagination.getTo() || 0, from: pagination.getFrom() || 0 });
};
exports.grpcPagingToPaging = grpcPagingToPaging;
//# sourceMappingURL=pagination.js.map