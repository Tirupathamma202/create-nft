"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const ADOAPI_1 = __importDefault(require("./ADOAPI"));
class RegistryAPI extends ADOAPI_1.default {
    constructor(client, address = "") {
        super(client, address);
        this.address = address;
    }
    /**
     * Check to ensure the registry has a valid address
     */
    preMessage() {
        if (!this.address ||
            this.address.length === 0 ||
            !(0, __1.validateAddress)(this.address))
            throw new Error("Registry has no assigned address");
    }
    /**
     * Provides a message object for the registry's `SetValue` message
     * @param value
     * @param key
     * @returns
     */
    setMsg(value, key) {
        return {
            set_value: {
                value,
                key,
            },
        };
    }
    /**
     * Sets the value for a given key (default if empty) within the registry
     * @param value
     * @param fee
     * @param key
     * @param memo
     * @param funds
     * @returns
     */
    async set(value, fee, key, memo
    // funds?: Coin[]
    ) {
        this.preMessage();
        const msg = this.setMsg(value, key);
        return this.client.execute(this.address, msg, fee, memo);
    }
    /**
     * Provides a message object for the registry's `GetValue` query
     * @param key
     * @returns
     */
    getQuery(key) {
        return {
            andr_query: {
                get: (0, __1.encode)(key),
            },
        };
    }
    /**
     * Gets the value for a given key from the registry
     * @param key
     * @returns
     */
    async get(key) {
        this.preMessage();
        const msg = this.getQuery(key);
        const resp = await this.client.queryContract(this.address, msg);
        if (!resp.value)
            throw new Error("Could not query key");
        const valueKey = Object.keys(resp.value)[0];
        const value = resp.value[valueKey];
        return value;
    }
    /**
     * Simple wrapper for getting the address for a given key from the registry
     * @param key
     * @returns
     */
    async getAddress(key) {
        return this.get(key);
    }
    /**
     * Simple wrpaper for setting the address for a given key within the registry
     * @param value
     * @param fee
     * @param key
     * @param memo
     * @param funds
     * @returns
     */
    async setAddress(value, fee, key, memo
    // funds?: Coin[]
    ) {
        return this.set(value, fee, key, memo);
    }
}
exports.default = RegistryAPI;
