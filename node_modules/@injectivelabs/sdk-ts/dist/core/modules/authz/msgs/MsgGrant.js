"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/cosmos/authz/v1beta1/tx_pb");
const authz_pb_1 = require("@injectivelabs/chain-api/cosmos/authz/v1beta1/authz_pb");
const timestamp_pb_1 = require("google-protobuf/google/protobuf/timestamp_pb");
const any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const genericAuthorizationType = '/cosmos.authz.v1beta1.GenericAuthorization';
/**
 * @category Messages
 */
class MsgGrant extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgGrant(params);
    }
    toProto() {
        const { params } = this;
        const timestamp = this.getTimestamp();
        const genericAuthorization = new authz_pb_1.GenericAuthorization();
        genericAuthorization.setMsg(params.messageType);
        const authorization = new any_pb_1.Any();
        authorization.setTypeUrl(genericAuthorizationType);
        authorization.setValue(Buffer.from(genericAuthorization.serializeBinary()).toString('base64'));
        const grant = new authz_pb_1.Grant();
        grant.setExpiration(timestamp);
        grant.setAuthorization(authorization);
        const message = new tx_pb_1.MsgGrant();
        message.setGrantee(params.grantee);
        message.setGranter(params.granter);
        message.setGrant(grant);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/cosmos.authz.v1beta1.MsgGrant' }, proto.toObject());
    }
    toAmino() {
        const { params } = this;
        const proto = this.toProto();
        const timestamp = this.getTimestamp();
        const message = proto.toObject();
        const messageWithAuthorizationType = (0, snakecase_keys_1.default)(Object.assign(Object.assign({}, message), { grant: Object.assign(Object.assign({}, message.grant), { authorization: {
                    'type': 'cosmos-sdk/GenericAuthorization',
                    value: { msg: params.messageType },
                }, expiration: timestamp.toDate() }) }));
        return {
            type: 'cosmos-sdk/MsgGrant',
            value: messageWithAuthorizationType,
        };
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.authz.v1beta1.MsgGrant',
            message: proto,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/cosmos.authz.v1beta1.MsgGrant' }, value);
    }
    getTimestamp() {
        const { params } = this;
        if (params.expiration) {
            const timestamp = new timestamp_pb_1.Timestamp();
            timestamp.setSeconds(params.expiration);
            return timestamp;
        }
        const defaultExpiryYears = params.expiryInSeconds ? 0 : 5;
        const dateNow = new Date();
        const expiration = new Date(dateNow.getFullYear() + (params.expiryInYears || defaultExpiryYears), dateNow.getMonth(), dateNow.getDate());
        const timestamp = new timestamp_pb_1.Timestamp();
        timestamp.setSeconds(expiration.getTime() / 1000 + (params.expiryInSeconds || 0));
        return timestamp;
    }
}
exports.default = MsgGrant;
//# sourceMappingURL=MsgGrant.js.map