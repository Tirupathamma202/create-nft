import { MsgWithdraw as BaseMsgWithdraw } from '@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb';
import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgWithdraw {
    interface Params {
        subaccountId: string;
        injectiveAddress: string;
        amount: {
            amount: string;
            denom: string;
        };
    }
    type Proto = BaseMsgWithdraw;
    type Object = BaseMsgWithdraw.AsObject;
}
/**
 * @category Messages
 */
export default class MsgWithdraw extends MsgBase<MsgWithdraw.Params, MsgWithdraw.Proto, MsgWithdraw.Object> {
    static fromJSON(params: MsgWithdraw.Params): MsgWithdraw;
    toProto(): BaseMsgWithdraw;
    toData(): {
        sender: string;
        subaccountId: string;
        amount?: Coin.AsObject | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            subaccount_id: string;
            amount?: Coin.AsObject | undefined;
        };
    };
    toWeb3(): {
        sender: string;
        subaccount_id: string;
        amount?: Coin.AsObject | undefined;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgWithdraw;
    };
}
//# sourceMappingURL=MsgWithdraw.d.ts.map