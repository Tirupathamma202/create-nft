import { MsgGrant as BaseMsgGrant } from '@injectivelabs/chain-api/cosmos/authz/v1beta1/tx_pb';
import { Grant } from '@injectivelabs/chain-api/cosmos/authz/v1beta1/authz_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgGrant {
    interface Params {
        messageType: string;
        grantee: string;
        granter: string;
        expiration?: number;
        expiryInYears?: number;
        expiryInSeconds?: number;
    }
    type Proto = BaseMsgGrant;
    type Object = BaseMsgGrant.AsObject;
}
/**
 * @category Messages
 */
export default class MsgGrant extends MsgBase<MsgGrant.Params, MsgGrant.Proto, MsgGrant.Object> {
    static fromJSON(params: MsgGrant.Params): MsgGrant;
    toProto(): BaseMsgGrant;
    toData(): {
        granter: string;
        grantee: string;
        grant?: Grant.AsObject | undefined;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            granter: string;
            grantee: string;
            grant?: {
                authorization?: {
                    type_url: string;
                    value: string | Uint8Array;
                } | undefined;
                expiration?: {
                    seconds: number;
                    nanos: number;
                } | undefined;
            } | undefined;
        };
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgGrant;
    };
    toWeb3(): {
        granter: string;
        grantee: string;
        grant?: {
            authorization?: {
                type_url: string;
                value: string | Uint8Array;
            } | undefined;
            expiration?: {
                seconds: number;
                nanos: number;
            } | undefined;
        } | undefined;
        '@type': string;
    };
    private getTimestamp;
}
//# sourceMappingURL=MsgGrant.d.ts.map