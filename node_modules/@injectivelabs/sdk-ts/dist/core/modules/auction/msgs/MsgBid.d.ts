import { MsgBid as BaseMsgBid } from '@injectivelabs/chain-api/injective/auction/v1beta1/tx_pb';
import { Coin } from '@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgBid {
    interface Params {
        round: number;
        injectiveAddress: string;
        amount: {
            amount: string;
            denom: string;
        };
    }
    type Proto = BaseMsgBid;
    type Object = BaseMsgBid.AsObject;
}
/**
 * @category Messages
 */
export default class MsgBid extends MsgBase<MsgBid.Params, MsgBid.Proto, MsgBid.Object> {
    static fromJSON(params: MsgBid.Params): MsgBid;
    toProto(): BaseMsgBid;
    toData(): {
        sender: string;
        bidAmount?: Coin.AsObject | undefined;
        round: number;
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            bid_amount?: Coin.AsObject | undefined;
            round: number;
        };
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgBid;
    };
    toWeb3(): {
        sender: string;
        bid_amount?: Coin.AsObject | undefined;
        round: number;
        '@type': string;
    };
}
//# sourceMappingURL=MsgBid.d.ts.map