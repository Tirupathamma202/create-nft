"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryCrowdfundState = exports.QUERY_CROWDFUND_STATE = exports.queryCrowdfundTokenAvailable = exports.QUERY_CROWDFUND_TOKEN_AVAILABLE = exports.queryCrowdfundConfig = exports.QUERY_CROWDFUND_CONFIG = exports.queryCrowdfundAvailableTokens = exports.QUERY_CROWDFUND_AVAILABLE_TOKENS = void 0;
const client_1 = require("../client");
const graphql_request_1 = require("graphql-request");
exports.QUERY_CROWDFUND_AVAILABLE_TOKENS = (0, graphql_request_1.gql) `
  query QUERY_CROWDFUND_AVAILABLE_TOKENS($contractAddress: String!) {
    crowdfund(address: $contractAddress) {
      availableTokens
    }
  }
`;
/**
 * Queries all available token IDs from a crowdfund contract
 * @param contractAddress
 * @returns
 */
async function queryCrowdfundAvailableTokens(contractAddress) {
    const resp = await (0, client_1.query)(exports.QUERY_CROWDFUND_AVAILABLE_TOKENS, { contractAddress });
    return resp.crowdfund.availableTokens;
}
exports.queryCrowdfundAvailableTokens = queryCrowdfundAvailableTokens;
exports.QUERY_CROWDFUND_CONFIG = (0, graphql_request_1.gql) `
  query QUERY_CROWDFUND_CONFIG($contractAddress: String!) {
    crowdfund(address: $contractAddress) {
      config {
        can_mint_after_sale
        token_address
      }
    }
  }
`;
/**
 * Queries the config for a given crowdfund contract
 * @param contractAddress
 * @returns
 */
async function queryCrowdfundConfig(contractAddress) {
    const resp = await (0, client_1.query)(exports.QUERY_CROWDFUND_CONFIG, { contractAddress });
    return resp.crowdfund.config;
}
exports.queryCrowdfundConfig = queryCrowdfundConfig;
exports.QUERY_CROWDFUND_TOKEN_AVAILABLE = (0, graphql_request_1.gql) `
  query QUERY_CROWDFUND_TOKEN_AVAILABLE(
    $contractAddress: String!
    $tokenId: String!
  ) {
    crowdfund(address: $contractAddress) {
      isTokenAvailable(tokenId: $tokenId)
    }
  }
`;
/**
 * Queries a crowdfund contract for the availability of a given token ID
 * @param contractAddress
 * @param tokenId
 * @returns
 */
async function queryCrowdfundTokenAvailable(contractAddress, tokenId) {
    const resp = await (0, client_1.query)(exports.QUERY_CROWDFUND_TOKEN_AVAILABLE, { contractAddress, tokenId });
    return resp.crowdfund.isTokenAvailable;
}
exports.queryCrowdfundTokenAvailable = queryCrowdfundTokenAvailable;
exports.QUERY_CROWDFUND_STATE = (0, graphql_request_1.gql) `
  query QUERY_CROWDFUND_STATE($contractAddress: String!) {
    crowdfund(address: $contractAddress) {
      state {
        amount_sold
        amount_to_send
        amount_transferred
        expiration
        max_amount_per_wallet
        min_tokens_sold
        price {
          amount
          denom
        }
        recipient
      }
    }
  }
`;
/**
 * Queries the current crowdfund state
 * @param contractAddress
 * @returns
 */
async function queryCrowdfundState(contractAddress) {
    const resp = await (0, client_1.query)(exports.QUERY_CROWDFUND_STATE, { contractAddress });
    return resp.crowdfund.state;
}
exports.queryCrowdfundState = queryCrowdfundState;
