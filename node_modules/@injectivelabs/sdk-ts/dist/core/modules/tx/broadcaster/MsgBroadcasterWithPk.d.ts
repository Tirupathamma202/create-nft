import { PrivateKey } from '../../../accounts';
import { Msgs } from '../../..';
import { ChainId, EthereumChainId } from '@injectivelabs/ts-types';
import { Network, NetworkEndpoints } from '@injectivelabs/networks';
interface MsgBroadcasterTxOptions {
    msgs: Msgs | Msgs[];
    injectiveAddress: string;
    ethereumAddress?: string;
    memo?: string;
    feePrice?: string;
    feeDenom?: string;
    gasLimit?: number;
}
interface MsgBroadcasterOptionsWithPk {
    network: Network;
    /**
     * Only used if we want to override the default
     * endpoints taken from the network param
     */
    endpoints?: {
        indexer: string;
        grpc: string;
        rest: string;
    };
    privateKey: string | PrivateKey;
    ethereumChainId?: EthereumChainId;
}
/**
 * This class is used to broadcast transactions
 * using a privateKey as a signer
 * for the transactions and broadcasting
 * the transactions directly to the node
 *
 * Mainly used for working in a Node Environment
 */
export declare class MsgBroadcasterWithPk {
    endpoints: NetworkEndpoints;
    chainId: ChainId;
    privateKey: PrivateKey;
    constructor(options: MsgBroadcasterOptionsWithPk);
    /**
     * Broadcasting the transaction using the client
     *
     * @param tx
     * @returns {string} transaction hash
     */
    broadcast(transaction: MsgBroadcasterTxOptions): Promise<import("..").TxResponse>;
    /**
     * Broadcasting the transaction using the client
     *
     * @param tx
     * @returns {string} transaction hash
     */
    simulate(transaction: MsgBroadcasterTxOptions): Promise<import("..").TxClientSimulateResponse>;
}
export {};
//# sourceMappingURL=MsgBroadcasterWithPk.d.ts.map