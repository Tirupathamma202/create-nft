"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coin_pb_1 = require("@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb");
const tx_pb_1 = require("@injectivelabs/chain-api/cosmos/bank/v1beta1/tx_pb");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const MsgBase_1 = require("../../MsgBase");
const bank_pb_1 = require("@injectivelabs/chain-api/cosmos/bank/v1beta1/bank_pb");
const bank_pb_2 = require("@injectivelabs/chain-api/cosmos/bank/v1beta1/bank_pb");
/**
 * @category Messages
 */
class MsgMultiSend extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgMultiSend(params);
    }
    toProto() {
        const { params } = this;
        const inputs = params.inputs.map((i) => {
            const input = new bank_pb_1.Input();
            input.setAddress(i.address);
            input.setCoinsList(i.coins.map((c) => {
                const coin = new coin_pb_1.Coin();
                coin.setAmount(c.amount);
                coin.setDenom(c.denom);
                return coin;
            }));
            return input;
        });
        const outputs = params.outputs.map((o) => {
            const output = new bank_pb_2.Output();
            output.setAddress(o.address);
            output.setCoinsList(o.coins.map((c) => {
                const coin = new coin_pb_1.Coin();
                coin.setAmount(c.amount);
                coin.setDenom(c.denom);
                return coin;
            }));
            return output;
        });
        const message = new tx_pb_1.MsgMultiSend();
        message.setInputsList(inputs);
        message.setOutputsList(outputs);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/cosmos.bank.v1beta1.MsgMultiSend' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign(Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject())), { inputs: proto
                .getInputsList()
                .map((amount) => (0, snakecase_keys_1.default)(amount.toObject())), outputs: proto
                .getOutputsList()
                .map((amount) => (0, snakecase_keys_1.default)(amount.toObject())) });
        // @ts-ignore
        delete message.inputs_list;
        // @ts-ignore
        delete message.outputs_list;
        return {
            type: 'cosmos-sdk/MsgMultiSend',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/cosmos.bank.v1beta1.MsgMultiSend' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.bank.v1beta1.MsgMultiSend',
            message: proto,
        };
    }
}
exports.default = MsgMultiSend;
//# sourceMappingURL=MsgMultiSend.js.map