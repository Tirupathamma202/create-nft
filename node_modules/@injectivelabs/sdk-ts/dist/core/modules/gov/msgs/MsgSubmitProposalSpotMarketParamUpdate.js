"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/cosmos/gov/v1beta1/tx_pb");
const coin_pb_1 = require("@injectivelabs/chain-api/cosmos/base/v1beta1/coin_pb");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const tx_pb_2 = require("@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb");
const any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
const MsgBase_1 = require("../../MsgBase");
const snakecase_keys_2 = __importDefault(require("snakecase-keys"));
/**
 * @category Messages
 */
class MsgSubmitProposalSpotMarketParamUpdate extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgSubmitProposalSpotMarketParamUpdate(params);
    }
    toProto() {
        const { params } = this;
        const depositParams = new coin_pb_1.Coin();
        depositParams.setDenom(params.deposit.denom);
        depositParams.setAmount(params.deposit.amount);
        const content = this.getContent();
        const proposalType = '/injective.exchange.v1beta1.SpotMarketParamUpdateProposal';
        const contentAny = new any_pb_1.Any();
        contentAny.setValue(content.serializeBinary());
        contentAny.setTypeUrl(proposalType);
        const message = new tx_pb_1.MsgSubmitProposal();
        message.setContent(contentAny);
        message.setProposer(params.proposer);
        message.setInitialDepositList([depositParams]);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/cosmos.gov.v1beta1.MsgSubmitProposal' }, proto.toObject());
    }
    toAmino() {
        const { params } = this;
        const proto = this.toProto();
        const content = this.getContent();
        const proposalType = 'exchange/SpotMarketParamUpdateProposal';
        const message = {
            proposer: params.proposer,
            content: Object.assign({}, content.toObject()),
            initial_deposit: proto
                .getInitialDepositList()
                .map((amount) => (0, snakecase_keys_2.default)(amount.toObject())),
        };
        const messageWithProposalType = Object.assign(Object.assign({}, message), { content: Object.assign(Object.assign({}, message.content), { type: proposalType }) });
        return {
            type: 'cosmos-sdk/MsgSubmitProposal',
            value: messageWithProposalType,
        };
    }
    toWeb3() {
        const { params } = this;
        const proto = this.toProto();
        const content = this.getContent();
        const proposalType = '/injective.exchange.v1beta1.SpotMarketParamUpdateProposal';
        const message = {
            proposer: params.proposer,
            content: Object.assign({}, content.toObject()),
            initial_deposit: proto
                .getInitialDepositList()
                .map((amount) => (0, snakecase_keys_1.default)(amount.toObject())),
        };
        const messageWithProposalType = Object.assign(Object.assign({}, message), { content: Object.assign(Object.assign({}, message.content), { '@type': proposalType }) });
        return Object.assign({ '@type': '/cosmos.gov.v1beta1.MsgSubmitProposal' }, messageWithProposalType);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.gov.v1beta1.MsgSubmitProposal',
            message: proto,
        };
    }
    getContent() {
        const { params } = this;
        const content = new tx_pb_2.SpotMarketParamUpdateProposal();
        content.setTitle(params.market.title);
        content.setDescription(params.market.description);
        content.setMakerFeeRate(params.market.makerFeeRate);
        content.setTakerFeeRate(params.market.takerFeeRate);
        content.setRelayerFeeShareRate(params.market.relayerFeeShareRate);
        content.setMarketId(params.market.marketId);
        content.setStatus(params.market.status);
        content.setMinPriceTickSize(params.market.minPriceTickSize);
        content.setMinQuantityTickSize(params.market.minQuantityTickSize);
        return content;
    }
}
exports.default = MsgSubmitProposalSpotMarketParamUpdate;
//# sourceMappingURL=MsgSubmitProposalSpotMarketParamUpdate.js.map