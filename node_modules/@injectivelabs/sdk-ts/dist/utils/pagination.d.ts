import { PageRequest } from '@injectivelabs/chain-api/cosmos/base/query/v1beta1/pagination_pb';
import { ExchangePagination, PaginationOption } from '../types/pagination';
import { Pagination, PagePagination } from '../types/pagination';
import { PageResponse } from '@injectivelabs/chain-api/cosmos/base/query/v1beta1/pagination_pb';
import { Paging } from '@injectivelabs/indexer-api/injective_explorer_rpc_pb';
export declare const paginationRequestFromPagination: (pagination?: PaginationOption) => PageRequest | undefined;
export declare const generatePagination: (pagination: Pagination | PagePagination | undefined) => {
    pagination: {
        key: string;
    };
} | undefined;
export declare const paginationUint8ArrayToString: (key: any) => string;
export declare const pageResponseToPagination: ({ newPagination, oldPagination, }: {
    oldPagination: PagePagination | undefined;
    newPagination?: Pagination | undefined;
}) => PagePagination;
export declare const grpcPaginationToPagination: (pagination: PageResponse | undefined) => Pagination;
export declare const grpcPagingToPaging: (pagination: Paging | undefined) => ExchangePagination;
//# sourceMappingURL=pagination.d.ts.map