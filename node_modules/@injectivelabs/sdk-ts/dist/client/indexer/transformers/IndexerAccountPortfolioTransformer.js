"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcAccountPortfolioTransformer = void 0;
class IndexerGrpcAccountPortfolioTransformer {
    static accountPortfolioResponseToAccountPortfolio(response, address) {
        const portfolio = response.getPortfolio();
        if (!portfolio) {
            return {
                accountAddress: address || '',
                bankBalancesList: [],
                subaccountsList: [],
                positionsWithUpnlList: [],
            };
        }
        const bankBalancesList = (portfolio === null || portfolio === void 0 ? void 0 : portfolio.getBankBalancesList()) || [];
        const subaccountList = (portfolio === null || portfolio === void 0 ? void 0 : portfolio.getSubaccountsList()) || [];
        const positionsWithUpnlList = (portfolio === null || portfolio === void 0 ? void 0 : portfolio.getPositionsWithUpnlList()) || [];
        return {
            accountAddress: portfolio.getAccountAddress(),
            bankBalancesList: bankBalancesList.map(IndexerGrpcAccountPortfolioTransformer.grpcCoinToCoin),
            subaccountsList: subaccountList.map(IndexerGrpcAccountPortfolioTransformer.grpcSubaccountBalanceToSubaccountBalance),
            positionsWithUpnlList: positionsWithUpnlList.map(IndexerGrpcAccountPortfolioTransformer.grpcPositionWithUPNLToPositionWithUPNL),
        };
    }
    static grpcCoinToCoin(coin) {
        return {
            amount: coin.getAmount(),
            denom: coin.getDenom(),
        };
    }
    static grpcPositionWithUPNLToPositionWithUPNL(positionsWithUPNL) {
        const grpcPosition = positionsWithUPNL.getPosition();
        return {
            position: grpcPosition
                ? IndexerGrpcAccountPortfolioTransformer.grpcPositionToGrpcPosition(grpcPosition)
                : undefined,
            unrealizedPnl: positionsWithUPNL.getUnrealizedPnl(),
        };
    }
    static grpcPositionToGrpcPosition(position) {
        return {
            ticker: position.getTicker(),
            marketId: position.getMarketId(),
            subaccountId: position.getSubaccountId(),
            direction: position.getDirection(),
            quantity: position.getQuantity(),
            entryPrice: position.getEntryPrice(),
            margin: position.getMargin(),
            liquidationPrice: position.getLiquidationPrice(),
            markPrice: position.getMarkPrice(),
            aggregateReduceOnlyQuantity: position.getAggregateReduceOnlyQuantity(),
            updatedAt: position.getUpdatedAt(),
            createdAt: position.getCreatedAt(),
        };
    }
    static grpcSubaccountDepositToSubaccountDeposit(subaccountDeposit) {
        return {
            totalBalance: subaccountDeposit.getTotalBalance(),
            availableBalance: subaccountDeposit.getAvailableBalance(),
        };
    }
    static grpcSubaccountBalanceToSubaccountBalance(subaccountBalance) {
        const deposit = subaccountBalance.getDeposit();
        return {
            subaccountId: subaccountBalance.getSubaccountId(),
            denom: subaccountBalance.getDenom(),
            deposit: deposit
                ? IndexerGrpcAccountPortfolioTransformer.grpcSubaccountDepositToSubaccountDeposit(deposit)
                : undefined,
        };
    }
}
exports.IndexerGrpcAccountPortfolioTransformer = IndexerGrpcAccountPortfolioTransformer;
//# sourceMappingURL=IndexerAccountPortfolioTransformer.js.map