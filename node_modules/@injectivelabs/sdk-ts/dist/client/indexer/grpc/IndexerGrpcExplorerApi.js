"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcExplorerApi = void 0;
const injective_explorer_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_explorer_rpc_pb");
const injective_explorer_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_explorer_rpc_pb_service");
const BaseGrpcConsumer_1 = __importDefault(require("../../BaseGrpcConsumer"));
const transformers_1 = require("../transformers");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcExplorerApi extends BaseGrpcConsumer_1.default {
    constructor() {
        super(...arguments);
        this.module = types_1.IndexerModule.Explorer;
    }
    fetchTxByHash(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetTxByTxHashRequest();
            request.setHash(hash);
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetTxByTxHash);
                return transformers_1.IndexerGrpcExplorerTransformer.getTxByTxHashResponseToTx(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchAccountTx({ address, limit, type, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetAccountTxsRequest();
            request.setAddress(address);
            if (limit) {
                request.setLimit(limit);
            }
            if (type) {
                request.setType(type);
            }
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetAccountTxs);
                return transformers_1.IndexerGrpcExplorerTransformer.getAccountTxsResponseToAccountTxs(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchValidator(validatorAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetValidatorRequest();
            request.setAddress(validatorAddress);
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetValidator);
                return transformers_1.IndexerGrpcExplorerTransformer.validatorResponseToValidator(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchValidatorUptime(validatorAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetValidatorUptimeRequest();
            request.setAddress(validatorAddress);
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetValidatorUptime);
                return transformers_1.IndexerGrpcExplorerTransformer.getValidatorUptimeResponseToValidatorUptime(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchPeggyDepositTxs({ sender, receiver, limit, skip, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetPeggyDepositTxsRequest();
            if (sender) {
                request.setSender(sender);
            }
            if (receiver) {
                request.setReceiver(receiver);
            }
            if (limit) {
                request.setLimit(limit);
            }
            if (skip) {
                request.setSkip(skip);
            }
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetPeggyDepositTxs);
                return transformers_1.IndexerGrpcExplorerTransformer.getPeggyDepositTxsResponseToPeggyDepositTxs(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchPeggyWithdrawalTxs({ sender, receiver, limit, skip, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetPeggyWithdrawalTxsRequest();
            if (sender) {
                request.setSender(sender);
            }
            if (receiver) {
                request.setReceiver(receiver);
            }
            if (limit) {
                request.setLimit(limit);
            }
            if (skip) {
                request.setSkip(skip);
            }
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetPeggyWithdrawalTxs);
                return transformers_1.IndexerGrpcExplorerTransformer.getPeggyWithdrawalTxsResponseToPeggyWithdrawalTxs(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchBlocks({ before, after, limit, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetBlocksRequest();
            if (before) {
                request.setBefore(before);
            }
            if (after) {
                request.setAfter(after);
            }
            if (limit) {
                request.setLimit(limit);
            }
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetBlocks);
                return response;
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchBlock(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetBlockRequest();
            request.setId(id);
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetBlock);
                return response;
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchTxs({ before, after, limit, skip, type, module, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetTxsRequest();
            if (before) {
                request.setBefore(before);
            }
            if (after) {
                request.setAfter(after);
            }
            if (limit) {
                request.setLimit(limit);
            }
            if (skip) {
                request.setSkip(skip);
            }
            if (type) {
                request.setType(type);
            }
            if (module) {
                request.setModule(module);
            }
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetTxs);
                return response;
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchIBCTransferTxs({ sender, receiver, srcChannel, srcPort, destChannel, destPort, limit, skip, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_explorer_rpc_pb_1.GetIBCTransferTxsRequest();
            if (sender) {
                request.setSender(sender);
            }
            if (receiver) {
                request.setReceiver(receiver);
            }
            if (limit) {
                request.setLimit(limit);
            }
            if (skip) {
                request.setSkip(skip);
            }
            if (srcChannel) {
                request.setSrcChannel(srcChannel);
            }
            if (srcPort) {
                request.setSrcPort(srcPort);
            }
            if (destChannel) {
                request.setDestChannel(destChannel);
            }
            if (destPort) {
                request.setDestPort(destPort);
            }
            try {
                const response = yield this.request(request, injective_explorer_rpc_pb_service_1.InjectiveExplorerRPC.GetIBCTransferTxs);
                return transformers_1.IndexerGrpcExplorerTransformer.getIBCTransferTxsResponseToIBCTransferTxs(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.IndexerGrpcExplorerApi = IndexerGrpcExplorerApi;
//# sourceMappingURL=IndexerGrpcExplorerApi.js.map