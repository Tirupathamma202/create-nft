"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcDerivativesApi = void 0;
const injective_derivative_exchange_rpc_pb_1 = require("@injectivelabs/indexer-api/injective_derivative_exchange_rpc_pb");
const injective_derivative_exchange_rpc_pb_service_1 = require("@injectivelabs/indexer-api/injective_derivative_exchange_rpc_pb_service");
const BaseGrpcConsumer_1 = __importDefault(require("../../BaseGrpcConsumer"));
const transformers_1 = require("../transformers");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
/**
 * @category Indexer Grpc API
 */
class IndexerGrpcDerivativesApi extends BaseGrpcConsumer_1.default {
    constructor() {
        super(...arguments);
        this.module = types_1.IndexerModule.Derivatives;
    }
    fetchMarkets(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketStatus, quoteDenom } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.MarketsRequest();
            if (marketStatus) {
                request.setMarketStatus(marketStatus);
            }
            if (quoteDenom) {
                request.setQuoteDenom(quoteDenom);
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Markets);
                return transformers_1.IndexerGrpcDerivativeTransformer.marketsResponseToMarkets(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchMarket(marketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_derivative_exchange_rpc_pb_1.MarketRequest();
            request.setMarketId(marketId);
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Market);
                return transformers_1.IndexerGrpcDerivativeTransformer.marketResponseToMarket(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchBinaryOptionsMarkets(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketStatus, quoteDenom, pagination } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.BinaryOptionsMarketsRequest();
            if (marketStatus) {
                request.setMarketStatus(marketStatus);
            }
            if (quoteDenom) {
                request.setQuoteDenom(quoteDenom);
            }
            if (pagination) {
                if (pagination.skip !== undefined && request.setSkip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined && request.setLimit !== undefined) {
                    request.setLimit(pagination.limit);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.BinaryOptionsMarkets);
                return pagination
                    ? transformers_1.IndexerGrpcDerivativeTransformer.binaryOptionsMarketResponseWithPaginationToBinaryOptionsMarket(response)
                    : transformers_1.IndexerGrpcDerivativeTransformer.binaryOptionsMarketsResponseToBinaryOptionsMarkets(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchBinaryOptionsMarket(marketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_derivative_exchange_rpc_pb_1.BinaryOptionsMarketRequest();
            request.setMarketId(marketId);
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.BinaryOptionsMarket);
                return transformers_1.IndexerGrpcDerivativeTransformer.binaryOptionsMarketResponseToBinaryOptionsMarket(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrderbook(marketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_derivative_exchange_rpc_pb_1.OrderbookRequest();
            request.setMarketId(marketId);
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Orderbook);
                return transformers_1.IndexerGrpcDerivativeTransformer.orderbookResponseToOrderbook(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrders(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, marketIds, subaccountId, orderSide, isConditional, pagination, } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.OrdersRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (marketIds) {
                request.setMarketIdsList(marketIds);
            }
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (orderSide) {
                request.setOrderSide(orderSide);
            }
            if (isConditional !== undefined) {
                request.setIsConditional(isConditional ? 'true' : 'false');
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
                if (pagination.endTime !== undefined) {
                    request.setEndTime(pagination.endTime);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Orders);
                return transformers_1.IndexerGrpcDerivativeTransformer.ordersResponseToOrders(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrderHistory(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { subaccountId, marketId, marketIds, orderTypes, executionTypes, direction, isConditional, state, pagination, } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.OrdersHistoryRequest();
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (marketIds) {
                request.setMarketIdsList(marketIds);
            }
            if (orderTypes) {
                request.setOrderTypesList(orderTypes);
            }
            if (executionTypes) {
                request.setExecutionTypesList(executionTypes);
            }
            if (direction) {
                request.setDirection(direction);
            }
            if (isConditional !== undefined) {
                request.setIsConditional(isConditional ? 'true' : 'false');
            }
            if (state) {
                request.setState(state);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
                if (pagination.endTime !== undefined) {
                    request.setEndTime(pagination.endTime);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.OrdersHistory);
                return transformers_1.IndexerGrpcDerivativeTransformer.orderHistoryResponseToOrderHistory(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchPositions(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, marketIds, subaccountId, direction, pagination } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.PositionsRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (marketIds) {
                request.setMarketIdsList(marketIds);
            }
            if (direction) {
                request.setDirection(direction);
            }
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
                if (pagination.endTime !== undefined) {
                    request.setEndTime(pagination.endTime);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Positions);
                return transformers_1.IndexerGrpcDerivativeTransformer.positionsResponseToPositions(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchTrades(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, subaccountId, startTime, endTime, direction, pagination, executionTypes, executionSide, marketIds, } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.TradesRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (marketIds) {
                request.setMarketIdsList(marketIds);
            }
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (marketIds) {
                request.setMarketIdsList(marketIds);
            }
            else {
                request.setMarketIdsList([]);
            }
            if (executionTypes) {
                request.setExecutionTypesList(executionTypes);
            }
            if (executionSide) {
                request.setExecutionSide(executionSide);
            }
            if (direction) {
                request.setDirection(direction);
            }
            if (startTime) {
                request.setStartTime(startTime);
            }
            if (endTime) {
                request.setEndTime(endTime);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
                if (pagination.endTime !== undefined) {
                    request.setEndTime(pagination.endTime);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Trades);
                return transformers_1.IndexerGrpcDerivativeTransformer.tradesResponseToTrades(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchFundingPayments(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, marketIds, subaccountId, pagination } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.FundingPaymentsRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (marketIds) {
                request.setMarketIdsList(marketIds);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
                if (pagination.endTime !== undefined) {
                    request.setEndTime(pagination.endTime);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.FundingPayments);
                return transformers_1.IndexerGrpcDerivativeTransformer.fundingPaymentsResponseToFundingPayments(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchFundingRates(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, pagination } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.FundingRatesRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.FundingRates);
                return transformers_1.IndexerGrpcDerivativeTransformer.fundingRatesResponseToFundingRates(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountOrdersList(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, subaccountId, pagination } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.SubaccountOrdersListRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.SubaccountOrdersList);
                return transformers_1.IndexerGrpcDerivativeTransformer.ordersResponseToOrders(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchSubaccountTradesList(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { marketId, subaccountId, direction, executionType, pagination } = params || {};
            const request = new injective_derivative_exchange_rpc_pb_1.SubaccountTradesListRequest();
            if (marketId) {
                request.setMarketId(marketId);
            }
            if (subaccountId) {
                request.setSubaccountId(subaccountId);
            }
            if (direction) {
                request.setDirection(direction);
            }
            if (executionType) {
                request.setExecutionType(executionType);
            }
            if (pagination) {
                if (pagination.skip !== undefined) {
                    request.setSkip(pagination.skip);
                }
                if (pagination.limit !== undefined) {
                    request.setLimit(pagination.limit);
                }
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.SubaccountTradesList);
                return transformers_1.IndexerGrpcDerivativeTransformer.subaccountTradesListResponseToSubaccountTradesList(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrderbooks(marketIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_derivative_exchange_rpc_pb_1.OrderbooksRequest();
            if (marketIds.length > 0) {
                request.setMarketIdsList(marketIds);
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.Orderbooks);
                return transformers_1.IndexerGrpcDerivativeTransformer.orderbooksResponseToOrderbooks(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrderbooksV2(marketIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_derivative_exchange_rpc_pb_1.OrderbooksV2Request();
            if (marketIds.length > 0) {
                request.setMarketIdsList(marketIds);
            }
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.OrderbooksV2);
                return transformers_1.IndexerGrpcDerivativeTransformer.orderbooksV2ResponseToOrderbooksV2(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchOrderbookV2(marketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new injective_derivative_exchange_rpc_pb_1.OrderbookV2Request();
            request.setMarketId(marketId);
            try {
                const response = yield this.request(request, injective_derivative_exchange_rpc_pb_service_1.InjectiveDerivativeExchangeRPC.OrderbookV2);
                return transformers_1.IndexerGrpcDerivativeTransformer.orderbookV2ResponseToOrderbookV2(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.IndexerGrpcDerivativesApi = IndexerGrpcDerivativesApi;
//# sourceMappingURL=IndexerGrpcDerivativesApi.js.map