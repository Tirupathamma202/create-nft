"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tx_pb_1 = require("@injectivelabs/chain-api/cosmos/authz/v1beta1/tx_pb");
const any_pb_1 = require("google-protobuf/google/protobuf/any_pb");
const snakecase_keys_1 = __importDefault(require("snakecase-keys"));
const MsgBase_1 = require("../../MsgBase");
/**
 * @category Messages
 */
class MsgExec extends MsgBase_1.MsgBase {
    static fromJSON(params) {
        return new MsgExec(params);
    }
    toProto() {
        const { params } = this;
        const message = new tx_pb_1.MsgExec();
        message.setGrantee(params.grantee);
        const msgs = Array.isArray(params.msgs) ? params.msgs : [params.msgs];
        const actualMsgs = msgs.map((msg) => {
            const msgValue = new any_pb_1.Any();
            msgValue.setTypeUrl(msg.toData()['@type']);
            msgValue.setValue(msg.toProto().serializeBinary());
            return msgValue;
        });
        message.setMsgsList(actualMsgs);
        return message;
    }
    toData() {
        const proto = this.toProto();
        return Object.assign({ '@type': '/cosmos.authz.v1beta1.MsgExec' }, proto.toObject());
    }
    toAmino() {
        const proto = this.toProto();
        const message = Object.assign(Object.assign({}, (0, snakecase_keys_1.default)(proto.toObject())), { msgs: proto.getMsgsList() });
        return {
            type: 'cosmos-sdk/MsgExec',
            value: message,
        };
    }
    toWeb3() {
        const amino = this.toAmino();
        const { value } = amino;
        return Object.assign({ '@type': '/cosmos.authz.v1beta1.MsgExec' }, value);
    }
    toDirectSign() {
        const proto = this.toProto();
        return {
            type: '/cosmos.authz.v1beta1.MsgExec',
            message: proto,
        };
    }
}
exports.default = MsgExec;
//# sourceMappingURL=MsgExec.js.map