import { MsgMultiExecute as BaseMsgMultiExecute } from '@injectivelabs/chain-api/injective/exchange/v1beta1/tx_pb';
import { MsgBase } from '../../MsgBase';
import { Msgs } from '../../msgs';
import { Any } from 'google-protobuf/google/protobuf/any_pb';
export declare namespace MsgMultiExecute {
    interface Params {
        msgs: Msgs[];
        injectiveAddress: string;
    }
    type Proto = BaseMsgMultiExecute;
    type Object = BaseMsgMultiExecute.AsObject;
}
/**
 * @category Messages
 */
export default class MsgMultiExecute extends MsgBase<MsgMultiExecute.Params, MsgMultiExecute.Proto, MsgMultiExecute.Object> {
    static fromJSON(params: MsgMultiExecute.Params): MsgMultiExecute;
    toProto(): BaseMsgMultiExecute;
    toData(): {
        sender: string;
        msgsList: Any.AsObject[];
        '@type': string;
    };
    toAmino(): {
        type: string;
        value: {
            sender: string;
            msgs_list: {
                type_url: string;
                value: string | Uint8Array;
            }[];
        };
    };
    toWeb3(): {
        sender: string;
        msgs_list: {
            type_url: string;
            value: string | Uint8Array;
        }[];
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgMultiExecute;
    };
}
//# sourceMappingURL=MsgMultiExecute.d.ts.map