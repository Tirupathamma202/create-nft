"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerGrpcAccountTransformer = void 0;
const pagination_1 = require("../../..//utils/pagination");
/**
 * @category Indexer Grpc Transformer
 *
 */
class IndexerGrpcAccountTransformer {
    /**
     *
     * @deprecated - use IndexerGrpcAccountPortfolioApi.accountPortfolioResponseToAccountPortfolio
     */
    static accountPortfolioResponseToAccountPortfolio(response) {
        const portfolio = response.getPortfolio();
        const subaccounts = (portfolio === null || portfolio === void 0 ? void 0 : portfolio.getSubaccountsList()) || [];
        return {
            portfolioValue: portfolio.getPortfolioValue(),
            availableBalance: portfolio.getAvailableBalance(),
            lockedBalance: portfolio.getLockedBalance(),
            unrealizedPnl: portfolio.getUnrealizedPnl(),
            subaccountsList: subaccounts.map(IndexerGrpcAccountTransformer.grpcSubaccountPortfolioToSubaccountPortfolio),
        };
    }
    static grpcSubaccountPortfolioToSubaccountPortfolio(subaccountPortfolio) {
        return {
            subaccountId: subaccountPortfolio.getSubaccountId(),
            availableBalance: subaccountPortfolio.getAvailableBalance(),
            lockedBalance: subaccountPortfolio.getLockedBalance(),
            unrealizedPnl: subaccountPortfolio.getUnrealizedPnl(),
        };
    }
    static grpcAccountPortfolioToAccountPortfolio(portfolio) {
        return {
            portfolioValue: portfolio.getPortfolioValue(),
            availableBalance: portfolio.getAvailableBalance(),
            lockedBalance: portfolio.getLockedBalance(),
            unrealizedPnl: portfolio.getUnrealizedPnl(),
            subaccountsList: portfolio
                .getSubaccountsList()
                .map(IndexerGrpcAccountTransformer.grpcSubaccountPortfolioToSubaccountPortfolio),
        };
    }
    static grpcAmountToAmount(amount) {
        return {
            amount: amount.getAmount(),
            denom: amount.getDenom(),
        };
    }
    static grpcDepositToDeposit(deposit) {
        return {
            totalBalance: deposit.getTotalBalance(),
            availableBalance: deposit.getAvailableBalance(),
        };
    }
    static balancesResponseToBalances(response) {
        return response
            .getBalancesList()
            .map((b) => IndexerGrpcAccountTransformer.grpcBalanceToBalance(b));
    }
    static balanceResponseToBalance(response) {
        return IndexerGrpcAccountTransformer.grpcBalanceToBalance(response.getBalance());
    }
    static grpcBalanceToBalance(balance) {
        const deposit = balance.getDeposit();
        return {
            subaccountId: balance.getSubaccountId(),
            accountAddress: balance.getAccountAddress(),
            denom: balance.getDenom(),
            deposit: deposit
                ? IndexerGrpcAccountTransformer.grpcDepositToDeposit(deposit)
                : undefined,
        };
    }
    static grpcBalancesToBalances(balances) {
        return balances.map((balance) => IndexerGrpcAccountTransformer.grpcBalanceToBalance(balance));
    }
    static grpcTransferHistoryEntryToTransferHistoryEntry(transfer) {
        const amount = transfer.getAmount();
        return {
            transferType: transfer.getTransferType(),
            srcSubaccountId: transfer.getSrcSubaccountId(),
            srcSubaccountAddress: transfer.getSrcAccountAddress(),
            dstSubaccountId: transfer.getDstSubaccountId(),
            dstSubaccountAddress: transfer.getDstAccountAddress(),
            executedAt: transfer.getExecutedAt(),
            amount: amount
                ? IndexerGrpcAccountTransformer.grpcAmountToAmount(amount)
                : undefined,
        };
    }
    static tradingRewardsResponseToTradingRewards(response) {
        const rewards = response.getRewardsList();
        return rewards.map(IndexerGrpcAccountTransformer.grpcTradingRewardToTradingReward);
    }
    static grpcTradingRewardsToTradingRewards(rewards) {
        return rewards.map(IndexerGrpcAccountTransformer.grpcTradingRewardToTradingReward);
    }
    static grpcTradingRewardToTradingReward(reward) {
        return {
            accountAddress: reward.getAccountAddress(),
            rewards: reward
                .getRewardsList()
                .map((r) => ({ amount: r.getAmount(), denom: r.getDenom() })),
            distributedAt: reward.getDistributedAt(),
        };
    }
    static transferHistoryResponseToTransferHistory(response) {
        const transfers = response.getTransfersList();
        const pagination = response.getPaging();
        return {
            transfers: transfers.map((transfer) => IndexerGrpcAccountTransformer.grpcTransferHistoryEntryToTransferHistoryEntry(transfer)),
            pagination: (0, pagination_1.grpcPagingToPaging)(pagination),
        };
    }
    static grpcTransferHistoryToTransferHistory(transfers) {
        return transfers.map((transfer) => IndexerGrpcAccountTransformer.grpcTransferHistoryEntryToTransferHistoryEntry(transfer));
    }
}
exports.IndexerGrpcAccountTransformer = IndexerGrpcAccountTransformer;
//# sourceMappingURL=IndexerGrpcAccountTransformer.js.map