"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryRecipientLockedFunds = exports.QUERY_TIMELOCK_RECIPIENT_LOCKED_FUNDS = exports.queryTimelockLockedFunds = exports.QUERY_TIMELOCK_LOCKED_FUNDS = void 0;
const client_1 = require("../client");
const graphql_request_1 = require("graphql-request");
exports.QUERY_TIMELOCK_LOCKED_FUNDS = (0, graphql_request_1.gql) `
  query QUERY_TIMELOCK_LOCKED_FUNDS(
    $contractAddress: String!
    $owner: String!
    $recipient: String!
  ) {
    timelock(address: $contractAddress) {
      getLockedFunds(owner: $owner, recipient: $recipient) {
        coins {
          denom
          amount
        }
        condition {
          expiration
          miniumFunds {
            denom
            amount
          }
        }
        recipient
      }
    }
  }
`;
/**
 * Queries a timelock contract for locked funds given an owner/recipient tuple
 * @param contractAddress
 * @param owner
 * @param recipient
 * @returns
 */
async function queryTimelockLockedFunds(contractAddress, owner, recipient) {
    const resp = await (0, client_1.query)(exports.QUERY_TIMELOCK_LOCKED_FUNDS, { contractAddress, owner, recipient });
    return resp.timelock.getLockedFunds;
}
exports.queryTimelockLockedFunds = queryTimelockLockedFunds;
exports.QUERY_TIMELOCK_RECIPIENT_LOCKED_FUNDS = (0, graphql_request_1.gql) `
  query QUERY_TIMELOCK_RECIPIENT_LOCKED_FUNDS(
    $contractAddress: String!
    $options: AndrSearchOptions!
    $recipient: String!
  ) {
    timelock(address: $contractAddress) {
      getLockedFundsForRecipient(options: $options, recipient: $recipient) {
        coins {
          amount
          denom
        }
        condition {
          expiration
          miniumFunds {
            amount
            denom
          }
        }
        recipient
      }
    }
  }
`;
/**
 * Queries a timelock contract for all locked funds for a given recipient
 * @param contractAddress
 * @param recipient
 * @param options
 * @returns
 */
async function queryRecipientLockedFunds(contractAddress, recipient, options) {
    const resp = await (0, client_1.query)(exports.QUERY_TIMELOCK_RECIPIENT_LOCKED_FUNDS, {
        contractAddress,
        options,
        recipient,
    });
    return resp.timelock.getLockedFundsForRecipient;
}
exports.queryRecipientLockedFunds = queryRecipientLockedFunds;
