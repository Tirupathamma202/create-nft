"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcGovApi = void 0;
const query_pb_1 = require("@injectivelabs/chain-api/cosmos/gov/v1beta1/query_pb");
const query_pb_service_1 = require("@injectivelabs/chain-api/cosmos/gov/v1beta1/query_pb_service");
const BaseGrpcConsumer_1 = __importDefault(require("../../BaseGrpcConsumer"));
const pagination_1 = require("../../../utils/pagination");
const ChainGrpcGovTransformer_1 = require("../transformers/ChainGrpcGovTransformer");
const types_1 = require("../types");
const exceptions_1 = require("@injectivelabs/exceptions");
/**
 * @category Chain Grpc API
 */
class ChainGrpcGovApi extends BaseGrpcConsumer_1.default {
    constructor() {
        super(...arguments);
        this.module = types_1.ChainModule.Gov;
    }
    fetchModuleParams() {
        return __awaiter(this, void 0, void 0, function* () {
            const paramTypes = ['voting', 'deposit', 'tallying'];
            const requests = paramTypes.map((type) => {
                const request = new query_pb_1.QueryParamsRequest();
                request.setParamsType(type);
                return request;
            });
            try {
                const responses = yield Promise.all(requests.map((request) => this.request(request, query_pb_service_1.Query.Params)));
                const [votingParams, depositParams, tallyParams] = responses;
                return ChainGrpcGovTransformer_1.ChainGrpcGovTransformer.moduleParamsResponseToModuleParamsByType({
                    votingParams: votingParams.getVotingParams(),
                    tallyParams: tallyParams.getTallyParams(),
                    depositParams: depositParams.getDepositParams(),
                });
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchProposals({ status, pagination, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new query_pb_1.QueryProposalsRequest();
            request.setProposalStatus(status);
            const paginationForRequest = (0, pagination_1.paginationRequestFromPagination)(pagination);
            if (paginationForRequest) {
                request.setPagination(paginationForRequest);
            }
            try {
                const response = yield this.request(request, query_pb_service_1.Query.Proposals);
                return ChainGrpcGovTransformer_1.ChainGrpcGovTransformer.proposalsResponseToProposals(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchProposal(proposalId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new query_pb_1.QueryProposalRequest();
            request.setProposalId(proposalId);
            try {
                const response = yield this.request(request, query_pb_service_1.Query.Proposal);
                return ChainGrpcGovTransformer_1.ChainGrpcGovTransformer.proposalResponseToProposal(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchProposalDeposits({ proposalId, pagination, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new query_pb_1.QueryDepositsRequest();
            request.setProposalId(proposalId);
            const paginationForRequest = (0, pagination_1.paginationRequestFromPagination)(pagination);
            if (paginationForRequest) {
                request.setPagination(paginationForRequest);
            }
            try {
                const response = yield this.request(request, query_pb_service_1.Query.Deposits);
                return ChainGrpcGovTransformer_1.ChainGrpcGovTransformer.depositsResponseToDeposits(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchProposalVotes({ proposalId, pagination, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new query_pb_1.QueryVotesRequest();
            request.setProposalId(proposalId);
            const paginationForRequest = (0, pagination_1.paginationRequestFromPagination)(pagination);
            if (paginationForRequest) {
                request.setPagination(paginationForRequest);
            }
            try {
                const response = yield this.request(request, query_pb_service_1.Query.Votes);
                return ChainGrpcGovTransformer_1.ChainGrpcGovTransformer.votesResponseToVotes(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
    fetchProposalTally(proposalId) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new query_pb_1.QueryTallyResultRequest();
            request.setProposalId(proposalId);
            try {
                const response = yield this.request(request, query_pb_service_1.Query.TallyResult);
                return ChainGrpcGovTransformer_1.ChainGrpcGovTransformer.tallyResultResponseToTallyResult(response);
            }
            catch (e) {
                if (e instanceof exceptions_1.GrpcUnaryRequestException) {
                    throw e;
                }
                throw new exceptions_1.GrpcUnaryRequestException(e, {
                    code: exceptions_1.UnspecifiedErrorCode,
                    contextModule: this.module,
                });
            }
        });
    }
}
exports.ChainGrpcGovApi = ChainGrpcGovApi;
//# sourceMappingURL=ChainGrpcGovApi.js.map