import { ServiceClient } from '@injectivelabs/chain-api/cosmos/tx/v1beta1/service_pb_service';
import { BroadcastModeMap } from '@injectivelabs/chain-api/cosmos/tx/v1beta1/service_pb';
import { TxRaw } from '@injectivelabs/chain-api/cosmos/tx/v1beta1/tx_pb';
import { TxClientBroadcastOptions, TxClientBroadcastResponse, TxClientSimulateResponse, TxConcreteApi } from '../types/tx';
import { TxResponse } from '../types/tx';
export declare class TxGrpcApi implements TxConcreteApi {
    txService: ServiceClient;
    endpoint: string;
    constructor(endpoint: string);
    fetchTx(hash: string): Promise<TxResponse>;
    fetchTxPoll(txHash: string, timeout?: number): Promise<TxResponse>;
    simulate(txRaw: TxRaw): Promise<TxClientSimulateResponse>;
    broadcast(txRaw: TxRaw, options?: TxClientBroadcastOptions): Promise<TxResponse>;
    broadcastBlock(txRaw: TxRaw, broadcastMode?: BroadcastModeMap[keyof BroadcastModeMap]): Promise<TxClientBroadcastResponse>;
    private request;
}
//# sourceMappingURL=TxGrpcApi.d.ts.map