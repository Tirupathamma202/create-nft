"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcExchangeTransformer = void 0;
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcExchangeTransformer {
    static moduleParamsResponseToParams(response) {
        const params = response.getParams();
        const spotMarketInstantListingFee = params.getSpotMarketInstantListingFee();
        const derivativeMarketInstantListingFee = params.getDerivativeMarketInstantListingFee();
        return {
            spotMarketInstantListingFee: spotMarketInstantListingFee
                ? {
                    amount: spotMarketInstantListingFee.getAmount(),
                    denom: spotMarketInstantListingFee.getDenom(),
                }
                : undefined,
            derivativeMarketInstantListingFee: derivativeMarketInstantListingFee
                ? {
                    amount: derivativeMarketInstantListingFee.getAmount(),
                    denom: derivativeMarketInstantListingFee.getDenom(),
                }
                : undefined,
            defaultSpotMakerFeeRate: params.getDefaultSpotMakerFeeRate(),
            defaultSpotTakerFeeRate: params.getDefaultSpotTakerFeeRate(),
            defaultDerivativeMakerFeeRate: params.getDefaultDerivativeMakerFeeRate(),
            defaultDerivativeTakerFeeRate: params.getDefaultDerivativeTakerFeeRate(),
            defaultInitialMarginRatio: params.getDefaultInitialMarginRatio(),
            defaultMaintenanceMarginRatio: params.getDefaultMaintenanceMarginRatio(),
            defaultFundingInterval: params.getDefaultFundingInterval(),
            fundingMultiple: params.getFundingMultiple(),
            relayerFeeShareRate: params.getRelayerFeeShareRate(),
            defaultHourlyFundingRateCap: params.getDefaultHourlyFundingRateCap(),
            defaultHourlyInterestRate: params.getDefaultHourlyInterestRate(),
            maxDerivativeOrderSideCount: params.getMaxDerivativeOrderSideCount(),
            injRewardStakedRequirementThreshold: params.getInjRewardStakedRequirementThreshold(),
            tradingRewardsVestingDuration: params.getTradingRewardsVestingDuration(),
        };
    }
    static feeDiscountScheduleResponseToFeeDiscountSchedule(response) {
        const schedule = response.getFeeDiscountSchedule();
        return {
            bucketCount: schedule.getBucketCount(),
            bucketDuration: schedule.getBucketDuration(),
            quoteDenomsList: schedule.getQuoteDenomsList(),
            tierInfosList: schedule
                .getTierInfosList()
                .map(ChainGrpcExchangeTransformer.grpcFeeDiscountTierInfoToFeeDiscountTierInfo)
                .filter((info) => info),
            disqualifiedMarketIdsList: schedule.getDisqualifiedMarketIdsList(),
        };
    }
    static tradingRewardsCampaignResponseToTradingRewardsCampaign(response) {
        return {
            tradingRewardCampaignInfo: ChainGrpcExchangeTransformer.grpcTradingRewardCampaignInfoToTradingRewardCampaignInfo(response.getTradingRewardCampaignInfo()),
            tradingRewardPoolCampaignScheduleList: response
                .getTradingRewardPoolCampaignScheduleList()
                .map(ChainGrpcExchangeTransformer.grpcCampaignRewardPoolToCampaignRewardPool),
            pendingTradingRewardPoolCampaignScheduleList: response
                .getPendingTradingRewardPoolCampaignScheduleList()
                .map(ChainGrpcExchangeTransformer.grpcCampaignRewardPoolToCampaignRewardPool),
            totalTradeRewardPoints: response.getTotalTradeRewardPoints(),
            pendingTotalTradeRewardPointsList: response.getPendingTotalTradeRewardPointsList(),
        };
    }
    static feeDiscountAccountInfoResponseToFeeDiscountAccountInfo(response) {
        return {
            tierLevel: response.getTierLevel(),
            accountInfo: ChainGrpcExchangeTransformer.grpcFeeDiscountTierInfoToFeeDiscountTierInfo(response.getAccountInfo()),
            accountTtl: ChainGrpcExchangeTransformer.grpcFeeDiscountTierTTLToFeeDiscountTierTTL(response.getAccountTtl()),
        };
    }
    static grpcFeeDiscountTierInfoToFeeDiscountTierInfo(info) {
        if (!info) {
            return;
        }
        return {
            makerDiscountRate: info.getMakerDiscountRate(),
            takerDiscountRate: info.getTakerDiscountRate(),
            stakedAmount: info.getStakedAmount(),
            feePaidAmount: 
            // @ts-ignore
            info.getFeePaidAmount !== undefined ? info.getFeePaidAmount() : '0',
            volume: info.getVolume !== undefined ? info.getVolume() : '0',
        };
    }
    static grpcFeeDiscountTierTTLToFeeDiscountTierTTL(info) {
        if (!info) {
            return;
        }
        return {
            tier: info.getTier(),
            ttlTimestamp: info.getTtlTimestamp(),
        };
    }
    static grpcPointsMultiplierToPointsMultiplier(point) {
        return {
            makerPointsMultiplier: point.getMakerPointsMultiplier(),
            takerPointsMultiplier: point.getTakerPointsMultiplier(),
        };
    }
    static grpcTradingRewardCampaignBoostInfoToTradingRewardCampaignBoostInfo(info) {
        if (!info) {
            return;
        }
        return {
            boostedSpotMarketIdsList: info.getBoostedSpotMarketIdsList(),
            boostedDerivativeMarketIdsList: info.getBoostedDerivativeMarketIdsList(),
            spotMarketMultipliersList: info
                .getSpotMarketMultipliersList()
                .map(ChainGrpcExchangeTransformer.grpcPointsMultiplierToPointsMultiplier),
            derivativeMarketMultipliersList: info
                .getDerivativeMarketMultipliersList()
                .map(ChainGrpcExchangeTransformer.grpcPointsMultiplierToPointsMultiplier),
        };
    }
    static grpcTradingRewardCampaignInfoToTradingRewardCampaignInfo(info) {
        if (!info) {
            return;
        }
        return {
            campaignDurationSeconds: info.getCampaignDurationSeconds(),
            quoteDenomsList: info.getQuoteDenomsList(),
            tradingRewardBoostInfo: ChainGrpcExchangeTransformer.grpcTradingRewardCampaignBoostInfoToTradingRewardCampaignBoostInfo(info.getTradingRewardBoostInfo()),
            disqualifiedMarketIdsList: info.getDisqualifiedMarketIdsList(),
        };
    }
    static grpcCampaignRewardPoolToCampaignRewardPool(pool) {
        return {
            startTimestamp: pool.getStartTimestamp(),
            maxCampaignRewardsList: pool
                .getMaxCampaignRewardsList()
                .map((coin) => ({ amount: coin.getAmount(), denom: coin.getDenom() })),
        };
    }
    static grpcPositionToPosition(position) {
        return position.toObject();
    }
    static positionsResponseToPositions(response) {
        return response.getStateList().map((position) => {
            return {
                subaccountId: position.getSubaccountId(),
                marketId: position.getMarketId(),
                position: ChainGrpcExchangeTransformer.grpcPositionToPosition(position.getPosition()),
            };
        });
    }
}
exports.ChainGrpcExchangeTransformer = ChainGrpcExchangeTransformer;
//# sourceMappingURL=ChainGrpcExchangeTransformer.js.map