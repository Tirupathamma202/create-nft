import type { PrimitiveValue } from "../../types";
import { ContractAddressQuery } from "./types";
export interface PrimitiveResponse<T> {
    primitive: T;
}
export interface QueryPrimitive extends ContractAddressQuery {
}
export type QueryPrimitiveResponse = PrimitiveResponse<{
    owner: string;
}>;
export declare const QUERY_PRIMITIVE: string;
/**
 * Queries details about a primitive given its contract address
 * @param contractAddress The contract address of the primitive
 * @returns
 */
export declare function queryPrimitive(contractAddress: string): Promise<string>;
export interface QueryPrimitiveValue extends ContractAddressQuery {
    key: string;
}
export interface PrimitiveValueResponse {
    key: string;
    value: PrimitiveValue;
}
export type QueryPrimitiveValueResponse = PrimitiveResponse<{
    getValue: PrimitiveValueResponse;
}>;
export declare const QUERY_PRIMITIVE_VALUE: string;
/**
 * Queries the value of a given key from a given primitie contract
 * @param contractAddress The contract address of the primitive
 * @param key The key to query
 * @returns
 */
export declare function queryPrimitiveValue(contractAddress: string, key: string): Promise<PrimitiveValueResponse>;
