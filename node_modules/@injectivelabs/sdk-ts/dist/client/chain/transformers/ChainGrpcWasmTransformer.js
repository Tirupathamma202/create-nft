"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainGrpcWasmTransformer = void 0;
const utils_1 = require("../../../utils");
const pagination_1 = require("./../../../utils/pagination");
/**
 * @category Chain Grpc Transformer
 */
class ChainGrpcWasmTransformer {
    static allContractStateResponseToContractAccountsBalanceWithPagination(response) {
        const contractAccountsBalance = response
            .getModelsList()
            .map((model) => {
            return {
                account: Buffer.from(model.getKey_asB64(), 'base64')
                    .toString('utf-8')
                    .split('balance')
                    .pop(),
                balance: Buffer.from(model.getValue_asB64(), 'base64')
                    .toString('utf-8')
                    .replace(/['"]+/g, ''),
            };
        })
            .filter(({ account }) => {
            return account && account.startsWith('inj');
        });
        return {
            contractAccountsBalance,
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static contactInfoResponseToContractInfo(contractInfo) {
        const absoluteTxPosition = contractInfo.getCreated();
        return {
            codeId: contractInfo.getCodeId(),
            creator: contractInfo.getCreator(),
            admin: contractInfo.getAdmin(),
            label: contractInfo.getLabel(),
            created: {
                blockHeight: absoluteTxPosition
                    ? absoluteTxPosition.getBlockHeight()
                    : 0,
                txIndex: absoluteTxPosition ? absoluteTxPosition.getTxIndex() : 0,
            },
            ibcPortId: contractInfo.getIbcPortId(),
        };
    }
    static grpcContractCodeHistoryEntryToContractCodeHistoryEntry(entry) {
        const updated = entry.getUpdated();
        return {
            operation: entry.getOperation(),
            codeId: entry.getCodeId(),
            updated: updated
                ? {
                    blockHeight: updated.getBlockHeight(),
                    txIndex: updated.getTxIndex(),
                }
                : undefined,
            msg: (0, utils_1.fromUtf8)(entry.getMsg_asU8()),
        };
    }
    static grpcCodeInfoResponseToCodeInfoResponse(info) {
        return {
            codeId: info.getCodeId(),
            creator: info.getCreator(),
            dataHash: info.getDataHash(),
        };
    }
    static contactHistoryResponseToContractHistory(response) {
        return {
            entriesList: response
                .getEntriesList()
                .map(ChainGrpcWasmTransformer.grpcContractCodeHistoryEntryToContractCodeHistoryEntry),
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static contractCodesResponseToContractCodes(response) {
        return {
            codeInfosList: response
                .getCodeInfosList()
                .map(ChainGrpcWasmTransformer.grpcCodeInfoResponseToCodeInfoResponse),
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
    static contractCodeResponseToContractCode(response) {
        return {
            codeInfo: ChainGrpcWasmTransformer.grpcCodeInfoResponseToCodeInfoResponse(response.getCodeInfo()),
            data: response.getData(),
        };
    }
    static contractByCodeResponseToContractByCode(response) {
        return {
            contractsList: response.getContractsList(),
            pagination: (0, pagination_1.grpcPaginationToPagination)(response.getPagination()),
        };
    }
}
exports.ChainGrpcWasmTransformer = ChainGrpcWasmTransformer;
//# sourceMappingURL=ChainGrpcWasmTransformer.js.map