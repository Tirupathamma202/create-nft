import { ContractAddressQuery } from "./types";
export declare const AUCTION_STATE_FRAGMENT: string;
export interface AuctionResponse<T> {
    auction: T;
}
export interface QueryAuctionAuctionIds extends ContractAddressQuery {
    tokenAddress: string;
    tokenId: string;
}
export type QueryAuctionAuctionIdsResponse = AuctionResponse<{
    auctionIDs: {
        auction_ids: number[];
    };
}>;
export declare const QUERY_AUCTION_AUCTION_IDS: string;
/**
 * Queries all token IDs from an auction contract for a given token ID/token contract address tuple
 * @param contractAddress
 * @param tokenId
 * @param tokenAddress
 * @returns
 */
export declare function queryAuctionIds(contractAddress: string, tokenId: string, tokenAddress: string): Promise<number[]>;
export interface QueryAuctionAuctionInfo extends ContractAddressQuery {
    tokenAddress: string;
}
export type QueryAuctionAuctionInfoResponse = AuctionResponse<{
    auctionInfosForAddress: {
        auction_ids: number[];
        token_address: string;
        token_id: string;
    };
}>;
export declare const QUERY_AUCTION_AUCTION_INFO: string;
/**
 * Queries auction information from an auction contract about a particular token contract by address
 * @param contractAddress
 * @param tokenAddress
 * @returns
 */
export declare function queryAuctionInfo(contractAddress: string, tokenAddress: string): Promise<QueryAuctionAuctionInfoResponse["auction"]>;
export interface QueryAuctionAuctionState extends ContractAddressQuery {
    auctionId: number;
}
export interface AuctionState {
    auction_id: string;
    coin_denom: string;
    end_time: Record<string, any>;
    high_bidder_addr: string;
    high_bidder_amount: string;
    is_cancelled: boolean;
    start_time: Record<string, any>;
    whitelist: string[];
    min_bid: string;
}
export type QueryAuctionAuctionStateResponse = AuctionResponse<{
    auctionState: AuctionState;
}>;
export declare const QUERY_AUCTION_AUCTION_STATE: string;
/**
 * Queries auction state from an auction contract given an auction ID
 * @param contractAddress
 * @param auctionId
 * @returns
 */
export declare function queryAuctionState(contractAddress: string, auctionId: number): Promise<AuctionState>;
export interface QueryAuctionBids extends ContractAddressQuery {
    auctionId: number;
}
export interface Bid {
    amount: number;
    bidder: string;
    timestamp: string;
}
export type QueryAuctionBidsResponse = AuctionResponse<{
    bids: {
        bids: Bid[];
    };
}>;
export declare const QUERY_AUCTION_BIDS: string;
/**
 * Queries all bids from an auction contract for a given auction ID
 * @param contractAddress
 * @param auctionId
 * @returns
 */
export declare function queryBids(contractAddress: string, auctionId: number): Promise<Bid[]>;
export interface QueryAuctionLatestAuctionState extends ContractAddressQuery {
    tokenAddress: string;
    tokenId: string;
}
export type QueryAuctionLatestAuctionStateResponse = AuctionResponse<{
    latestAuctionState: AuctionState;
}>;
export declare const QUERY_AUCTION_LATEST_AUCTION_STATE: string;
/**
 * Queries an auction contract for the latest auction state for a given token address/id tuple
 * @param contractAddress
 * @param tokenAddress
 * @param tokenId
 * @returns
 */
export declare function queryAuctionLatestState(contractAddress: string, tokenAddress: string, tokenId: string): Promise<AuctionState>;
