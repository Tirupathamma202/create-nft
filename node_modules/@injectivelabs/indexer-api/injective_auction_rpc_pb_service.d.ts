// package: injective_auction_rpc
// file: injective_auction_rpc.proto

import * as injective_auction_rpc_pb from "./injective_auction_rpc_pb";
import {grpc} from "@improbable-eng/grpc-web";

type InjectiveAuctionRPCAuctionEndpoint = {
  readonly methodName: string;
  readonly service: typeof InjectiveAuctionRPC;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_auction_rpc_pb.AuctionEndpointRequest;
  readonly responseType: typeof injective_auction_rpc_pb.AuctionEndpointResponse;
};

type InjectiveAuctionRPCAuctions = {
  readonly methodName: string;
  readonly service: typeof InjectiveAuctionRPC;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_auction_rpc_pb.AuctionsRequest;
  readonly responseType: typeof injective_auction_rpc_pb.AuctionsResponse;
};

type InjectiveAuctionRPCStreamBids = {
  readonly methodName: string;
  readonly service: typeof InjectiveAuctionRPC;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof injective_auction_rpc_pb.StreamBidsRequest;
  readonly responseType: typeof injective_auction_rpc_pb.StreamBidsResponse;
};

export class InjectiveAuctionRPC {
  static readonly serviceName: string;
  static readonly AuctionEndpoint: InjectiveAuctionRPCAuctionEndpoint;
  static readonly Auctions: InjectiveAuctionRPCAuctions;
  static readonly StreamBids: InjectiveAuctionRPCStreamBids;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class InjectiveAuctionRPCClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  auctionEndpoint(
    requestMessage: injective_auction_rpc_pb.AuctionEndpointRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_auction_rpc_pb.AuctionEndpointResponse|null) => void
  ): UnaryResponse;
  auctionEndpoint(
    requestMessage: injective_auction_rpc_pb.AuctionEndpointRequest,
    callback: (error: ServiceError|null, responseMessage: injective_auction_rpc_pb.AuctionEndpointResponse|null) => void
  ): UnaryResponse;
  auctions(
    requestMessage: injective_auction_rpc_pb.AuctionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_auction_rpc_pb.AuctionsResponse|null) => void
  ): UnaryResponse;
  auctions(
    requestMessage: injective_auction_rpc_pb.AuctionsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_auction_rpc_pb.AuctionsResponse|null) => void
  ): UnaryResponse;
  streamBids(requestMessage: injective_auction_rpc_pb.StreamBidsRequest, metadata?: grpc.Metadata): ResponseStream<injective_auction_rpc_pb.StreamBidsResponse>;
}

